
Power_Tag_BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7e8  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  0800a928  0800a928  0000b928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ab90  0800ab90  0000bb90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ab98  0800ab98  0000bb98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ab9c  0800ab9c  0000bb9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000ac  20000008  0800aba0  0000c008  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  7 BLE_DRIVER_CONTEXT 00000035  200000b4  0800ac4c  0000c0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000ec  0800ac81  0000c0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000628  20000100  0800ac92  0000c100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000728  0800ac92  0000c728  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000ca67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000d000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000d000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800ac92  0000c1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00033a63  00000000  00000000  0000ca97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006b76  00000000  00000000  000404fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003160  00000000  00000000  00047070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000025fd  00000000  00000000  0004a1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002e5ff  00000000  00000000  0004c7cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003578f  00000000  00000000  0007adcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010db2d  00000000  00000000  000b055b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001be088  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000d258  00000000  00000000  001be0cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005d  00000000  00000000  001cb324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000100 	.word	0x20000100
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a908 	.word	0x0800a908

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000104 	.word	0x20000104
 800017c:	0800a908 	.word	0x0800a908

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000190:	b5b0      	push	{r4, r5, r7, lr}
 8000192:	b088      	sub	sp, #32
 8000194:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000196:	4b0b      	ldr	r3, [pc, #44]	@ (80001c4 <APPD_EnableCPU2+0x34>)
 8000198:	1d3c      	adds	r4, r7, #4
 800019a:	461d      	mov	r5, r3
 800019c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a4:	c403      	stmia	r4!, {r0, r1}
 80001a6:	8022      	strh	r2, [r4, #0]
 80001a8:	3402      	adds	r4, #2
 80001aa:	0c13      	lsrs	r3, r2, #16
 80001ac:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001ae:	f008 fe83 	bl	8008eb8 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001b2:	1d3b      	adds	r3, r7, #4
 80001b4:	4618      	mov	r0, r3
 80001b6:	f008 f910 	bl	80083da <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001ba:	bf00      	nop
}
 80001bc:	3720      	adds	r7, #32
 80001be:	46bd      	mov	sp, r7
 80001c0:	bdb0      	pop	{r4, r5, r7, pc}
 80001c2:	bf00      	nop
 80001c4:	0800a928 	.word	0x0800a928

080001c8 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80001d0:	4b07      	ldr	r3, [pc, #28]	@ (80001f0 <LL_C2_PWR_SetPowerMode+0x28>)
 80001d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80001d6:	f023 0207 	bic.w	r2, r3, #7
 80001da:	4905      	ldr	r1, [pc, #20]	@ (80001f0 <LL_C2_PWR_SetPowerMode+0x28>)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4313      	orrs	r3, r2
 80001e0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80001e4:	bf00      	nop
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr
 80001f0:	58000400 	.word	0x58000400

080001f4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80001fc:	4b06      	ldr	r3, [pc, #24]	@ (8000218 <LL_EXTI_EnableIT_32_63+0x24>)
 80001fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000202:	4905      	ldr	r1, [pc, #20]	@ (8000218 <LL_EXTI_EnableIT_32_63+0x24>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4313      	orrs	r3, r2
 8000208:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800020c:	bf00      	nop
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr
 8000218:	58000800 	.word	0x58000800

0800021c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000228:	4a0a      	ldr	r2, [pc, #40]	@ (8000254 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800022a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800022e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000232:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000236:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	021b      	lsls	r3, r3, #8
 800023e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000242:	4313      	orrs	r3, r2
 8000244:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	cafecafe 	.word	0xcafecafe

08000258 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000260:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000264:	689b      	ldr	r3, [r3, #8]
 8000266:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800026a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4313      	orrs	r3, r2
 8000272:	608b      	str	r3, [r1, #8]
}
 8000274:	bf00      	nop
 8000276:	370c      	adds	r7, #12
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr

08000280 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000284:	4b04      	ldr	r3, [pc, #16]	@ (8000298 <LL_DBGMCU_GetDeviceID+0x18>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800028c:	4618      	mov	r0, r3
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e0042000 	.word	0xe0042000

0800029c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <LL_DBGMCU_GetRevisionID+0x18>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	0c1b      	lsrs	r3, r3, #16
 80002a6:	b29b      	uxth	r3, r3
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e0042000 	.word	0xe0042000

080002b8 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	22ff      	movs	r2, #255	@ 0xff
 80002c4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr

080002d2 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80002d2:	b480      	push	{r7}
 80002d4:	b083      	sub	sp, #12
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	22ca      	movs	r2, #202	@ 0xca
 80002de:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2253      	movs	r2, #83	@ 0x53
 80002e4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80002e6:	bf00      	nop
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr

080002f2 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80002f2:	b480      	push	{r7}
 80002f4:	b083      	sub	sp, #12
 80002f6:	af00      	add	r7, sp, #0
 80002f8:	6078      	str	r0, [r7, #4]
 80002fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	f023 0207 	bic.w	r2, r3, #7
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	431a      	orrs	r2, r3
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	609a      	str	r2, [r3, #8]
}
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr

08000318 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800031c:	4b04      	ldr	r3, [pc, #16]	@ (8000330 <MX_APPE_Config+0x18>)
 800031e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000322:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000324:	f000 f824 	bl	8000370 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000328:	f000 f829 	bl	800037e <Config_HSE>

  return;
 800032c:	bf00      	nop
}
 800032e:	bd80      	pop	{r7, pc}
 8000330:	58004000 	.word	0x58004000

08000334 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000338:	f000 f835 	bl	80003a6 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 800033c:	f000 f84e 	bl	80003dc <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000340:	4903      	ldr	r1, [pc, #12]	@ (8000350 <MX_APPE_Init+0x1c>)
 8000342:	2000      	movs	r0, #0
 8000344:	f000 f97a 	bl	800063c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000348:	f000 f856 	bl	80003f8 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 800034c:	bf00      	nop
}
 800034e:	bd80      	pop	{r7, pc}
 8000350:	200002b0 	.word	0x200002b0

08000354 <Init_Smps>:

void Init_Smps(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000358:	bf00      	nop
}
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <Init_Exti>:

void Init_Exti(void)
{
 8000362:	b580      	push	{r7, lr}
 8000364:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000366:	2050      	movs	r0, #80	@ 0x50
 8000368:	f7ff ff44 	bl	80001f4 <LL_EXTI_EnableIT_32_63>

  return;
 800036c:	bf00      	nop
}
 800036e:	bd80      	pop	{r7, pc}

08000370 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000374:	bf00      	nop
}
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr

0800037e <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800037e:	b580      	push	{r7, lr}
 8000380:	b082      	sub	sp, #8
 8000382:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000384:	2000      	movs	r0, #0
 8000386:	f008 fe2b 	bl	8008fe0 <OTP_Read>
 800038a:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d005      	beq.n	800039e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	799b      	ldrb	r3, [r3, #6]
 8000396:	4618      	mov	r0, r3
 8000398:	f7ff ff40 	bl	800021c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800039c:	bf00      	nop
 800039e:	bf00      	nop
}
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}

080003a6 <System_Init>:

static void System_Init(void)
{
 80003a6:	b580      	push	{r7, lr}
 80003a8:	af00      	add	r7, sp, #0
  Init_Smps();
 80003aa:	f7ff ffd3 	bl	8000354 <Init_Smps>

  Init_Exti();
 80003ae:	f7ff ffd8 	bl	8000362 <Init_Exti>

  Init_Rtc();
 80003b2:	f000 f803 	bl	80003bc <Init_Rtc>

  return;
 80003b6:	bf00      	nop
}
 80003b8:	bd80      	pop	{r7, pc}
	...

080003bc <Init_Rtc>:

static void Init_Rtc(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80003c0:	4805      	ldr	r0, [pc, #20]	@ (80003d8 <Init_Rtc+0x1c>)
 80003c2:	f7ff ff86 	bl	80002d2 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80003c6:	2100      	movs	r1, #0
 80003c8:	4803      	ldr	r0, [pc, #12]	@ (80003d8 <Init_Rtc+0x1c>)
 80003ca:	f7ff ff92 	bl	80002f2 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80003ce:	4802      	ldr	r0, [pc, #8]	@ (80003d8 <Init_Rtc+0x1c>)
 80003d0:	f7ff ff72 	bl	80002b8 <LL_RTC_EnableWriteProtection>

  return;
 80003d4:	bf00      	nop
}
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40002800 	.word	0x40002800

080003dc <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80003e0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80003e4:	f7ff ff38 	bl	8000258 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80003e8:	f009 ff44 	bl	800a274 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80003ec:	2004      	movs	r0, #4
 80003ee:	f7ff feeb 	bl	80001c8 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80003f2:	bf00      	nop
}
 80003f4:	bd80      	pop	{r7, pc}
	...

080003f8 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b088      	sub	sp, #32
 80003fc:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80003fe:	f008 fba1 	bl	8008b44 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000402:	4a11      	ldr	r2, [pc, #68]	@ (8000448 <appe_Tl_Init+0x50>)
 8000404:	2100      	movs	r1, #0
 8000406:	2020      	movs	r0, #32
 8000408:	f00a f8f8 	bl	800a5fc <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800040c:	4b0f      	ldr	r3, [pc, #60]	@ (800044c <appe_Tl_Init+0x54>)
 800040e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000410:	4b0f      	ldr	r3, [pc, #60]	@ (8000450 <appe_Tl_Init+0x58>)
 8000412:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000414:	463b      	mov	r3, r7
 8000416:	4619      	mov	r1, r3
 8000418:	480e      	ldr	r0, [pc, #56]	@ (8000454 <appe_Tl_Init+0x5c>)
 800041a:	f008 fa55 	bl	80088c8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800041e:	4b0e      	ldr	r3, [pc, #56]	@ (8000458 <appe_Tl_Init+0x60>)
 8000420:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000422:	4b0e      	ldr	r3, [pc, #56]	@ (800045c <appe_Tl_Init+0x64>)
 8000424:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000426:	4b0e      	ldr	r3, [pc, #56]	@ (8000460 <appe_Tl_Init+0x68>)
 8000428:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800042a:	f240 533c 	movw	r3, #1340	@ 0x53c
 800042e:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000430:	f107 0308 	add.w	r3, r7, #8
 8000434:	4618      	mov	r0, r3
 8000436:	f008 fccb 	bl	8008dd0 <TL_MM_Init>

  TL_Enable();
 800043a:	f008 fb7d 	bl	8008b38 <TL_Enable>

  return;
 800043e:	bf00      	nop
}
 8000440:	3720      	adds	r7, #32
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	08008901 	.word	0x08008901
 800044c:	20030734 	.word	0x20030734
 8000450:	08000465 	.word	0x08000465
 8000454:	0800047d 	.word	0x0800047d
 8000458:	2003094c 	.word	0x2003094c
 800045c:	20030840 	.word	0x20030840
 8000460:	200301f8 	.word	0x200301f8

08000464 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800046e:	bf00      	nop
}
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
	...

0800047c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	685b      	ldr	r3, [r3, #4]
 8000488:	330b      	adds	r3, #11
 800048a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 800048c:	69fb      	ldr	r3, [r7, #28]
 800048e:	881b      	ldrh	r3, [r3, #0]
 8000490:	b29b      	uxth	r3, r3
 8000492:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8000496:	2b07      	cmp	r3, #7
 8000498:	d81f      	bhi.n	80004da <APPE_SysUserEvtRx+0x5e>
 800049a:	a201      	add	r2, pc, #4	@ (adr r2, 80004a0 <APPE_SysUserEvtRx+0x24>)
 800049c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004a0:	080004c1 	.word	0x080004c1
 80004a4:	080004d3 	.word	0x080004d3
 80004a8:	080004db 	.word	0x080004db
 80004ac:	080004db 	.word	0x080004db
 80004b0:	080004db 	.word	0x080004db
 80004b4:	080004db 	.word	0x080004db
 80004b8:	080004db 	.word	0x080004db
 80004bc:	080004db 	.word	0x080004db
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80004c0:	f107 030c 	add.w	r3, r7, #12
 80004c4:	4618      	mov	r0, r3
 80004c6:	f007 ffb5 	bl	8008434 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80004ca:	6878      	ldr	r0, [r7, #4]
 80004cc:	f000 f81b 	bl	8000506 <APPE_SysEvtReadyProcessing>
    break;
 80004d0:	e004      	b.n	80004dc <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80004d2:	6878      	ldr	r0, [r7, #4]
 80004d4:	f000 f806 	bl	80004e4 <APPE_SysEvtError>
    break;
 80004d8:	e000      	b.n	80004dc <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80004da:	bf00      	nop
  }

  return;
 80004dc:	bf00      	nop
}
 80004de:	3720      	adds	r7, #32
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	330b      	adds	r3, #11
 80004f2:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	3302      	adds	r3, #2
 80004f8:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80004fa:	bf00      	nop
}
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	b08a      	sub	sp, #40	@ 0x28
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800050e:	f107 0308 	add.w	r3, r7, #8
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 800051c:	2300      	movs	r3, #0
 800051e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8000520:	2300      	movs	r3, #0
 8000522:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	330b      	adds	r3, #11
 800052a:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	3302      	adds	r3, #2
 8000530:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000532:	69bb      	ldr	r3, [r7, #24]
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d11d      	bne.n	8000576 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800053a:	f7ff fe29 	bl	8000190 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800053e:	230f      	movs	r3, #15
 8000540:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000542:	237f      	movs	r3, #127	@ 0x7f
 8000544:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000546:	f7ff fea9 	bl	800029c <LL_DBGMCU_GetRevisionID>
 800054a:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 800054c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800054e:	b29b      	uxth	r3, r3
 8000550:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000552:	f7ff fe95 	bl	8000280 <LL_DBGMCU_GetDeviceID>
 8000556:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000558:	6a3b      	ldr	r3, [r7, #32]
 800055a:	b29b      	uxth	r3, r3
 800055c:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800055e:	f107 0308 	add.w	r3, r7, #8
 8000562:	4618      	mov	r0, r3
 8000564:	f007 ff50 	bl	8008408 <SHCI_C2_Config>

    APP_BLE_Init();
 8000568:	f008 fe44 	bl	80091f4 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800056c:	2100      	movs	r1, #0
 800056e:	2001      	movs	r0, #1
 8000570:	f009 fe92 	bl	800a298 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000574:	e007      	b.n	8000586 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000576:	69bb      	ldr	r3, [r7, #24]
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d103      	bne.n	8000586 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]
  return;
 8000584:	bf00      	nop
 8000586:	bf00      	nop
}
 8000588:	3728      	adds	r7, #40	@ 0x28
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000592:	f04f 30ff 	mov.w	r0, #4294967295
 8000596:	f009 feaf 	bl	800a2f8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}

0800059e <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80005a2:	bf00      	nop
}
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80005b4:	2100      	movs	r1, #0
 80005b6:	2020      	movs	r0, #32
 80005b8:	f00a f842 	bl	800a640 <UTIL_SEQ_SetTask>
  return;
 80005bc:	bf00      	nop
}
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80005cc:	2002      	movs	r0, #2
 80005ce:	f00a f8a3 	bl	800a718 <UTIL_SEQ_SetEvt>
  return;
 80005d2:	bf00      	nop
}
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b082      	sub	sp, #8
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80005e2:	2002      	movs	r0, #2
 80005e4:	f00a f8b8 	bl	800a758 <UTIL_SEQ_WaitEvt>
  return;
 80005e8:	bf00      	nop
}
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <LL_EXTI_EnableIT_0_31>:
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80005f8:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <LL_EXTI_EnableIT_0_31+0x24>)
 80005fa:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80005fe:	4905      	ldr	r1, [pc, #20]	@ (8000614 <LL_EXTI_EnableIT_0_31+0x24>)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4313      	orrs	r3, r2
 8000604:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	58000800 	.word	0x58000800

08000618 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000620:	4b05      	ldr	r3, [pc, #20]	@ (8000638 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	4904      	ldr	r1, [pc, #16]	@ (8000638 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4313      	orrs	r3, r2
 800062a:	600b      	str	r3, [r1, #0]

}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	58000800 	.word	0x58000800

0800063c <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	6039      	str	r1, [r7, #0]
 8000646:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000648:	4b5e      	ldr	r3, [pc, #376]	@ (80007c4 <HW_TS_Init+0x188>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	22ca      	movs	r2, #202	@ 0xca
 800064e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000650:	4b5c      	ldr	r3, [pc, #368]	@ (80007c4 <HW_TS_Init+0x188>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2253      	movs	r2, #83	@ 0x53
 8000656:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000658:	4b5b      	ldr	r3, [pc, #364]	@ (80007c8 <HW_TS_Init+0x18c>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	4a5a      	ldr	r2, [pc, #360]	@ (80007c8 <HW_TS_Init+0x18c>)
 800065e:	f043 0320 	orr.w	r3, r3, #32
 8000662:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000664:	4b58      	ldr	r3, [pc, #352]	@ (80007c8 <HW_TS_Init+0x18c>)
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	f003 0307 	and.w	r3, r3, #7
 800066e:	b2db      	uxtb	r3, r3
 8000670:	f1c3 0304 	rsb	r3, r3, #4
 8000674:	b2da      	uxtb	r2, r3
 8000676:	4b55      	ldr	r3, [pc, #340]	@ (80007cc <HW_TS_Init+0x190>)
 8000678:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800067a:	4b53      	ldr	r3, [pc, #332]	@ (80007c8 <HW_TS_Init+0x18c>)
 800067c:	691b      	ldr	r3, [r3, #16]
 800067e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8000682:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8000686:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000688:	693a      	ldr	r2, [r7, #16]
 800068a:	fa92 f2a2 	rbit	r2, r2
 800068e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000690:	68fa      	ldr	r2, [r7, #12]
 8000692:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000694:	697a      	ldr	r2, [r7, #20]
 8000696:	2a00      	cmp	r2, #0
 8000698:	d101      	bne.n	800069e <HW_TS_Init+0x62>
  {
    return 32U;
 800069a:	2220      	movs	r2, #32
 800069c:	e003      	b.n	80006a6 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800069e:	697a      	ldr	r2, [r7, #20]
 80006a0:	fab2 f282 	clz	r2, r2
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	40d3      	lsrs	r3, r2
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	3301      	adds	r3, #1
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4b48      	ldr	r3, [pc, #288]	@ (80007d0 <HW_TS_Init+0x194>)
 80006b0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80006b2:	4b45      	ldr	r3, [pc, #276]	@ (80007c8 <HW_TS_Init+0x18c>)
 80006b4:	691b      	ldr	r3, [r3, #16]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006bc:	b29b      	uxth	r3, r3
 80006be:	3301      	adds	r3, #1
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	4b44      	ldr	r3, [pc, #272]	@ (80007d4 <HW_TS_Init+0x198>)
 80006c4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80006c6:	4b43      	ldr	r3, [pc, #268]	@ (80007d4 <HW_TS_Init+0x198>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	3b01      	subs	r3, #1
 80006cc:	4a40      	ldr	r2, [pc, #256]	@ (80007d0 <HW_TS_Init+0x194>)
 80006ce:	7812      	ldrb	r2, [r2, #0]
 80006d0:	fb02 f303 	mul.w	r3, r2, r3
 80006d4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80006d8:	4a3c      	ldr	r2, [pc, #240]	@ (80007cc <HW_TS_Init+0x190>)
 80006da:	7812      	ldrb	r2, [r2, #0]
 80006dc:	40d3      	lsrs	r3, r2
 80006de:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d904      	bls.n	80006f4 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80006ea:	4b3b      	ldr	r3, [pc, #236]	@ (80007d8 <HW_TS_Init+0x19c>)
 80006ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006f0:	801a      	strh	r2, [r3, #0]
 80006f2:	e003      	b.n	80006fc <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	4b37      	ldr	r3, [pc, #220]	@ (80007d8 <HW_TS_Init+0x19c>)
 80006fa:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80006fc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000700:	f7ff ff8a 	bl	8000618 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000704:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000708:	f7ff ff72 	bl	80005f0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d13d      	bne.n	800078e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000712:	4b32      	ldr	r3, [pc, #200]	@ (80007dc <HW_TS_Init+0x1a0>)
 8000714:	2201      	movs	r2, #1
 8000716:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000718:	4b31      	ldr	r3, [pc, #196]	@ (80007e0 <HW_TS_Init+0x1a4>)
 800071a:	f04f 32ff 	mov.w	r2, #4294967295
 800071e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000720:	2300      	movs	r3, #0
 8000722:	77fb      	strb	r3, [r7, #31]
 8000724:	e00c      	b.n	8000740 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000726:	7ffa      	ldrb	r2, [r7, #31]
 8000728:	492e      	ldr	r1, [pc, #184]	@ (80007e4 <HW_TS_Init+0x1a8>)
 800072a:	4613      	mov	r3, r2
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	4413      	add	r3, r2
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	440b      	add	r3, r1
 8000734:	330c      	adds	r3, #12
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800073a:	7ffb      	ldrb	r3, [r7, #31]
 800073c:	3301      	adds	r3, #1
 800073e:	77fb      	strb	r3, [r7, #31]
 8000740:	7ffb      	ldrb	r3, [r7, #31]
 8000742:	2b05      	cmp	r3, #5
 8000744:	d9ef      	bls.n	8000726 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000746:	4b28      	ldr	r3, [pc, #160]	@ (80007e8 <HW_TS_Init+0x1ac>)
 8000748:	2206      	movs	r2, #6
 800074a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800074c:	4b1d      	ldr	r3, [pc, #116]	@ (80007c4 <HW_TS_Init+0x188>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	689a      	ldr	r2, [r3, #8]
 8000752:	4b1c      	ldr	r3, [pc, #112]	@ (80007c4 <HW_TS_Init+0x188>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800075a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800075c:	4b19      	ldr	r3, [pc, #100]	@ (80007c4 <HW_TS_Init+0x188>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	b2da      	uxtb	r2, r3
 8000764:	4b17      	ldr	r3, [pc, #92]	@ (80007c4 <HW_TS_Init+0x188>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800076c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800076e:	4b1f      	ldr	r3, [pc, #124]	@ (80007ec <HW_TS_Init+0x1b0>)
 8000770:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000774:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000776:	2003      	movs	r0, #3
 8000778:	f002 fe75 	bl	8003466 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800077c:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <HW_TS_Init+0x188>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	689a      	ldr	r2, [r3, #8]
 8000782:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <HW_TS_Init+0x188>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	e009      	b.n	80007a2 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800078e:	4b0d      	ldr	r3, [pc, #52]	@ (80007c4 <HW_TS_Init+0x188>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000798:	2b00      	cmp	r3, #0
 800079a:	d002      	beq.n	80007a2 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800079c:	2003      	movs	r0, #3
 800079e:	f002 fe54 	bl	800344a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <HW_TS_Init+0x188>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	22ff      	movs	r2, #255	@ 0xff
 80007a8:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80007aa:	2200      	movs	r2, #0
 80007ac:	2103      	movs	r1, #3
 80007ae:	2003      	movs	r0, #3
 80007b0:	f002 fe09 	bl	80033c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80007b4:	2003      	movs	r0, #3
 80007b6:	f002 fe20 	bl	80033fa <HAL_NVIC_EnableIRQ>

  return;
 80007ba:	bf00      	nop
}
 80007bc:	3720      	adds	r7, #32
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200002b0 	.word	0x200002b0
 80007c8:	40002800 	.word	0x40002800
 80007cc:	200001b5 	.word	0x200001b5
 80007d0:	200001b6 	.word	0x200001b6
 80007d4:	200001b8 	.word	0x200001b8
 80007d8:	200001ba 	.word	0x200001ba
 80007dc:	200001b4 	.word	0x200001b4
 80007e0:	200001b0 	.word	0x200001b0
 80007e4:	2000011c 	.word	0x2000011c
 80007e8:	200001ac 	.word	0x200001ac
 80007ec:	58000800 	.word	0x58000800

080007f0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80007fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4313      	orrs	r3, r2
 8000806:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000808:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800080c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4013      	ands	r3, r2
 8000812:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000814:	68fb      	ldr	r3, [r7, #12]
}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000828:	f001 f972 	bl	8001b10 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800082c:	f7ff fd74 	bl	8000318 <MX_APPE_Config>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000830:	f000 f882 	bl	8000938 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000834:	f000 f8f2 	bl	8000a1c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8000838:	f000 fa08 	bl	8000c4c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083c:	f000 fb0c 	bl	8000e58 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000840:	f000 f90c 	bl	8000a5c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000844:	f000 f9c2 	bl	8000bcc <MX_I2C1_Init>
  MX_RTC_Init();
 8000848:	f000 fa1c 	bl	8000c84 <MX_RTC_Init>
  MX_TIM2_Init();
 800084c:	f000 fab6 	bl	8000dbc <MX_TIM2_Init>
  MX_RF_Init();
 8000850:	f000 fa10 	bl	8000c74 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 8000854:	4b2e      	ldr	r3, [pc, #184]	@ (8000910 <main+0xec>)
 8000856:	2220      	movs	r2, #32
 8000858:	60da      	str	r2, [r3, #12]
	TIM16->SR = ~TIM_SR_UIF;  // Clear update interrupt flag
 800085a:	4b2e      	ldr	r3, [pc, #184]	@ (8000914 <main+0xf0>)
 800085c:	f06f 0201 	mvn.w	r2, #1
 8000860:	611a      	str	r2, [r3, #16]
	TIM16->CNT = 0;
 8000862:	4b2c      	ldr	r3, [pc, #176]	@ (8000914 <main+0xf0>)
 8000864:	2200      	movs	r2, #0
 8000866:	625a      	str	r2, [r3, #36]	@ 0x24
	last_net_mv = read_from_flash(last_voltages_base_addr);
 8000868:	4b2b      	ldr	r3, [pc, #172]	@ (8000918 <main+0xf4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f000 fbc9 	bl	8001004 <read_from_flash>
 8000872:	4603      	mov	r3, r0
 8000874:	461a      	mov	r2, r3
 8000876:	4b29      	ldr	r3, [pc, #164]	@ (800091c <main+0xf8>)
 8000878:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800087a:	f7ff fd5b 	bl	8000334 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_TIM_Base_Start_IT(&htim2);
 800087e:	4828      	ldr	r0, [pc, #160]	@ (8000920 <main+0xfc>)
 8000880:	f005 ff64 	bl	800674c <HAL_TIM_Base_Start_IT>
	update_state();
 8000884:	f000 fd7c 	bl	8001380 <update_state>
	while (1) {
		if (sleep_flag == 1) {
 8000888:	4b26      	ldr	r3, [pc, #152]	@ (8000924 <main+0x100>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2b01      	cmp	r3, #1
 8000890:	d133      	bne.n	80008fa <main+0xd6>
			stop_display();
 8000892:	f000 fd5f 	bl	8001354 <stop_display>
			HAL_NVIC_DisableIRQ(TIM2_IRQn);  // Disable NVIC for TIM2
 8000896:	201c      	movs	r0, #28
 8000898:	f002 fdbd 	bl	8003416 <HAL_NVIC_DisableIRQ>
			TIM2->DIER &= ~TIM_DIER_UIE;
 800089c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008a0:	68db      	ldr	r3, [r3, #12]
 80008a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008a6:	f023 0301 	bic.w	r3, r3, #1
 80008aa:	60d3      	str	r3, [r2, #12]
			//stop_display();
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b6:	f003 f92d 	bl	8003b14 <HAL_GPIO_WritePin>
			count = 0;//UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80008ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000928 <main+0x104>)
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
			get_voltage();
 80008c0:	f000 fbd2 	bl	8001068 <get_voltage>
			write_to_flash(last_voltages_base_addr, present_net_mv);
 80008c4:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <main+0xf4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a18      	ldr	r2, [pc, #96]	@ (800092c <main+0x108>)
 80008ca:	8812      	ldrh	r2, [r2, #0]
 80008cc:	b292      	uxth	r2, r2
 80008ce:	4611      	mov	r1, r2
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 fb17 	bl	8000f04 <write_to_flash>
			HAL_RTC_DeInit(&hrtc);
 80008d6:	4816      	ldr	r0, [pc, #88]	@ (8000930 <main+0x10c>)
 80008d8:	f005 f998 	bl	8005c0c <HAL_RTC_DeInit>
			MX_RTC_Init();
 80008dc:	f000 f9d2 	bl	8000c84 <MX_RTC_Init>
			RTC_Wakeup_After(30);
 80008e0:	201e      	movs	r0, #30
 80008e2:	f000 fdd5 	bl	8001490 <RTC_Wakeup_After>
			HAL_SuspendTick();
 80008e6:	f001 f999 	bl	8001c1c <HAL_SuspendTick>
			HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80008ea:	2001      	movs	r0, #1
 80008ec:	f003 fb70 	bl	8003fd0 <HAL_PWREx_EnterSTOP2Mode>
			SystemClock_Config();
 80008f0:	f000 f822 	bl	8000938 <SystemClock_Config>
			HAL_ResumeTick();
 80008f4:	f001 f9a2 	bl	8001c3c <HAL_ResumeTick>
 80008f8:	e006      	b.n	8000908 <main+0xe4>
		} else {
			if (connection_status == 1) {
 80008fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <main+0x110>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	2b01      	cmp	r3, #1
 8000902:	d001      	beq.n	8000908 <main+0xe4>
			} else {
					//get_voltage();
					//update_state();
					display();
 8000904:	f000 fc86 	bl	8001214 <display>
			}
		}

    /* USER CODE END WHILE */
    MX_APPE_Process();
 8000908:	f7ff fe41 	bl	800058e <MX_APPE_Process>
		if (sleep_flag == 1) {
 800090c:	e7bc      	b.n	8000888 <main+0x64>
 800090e:	bf00      	nop
 8000910:	58000800 	.word	0x58000800
 8000914:	40014400 	.word	0x40014400
 8000918:	20000010 	.word	0x20000010
 800091c:	2000034c 	.word	0x2000034c
 8000920:	200002d4 	.word	0x200002d4
 8000924:	20000324 	.word	0x20000324
 8000928:	20000320 	.word	0x20000320
 800092c:	2000034a 	.word	0x2000034a
 8000930:	200002b0 	.word	0x200002b0
 8000934:	20000470 	.word	0x20000470

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b09a      	sub	sp, #104	@ 0x68
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 0320 	add.w	r3, r7, #32
 8000942:	2248      	movs	r2, #72	@ 0x48
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f009 ffa3 	bl	800a892 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
 800095a:	615a      	str	r2, [r3, #20]
 800095c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 800095e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000968:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800096c:	f043 0310 	orr.w	r3, r3, #16
 8000970:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000972:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	f023 0303 	bic.w	r3, r3, #3
 800097c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	60d3      	str	r3, [r2, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000986:	4b24      	ldr	r3, [pc, #144]	@ (8000a18 <SystemClock_Config+0xe0>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800098e:	4a22      	ldr	r2, [pc, #136]	@ (8000a18 <SystemClock_Config+0xe0>)
 8000990:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000994:	6013      	str	r3, [r2, #0]
 8000996:	4b20      	ldr	r3, [pc, #128]	@ (8000a18 <SystemClock_Config+0xe0>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80009a2:	232b      	movs	r3, #43	@ 0x2b
 80009a4:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009aa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009b2:	2301      	movs	r3, #1
 80009b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b6:	2340      	movs	r3, #64	@ 0x40
 80009b8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80009ba:	2300      	movs	r3, #0
 80009bc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80009be:	23a0      	movs	r3, #160	@ 0xa0
 80009c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009c2:	2305      	movs	r3, #5
 80009c4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ca:	f107 0320 	add.w	r3, r7, #32
 80009ce:	4618      	mov	r0, r3
 80009d0:	f003 fe88 	bl	80046e4 <HAL_RCC_OscConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009da:	f000 fde7 	bl	80015ac <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80009de:	236f      	movs	r3, #111	@ 0x6f
 80009e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2101      	movs	r1, #1
 80009fe:	4618      	mov	r0, r3
 8000a00:	f004 f9e4 	bl	8004dcc <HAL_RCC_ClockConfig>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000a0a:	f000 fdcf 	bl	80015ac <Error_Handler>
  }
}
 8000a0e:	bf00      	nop
 8000a10:	3768      	adds	r7, #104	@ 0x68
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	58000400 	.word	0x58000400

08000a1c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b094      	sub	sp, #80	@ 0x50
 8000a20:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a22:	463b      	mov	r3, r7
 8000a24:	2250      	movs	r2, #80	@ 0x50
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f009 ff32 	bl	800a892 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8000a2e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000a32:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8000a34:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000a38:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000a3e:	2310      	movs	r3, #16
 8000a40:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a42:	463b      	mov	r3, r7
 8000a44:	4618      	mov	r0, r3
 8000a46:	f004 fdd2 	bl	80055ee <HAL_RCCEx_PeriphCLKConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000a50:	f000 fdac 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000a54:	bf00      	nop
 8000a56:	3750      	adds	r7, #80	@ 0x50
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a62:	463b      	mov	r3, r7
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
 8000a70:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a72:	4b4e      	ldr	r3, [pc, #312]	@ (8000bac <MX_ADC1_Init+0x150>)
 8000a74:	4a4e      	ldr	r2, [pc, #312]	@ (8000bb0 <MX_ADC1_Init+0x154>)
 8000a76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a78:	4b4c      	ldr	r3, [pc, #304]	@ (8000bac <MX_ADC1_Init+0x150>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a7e:	4b4b      	ldr	r3, [pc, #300]	@ (8000bac <MX_ADC1_Init+0x150>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a84:	4b49      	ldr	r3, [pc, #292]	@ (8000bac <MX_ADC1_Init+0x150>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a8a:	4b48      	ldr	r3, [pc, #288]	@ (8000bac <MX_ADC1_Init+0x150>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a90:	4b46      	ldr	r3, [pc, #280]	@ (8000bac <MX_ADC1_Init+0x150>)
 8000a92:	2204      	movs	r2, #4
 8000a94:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a96:	4b45      	ldr	r3, [pc, #276]	@ (8000bac <MX_ADC1_Init+0x150>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a9c:	4b43      	ldr	r3, [pc, #268]	@ (8000bac <MX_ADC1_Init+0x150>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 8000aa2:	4b42      	ldr	r3, [pc, #264]	@ (8000bac <MX_ADC1_Init+0x150>)
 8000aa4:	2206      	movs	r2, #6
 8000aa6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000aa8:	4b40      	ldr	r3, [pc, #256]	@ (8000bac <MX_ADC1_Init+0x150>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000ab0:	4b3e      	ldr	r3, [pc, #248]	@ (8000bac <MX_ADC1_Init+0x150>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8000bac <MX_ADC1_Init+0x150>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000abc:	4b3b      	ldr	r3, [pc, #236]	@ (8000bac <MX_ADC1_Init+0x150>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8000bac <MX_ADC1_Init+0x150>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000aca:	4b38      	ldr	r3, [pc, #224]	@ (8000bac <MX_ADC1_Init+0x150>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ad0:	4b36      	ldr	r3, [pc, #216]	@ (8000bac <MX_ADC1_Init+0x150>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ad8:	4834      	ldr	r0, [pc, #208]	@ (8000bac <MX_ADC1_Init+0x150>)
 8000ada:	f001 fae1 	bl	80020a0 <HAL_ADC_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000ae4:	f000 fd62 	bl	80015ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ae8:	4b32      	ldr	r3, [pc, #200]	@ (8000bb4 <MX_ADC1_Init+0x158>)
 8000aea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aec:	2306      	movs	r3, #6
 8000aee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000af0:	2304      	movs	r3, #4
 8000af2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000af4:	237f      	movs	r3, #127	@ 0x7f
 8000af6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000af8:	2304      	movs	r3, #4
 8000afa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b00:	463b      	mov	r3, r7
 8000b02:	4619      	mov	r1, r3
 8000b04:	4829      	ldr	r0, [pc, #164]	@ (8000bac <MX_ADC1_Init+0x150>)
 8000b06:	f001 fd39 	bl	800257c <HAL_ADC_ConfigChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000b10:	f000 fd4c 	bl	80015ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b14:	4b28      	ldr	r3, [pc, #160]	@ (8000bb8 <MX_ADC1_Init+0x15c>)
 8000b16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b18:	230c      	movs	r3, #12
 8000b1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4822      	ldr	r0, [pc, #136]	@ (8000bac <MX_ADC1_Init+0x150>)
 8000b22:	f001 fd2b 	bl	800257c <HAL_ADC_ConfigChannel>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000b2c:	f000 fd3e 	bl	80015ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b30:	4b22      	ldr	r3, [pc, #136]	@ (8000bbc <MX_ADC1_Init+0x160>)
 8000b32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b34:	2312      	movs	r3, #18
 8000b36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b38:	463b      	mov	r3, r7
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	481b      	ldr	r0, [pc, #108]	@ (8000bac <MX_ADC1_Init+0x150>)
 8000b3e:	f001 fd1d 	bl	800257c <HAL_ADC_ConfigChannel>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000b48:	f000 fd30 	bl	80015ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc0 <MX_ADC1_Init+0x164>)
 8000b4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000b50:	2318      	movs	r3, #24
 8000b52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b54:	463b      	mov	r3, r7
 8000b56:	4619      	mov	r1, r3
 8000b58:	4814      	ldr	r0, [pc, #80]	@ (8000bac <MX_ADC1_Init+0x150>)
 8000b5a:	f001 fd0f 	bl	800257c <HAL_ADC_ConfigChannel>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8000b64:	f000 fd22 	bl	80015ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b68:	4b16      	ldr	r3, [pc, #88]	@ (8000bc4 <MX_ADC1_Init+0x168>)
 8000b6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000b6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b70:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b72:	463b      	mov	r3, r7
 8000b74:	4619      	mov	r1, r3
 8000b76:	480d      	ldr	r0, [pc, #52]	@ (8000bac <MX_ADC1_Init+0x150>)
 8000b78:	f001 fd00 	bl	800257c <HAL_ADC_ConfigChannel>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_ADC1_Init+0x12a>
  {
    Error_Handler();
 8000b82:	f000 fd13 	bl	80015ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000b86:	4b10      	ldr	r3, [pc, #64]	@ (8000bc8 <MX_ADC1_Init+0x16c>)
 8000b88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000b8a:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000b8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b90:	463b      	mov	r3, r7
 8000b92:	4619      	mov	r1, r3
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_ADC1_Init+0x150>)
 8000b96:	f001 fcf1 	bl	800257c <HAL_ADC_ConfigChannel>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_ADC1_Init+0x148>
  {
    Error_Handler();
 8000ba0:	f000 fd04 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200001bc 	.word	0x200001bc
 8000bb0:	50040000 	.word	0x50040000
 8000bb4:	19200040 	.word	0x19200040
 8000bb8:	1d500080 	.word	0x1d500080
 8000bbc:	21800100 	.word	0x21800100
 8000bc0:	25b00200 	.word	0x25b00200
 8000bc4:	2a000400 	.word	0x2a000400
 8000bc8:	2e300800 	.word	0x2e300800

08000bcc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c40 <MX_I2C1_Init+0x74>)
 8000bd2:	4a1c      	ldr	r2, [pc, #112]	@ (8000c44 <MX_I2C1_Init+0x78>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c40 <MX_I2C1_Init+0x74>)
 8000bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c48 <MX_I2C1_Init+0x7c>)
 8000bda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bdc:	4b18      	ldr	r3, [pc, #96]	@ (8000c40 <MX_I2C1_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000be2:	4b17      	ldr	r3, [pc, #92]	@ (8000c40 <MX_I2C1_Init+0x74>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000be8:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <MX_I2C1_Init+0x74>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bee:	4b14      	ldr	r3, [pc, #80]	@ (8000c40 <MX_I2C1_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	@ (8000c40 <MX_I2C1_Init+0x74>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <MX_I2C1_Init+0x74>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	@ (8000c40 <MX_I2C1_Init+0x74>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c06:	480e      	ldr	r0, [pc, #56]	@ (8000c40 <MX_I2C1_Init+0x74>)
 8000c08:	f002 fff2 	bl	8003bf0 <HAL_I2C_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c12:	f000 fccb 	bl	80015ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c16:	2100      	movs	r1, #0
 8000c18:	4809      	ldr	r0, [pc, #36]	@ (8000c40 <MX_I2C1_Init+0x74>)
 8000c1a:	f003 f89e 	bl	8003d5a <HAL_I2CEx_ConfigAnalogFilter>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c24:	f000 fcc2 	bl	80015ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <MX_I2C1_Init+0x74>)
 8000c2c:	f003 f8e0 	bl	8003df0 <HAL_I2CEx_ConfigDigitalFilter>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c36:	f000 fcb9 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000220 	.word	0x20000220
 8000c44:	40005400 	.word	0x40005400
 8000c48:	00b07cb4 	.word	0x00b07cb4

08000c4c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <MX_IPCC_Init+0x20>)
 8000c52:	4a07      	ldr	r2, [pc, #28]	@ (8000c70 <MX_IPCC_Init+0x24>)
 8000c54:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <MX_IPCC_Init+0x20>)
 8000c58:	f003 f916 	bl	8003e88 <HAL_IPCC_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8000c62:	f000 fca3 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000274 	.word	0x20000274
 8000c70:	58000c00 	.word	0x58000c00

08000c74 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
	...

08000c84 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b090      	sub	sp, #64	@ 0x40
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	2228      	movs	r2, #40	@ 0x28
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f009 fdf4 	bl	800a892 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000caa:	4b42      	ldr	r3, [pc, #264]	@ (8000db4 <MX_RTC_Init+0x130>)
 8000cac:	4a42      	ldr	r2, [pc, #264]	@ (8000db8 <MX_RTC_Init+0x134>)
 8000cae:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000cb0:	4b40      	ldr	r3, [pc, #256]	@ (8000db4 <MX_RTC_Init+0x130>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000cb6:	4b3f      	ldr	r3, [pc, #252]	@ (8000db4 <MX_RTC_Init+0x130>)
 8000cb8:	227f      	movs	r2, #127	@ 0x7f
 8000cba:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000cbc:	4b3d      	ldr	r3, [pc, #244]	@ (8000db4 <MX_RTC_Init+0x130>)
 8000cbe:	22ff      	movs	r2, #255	@ 0xff
 8000cc0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000cc2:	4b3c      	ldr	r3, [pc, #240]	@ (8000db4 <MX_RTC_Init+0x130>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cc8:	4b3a      	ldr	r3, [pc, #232]	@ (8000db4 <MX_RTC_Init+0x130>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cce:	4b39      	ldr	r3, [pc, #228]	@ (8000db4 <MX_RTC_Init+0x130>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000cd4:	4b37      	ldr	r3, [pc, #220]	@ (8000db4 <MX_RTC_Init+0x130>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cda:	4836      	ldr	r0, [pc, #216]	@ (8000db4 <MX_RTC_Init+0x130>)
 8000cdc:	f004 ff0e 	bl	8005afc <HAL_RTC_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000ce6:	f000 fc61 	bl	80015ac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.SubSeconds = 0x0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	633b      	str	r3, [r7, #48]	@ 0x30
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d04:	2300      	movs	r3, #0
 8000d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4828      	ldr	r0, [pc, #160]	@ (8000db4 <MX_RTC_Init+0x130>)
 8000d12:	f004 ffe7 	bl	8005ce4 <HAL_RTC_SetTime>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_RTC_Init+0x9c>
  {
    Error_Handler();
 8000d1c:	f000 fc46 	bl	80015ac <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d20:	2301      	movs	r3, #1
 8000d22:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000d26:	2301      	movs	r3, #1
 8000d28:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	4619      	mov	r1, r3
 8000d40:	481c      	ldr	r0, [pc, #112]	@ (8000db4 <MX_RTC_Init+0x130>)
 8000d42:	f005 f8cc 	bl	8005ede <HAL_RTC_SetDate>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8000d4c:	f000 fc2e 	bl	80015ac <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d64:	2300      	movs	r3, #0
 8000d66:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000d74:	2301      	movs	r3, #1
 8000d76:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000d7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d80:	463b      	mov	r3, r7
 8000d82:	2201      	movs	r2, #1
 8000d84:	4619      	mov	r1, r3
 8000d86:	480b      	ldr	r0, [pc, #44]	@ (8000db4 <MX_RTC_Init+0x130>)
 8000d88:	f005 f982 	bl	8006090 <HAL_RTC_SetAlarm_IT>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_RTC_Init+0x112>
  {
    Error_Handler();
 8000d92:	f000 fc0b 	bl	80015ac <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4806      	ldr	r0, [pc, #24]	@ (8000db4 <MX_RTC_Init+0x130>)
 8000d9c:	f005 fbce 	bl	800653c <HAL_RTCEx_SetWakeUpTimer>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8000da6:	f000 fc01 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	3740      	adds	r7, #64	@ 0x40
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200002b0 	.word	0x200002b0
 8000db8:	40002800 	.word	0x40002800

08000dbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dc2:	f107 0310 	add.w	r3, r7, #16
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dda:	4b1e      	ldr	r3, [pc, #120]	@ (8000e54 <MX_TIM2_Init+0x98>)
 8000ddc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000de0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000-1;
 8000de2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e54 <MX_TIM2_Init+0x98>)
 8000de4:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8000de8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dea:	4b1a      	ldr	r3, [pc, #104]	@ (8000e54 <MX_TIM2_Init+0x98>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000df0:	4b18      	ldr	r3, [pc, #96]	@ (8000e54 <MX_TIM2_Init+0x98>)
 8000df2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000df6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df8:	4b16      	ldr	r3, [pc, #88]	@ (8000e54 <MX_TIM2_Init+0x98>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfe:	4b15      	ldr	r3, [pc, #84]	@ (8000e54 <MX_TIM2_Init+0x98>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e04:	4813      	ldr	r0, [pc, #76]	@ (8000e54 <MX_TIM2_Init+0x98>)
 8000e06:	f005 fc49 	bl	800669c <HAL_TIM_Base_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000e10:	f000 fbcc 	bl	80015ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e1a:	f107 0310 	add.w	r3, r7, #16
 8000e1e:	4619      	mov	r1, r3
 8000e20:	480c      	ldr	r0, [pc, #48]	@ (8000e54 <MX_TIM2_Init+0x98>)
 8000e22:	f005 fde8 	bl	80069f6 <HAL_TIM_ConfigClockSource>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000e2c:	f000 fbbe 	bl	80015ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e30:	2300      	movs	r3, #0
 8000e32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <MX_TIM2_Init+0x98>)
 8000e3e:	f005 ffd1 	bl	8006de4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000e48:	f000 fbb0 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	3720      	adds	r7, #32
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200002d4 	.word	0x200002d4

08000e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6c:	2004      	movs	r0, #4
 8000e6e:	f7ff fcbf 	bl	80007f0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e72:	2002      	movs	r0, #2
 8000e74:	f7ff fcbc 	bl	80007f0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f7ff fcb9 	bl	80007f0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e88:	f002 fe44 	bl	8003b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2138      	movs	r1, #56	@ 0x38
 8000e90:	481b      	ldr	r0, [pc, #108]	@ (8000f00 <MX_GPIO_Init+0xa8>)
 8000e92:	f002 fe3f 	bl	8003b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb0:	f002 fcc0 	bl	8003834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000eb4:	2338      	movs	r3, #56	@ 0x38
 8000eb6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	480d      	ldr	r0, [pc, #52]	@ (8000f00 <MX_GPIO_Init+0xa8>)
 8000eca:	f002 fcb3 	bl	8003834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ece:	2340      	movs	r3, #64	@ 0x40
 8000ed0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ed2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ed6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4807      	ldr	r0, [pc, #28]	@ (8000f00 <MX_GPIO_Init+0xa8>)
 8000ee2:	f002 fca7 	bl	8003834 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2017      	movs	r0, #23
 8000eec:	f002 fa6b 	bl	80033c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ef0:	2017      	movs	r0, #23
 8000ef2:	f002 fa82 	bl	80033fa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ef6:	bf00      	nop
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	48000400 	.word	0x48000400

08000f04 <write_to_flash>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef write_to_flash(uint32_t address, uint16_t data) {
 8000f04:	b5b0      	push	{r4, r5, r7, lr}
 8000f06:	b08a      	sub	sp, #40	@ 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;

	// Validate address: must be within flash range and 8-byte aligned for double-word write
	if (address < FLASH_BASE || address >= (FLASH_BASE + FLASH_SIZE)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000f16:	d30e      	bcc.n	8000f36 <write_to_flash+0x32>
 8000f18:	4b37      	ldr	r3, [pc, #220]	@ (8000ff8 <write_to_flash+0xf4>)
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	029a      	lsls	r2, r3, #10
 8000f1e:	4b37      	ldr	r3, [pc, #220]	@ (8000ffc <write_to_flash+0xf8>)
 8000f20:	4013      	ands	r3, r2
 8000f22:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d204      	bcs.n	8000f36 <write_to_flash+0x32>
			|| (address % 8 != 0)) {
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <write_to_flash+0x36>
		return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e05a      	b.n	8000ff0 <write_to_flash+0xec>
	}

	// Unlock flash
	status = HAL_FLASH_Unlock();
 8000f3a:	f002 fae7 	bl	800350c <HAL_FLASH_Unlock>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (status != HAL_OK) {
 8000f44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d002      	beq.n	8000f52 <write_to_flash+0x4e>
		return status;
 8000f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f50:	e04e      	b.n	8000ff0 <write_to_flash+0xec>
	}

	// Erase the page containing the address
	FLASH_EraseInitTypeDef erase_init = { .TypeErase = FLASH_TYPEERASE_PAGES,
 8000f52:	2302      	movs	r3, #2
 8000f54:	60fb      	str	r3, [r7, #12]
			.Page = (address - FLASH_BASE) / FLASH_PAGE_SIZE, // Calculate page number
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8000f5c:	0b1b      	lsrs	r3, r3, #12
	FLASH_EraseInitTypeDef erase_init = { .TypeErase = FLASH_TYPEERASE_PAGES,
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	2301      	movs	r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
			.NbPages = 1 };
	uint32_t page_error;
	status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8000f64:	f107 0208 	add.w	r2, r7, #8
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f002 fb9c 	bl	80036ac <HAL_FLASHEx_Erase>
 8000f74:	4603      	mov	r3, r0
 8000f76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (status != HAL_OK || page_error != 0xFFFFFFFF) {
 8000f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d103      	bne.n	8000f8a <write_to_flash+0x86>
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f88:	d003      	beq.n	8000f92 <write_to_flash+0x8e>
		HAL_FLASH_Lock(); // Lock before returning on error
 8000f8a:	f002 fae1 	bl	8003550 <HAL_FLASH_Lock>
		return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e02e      	b.n	8000ff0 <write_to_flash+0xec>
	}

	// Clear pending error flags
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000f92:	4b1b      	ldr	r3, [pc, #108]	@ (8001000 <write_to_flash+0xfc>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	4a1a      	ldr	r2, [pc, #104]	@ (8001000 <write_to_flash+0xfc>)
 8000f98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8000f9c:	6193      	str	r3, [r2, #24]
 8000f9e:	4b18      	ldr	r3, [pc, #96]	@ (8001000 <write_to_flash+0xfc>)
 8000fa0:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 8000fa4:	611a      	str	r2, [r3, #16]

	// Prepare 64-bit data for double-word programming
	uint64_t data_to_write = (uint64_t) data;
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	461c      	mov	r4, r3
 8000fac:	4615      	mov	r5, r2
 8000fae:	e9c7 4506 	strd	r4, r5, [r7, #24]

	// Program the flash
	status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address,
 8000fb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f002 fa63 	bl	8003484 <HAL_FLASH_Program>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			data_to_write);
	if (status != HAL_OK) {
 8000fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d004      	beq.n	8000fd6 <write_to_flash+0xd2>
		HAL_FLASH_Lock(); // Lock before returning on error
 8000fcc:	f002 fac0 	bl	8003550 <HAL_FLASH_Lock>
		return status;
 8000fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fd4:	e00c      	b.n	8000ff0 <write_to_flash+0xec>
	}

	// Lock flash
	status = HAL_FLASH_Lock();
 8000fd6:	f002 fabb 	bl	8003550 <HAL_FLASH_Lock>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (status != HAL_OK) {
 8000fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d002      	beq.n	8000fee <write_to_flash+0xea>
		return status;
 8000fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fec:	e000      	b.n	8000ff0 <write_to_flash+0xec>
	}

	return HAL_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3728      	adds	r7, #40	@ 0x28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ff8:	1fff75e0 	.word	0x1fff75e0
 8000ffc:	001ffc00 	.word	0x001ffc00
 8001000:	58004000 	.word	0x58004000

08001004 <read_from_flash>:


uint16_t read_from_flash(uint32_t address) {
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
    // Validate address
    if (address < FLASH_BASE ||
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001012:	d30e      	bcc.n	8001032 <read_from_flash+0x2e>
        address >= (FLASH_BASE + FLASH_SIZE) ||
 8001014:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <read_from_flash+0x44>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	029a      	lsls	r2, r3, #10
 800101a:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <read_from_flash+0x48>)
 800101c:	4013      	ands	r3, r2
 800101e:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
    if (address < FLASH_BASE ||
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	429a      	cmp	r2, r3
 8001026:	d204      	bcs.n	8001032 <read_from_flash+0x2e>
        (address % 2 != 0)) {
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f003 0301 	and.w	r3, r3, #1
        address >= (FLASH_BASE + FLASH_SIZE) ||
 800102e:	2b00      	cmp	r3, #0
 8001030:	d002      	beq.n	8001038 <read_from_flash+0x34>
        return 0xFFFF;  // or some error code
 8001032:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001036:	e001      	b.n	800103c <read_from_flash+0x38>
    }

    // Return the 16-bit value directly
    return *(uint16_t*)address;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	881b      	ldrh	r3, [r3, #0]
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	1fff75e0 	.word	0x1fff75e0
 800104c:	001ffc00 	.word	0x001ffc00

08001050 <Software_Reset>:
		tx_buffer[2 * i] = (cell_mv[i] >> 8) & 0xFF;
		tx_buffer[2 * i + 1] = cell_mv[i] & 0xFF;
	}
}

void Software_Reset(void) {
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
	// Write the reset request to AIRCR
	SCB->AIRCR = (0x5FA << SCB_AIRCR_VECTKEY_Pos)   // Key to allow write
 8001054:	4b02      	ldr	r3, [pc, #8]	@ (8001060 <Software_Reset+0x10>)
 8001056:	4a03      	ldr	r2, [pc, #12]	@ (8001064 <Software_Reset+0x14>)
 8001058:	60da      	str	r2, [r3, #12]
	| SCB_AIRCR_SYSRESETREQ_Msk;       // Request system reset

	// Wait for the reset to occur
	while (1)
 800105a:	bf00      	nop
 800105c:	e7fd      	b.n	800105a <Software_Reset+0xa>
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00
 8001064:	05fa0004 	.word	0x05fa0004

08001068 <get_voltage>:
		;
}

void get_voltage(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	uint8_t ret = HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800106e:	217f      	movs	r1, #127	@ 0x7f
 8001070:	4862      	ldr	r0, [pc, #392]	@ (80011fc <get_voltage+0x194>)
 8001072:	f002 f80b 	bl	800308c <HAL_ADCEx_Calibration_Start>
 8001076:	4603      	mov	r3, r0
 8001078:	70fb      	strb	r3, [r7, #3]
	if (ret != HAL_OK) {
 800107a:	78fb      	ldrb	r3, [r7, #3]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <get_voltage+0x1c>
		Error_Handler();
 8001080:	f000 fa94 	bl	80015ac <Error_Handler>
	}

	HAL_ADC_Start(&hadc1);
 8001084:	485d      	ldr	r0, [pc, #372]	@ (80011fc <get_voltage+0x194>)
 8001086:	f001 f957 	bl	8002338 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 800108a:	2164      	movs	r1, #100	@ 0x64
 800108c:	485b      	ldr	r0, [pc, #364]	@ (80011fc <get_voltage+0x194>)
 800108e:	f001 f9da 	bl	8002446 <HAL_ADC_PollForConversion>
	cell_voltages[0] = HAL_ADC_GetValue(&hadc1);
 8001092:	485a      	ldr	r0, [pc, #360]	@ (80011fc <get_voltage+0x194>)
 8001094:	f001 fa64 	bl	8002560 <HAL_ADC_GetValue>
 8001098:	ee07 0a90 	vmov	s15, r0
 800109c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a0:	4b57      	ldr	r3, [pc, #348]	@ (8001200 <get_voltage+0x198>)
 80010a2:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 80010a6:	4855      	ldr	r0, [pc, #340]	@ (80011fc <get_voltage+0x194>)
 80010a8:	f001 f99a 	bl	80023e0 <HAL_ADC_Stop>

	HAL_ADC_Start(&hadc1);
 80010ac:	4853      	ldr	r0, [pc, #332]	@ (80011fc <get_voltage+0x194>)
 80010ae:	f001 f943 	bl	8002338 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 80010b2:	2164      	movs	r1, #100	@ 0x64
 80010b4:	4851      	ldr	r0, [pc, #324]	@ (80011fc <get_voltage+0x194>)
 80010b6:	f001 f9c6 	bl	8002446 <HAL_ADC_PollForConversion>
	cell_voltages[1] = HAL_ADC_GetValue(&hadc1);
 80010ba:	4850      	ldr	r0, [pc, #320]	@ (80011fc <get_voltage+0x194>)
 80010bc:	f001 fa50 	bl	8002560 <HAL_ADC_GetValue>
 80010c0:	ee07 0a90 	vmov	s15, r0
 80010c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001200 <get_voltage+0x198>)
 80010ca:	edc3 7a01 	vstr	s15, [r3, #4]
	HAL_ADC_Stop(&hadc1);
 80010ce:	484b      	ldr	r0, [pc, #300]	@ (80011fc <get_voltage+0x194>)
 80010d0:	f001 f986 	bl	80023e0 <HAL_ADC_Stop>

	HAL_ADC_Start(&hadc1);
 80010d4:	4849      	ldr	r0, [pc, #292]	@ (80011fc <get_voltage+0x194>)
 80010d6:	f001 f92f 	bl	8002338 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 80010da:	2164      	movs	r1, #100	@ 0x64
 80010dc:	4847      	ldr	r0, [pc, #284]	@ (80011fc <get_voltage+0x194>)
 80010de:	f001 f9b2 	bl	8002446 <HAL_ADC_PollForConversion>
	cell_voltages[2] = HAL_ADC_GetValue(&hadc1);
 80010e2:	4846      	ldr	r0, [pc, #280]	@ (80011fc <get_voltage+0x194>)
 80010e4:	f001 fa3c 	bl	8002560 <HAL_ADC_GetValue>
 80010e8:	ee07 0a90 	vmov	s15, r0
 80010ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010f0:	4b43      	ldr	r3, [pc, #268]	@ (8001200 <get_voltage+0x198>)
 80010f2:	edc3 7a02 	vstr	s15, [r3, #8]
	HAL_ADC_Stop(&hadc1);
 80010f6:	4841      	ldr	r0, [pc, #260]	@ (80011fc <get_voltage+0x194>)
 80010f8:	f001 f972 	bl	80023e0 <HAL_ADC_Stop>

	HAL_ADC_Start(&hadc1);
 80010fc:	483f      	ldr	r0, [pc, #252]	@ (80011fc <get_voltage+0x194>)
 80010fe:	f001 f91b 	bl	8002338 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8001102:	2164      	movs	r1, #100	@ 0x64
 8001104:	483d      	ldr	r0, [pc, #244]	@ (80011fc <get_voltage+0x194>)
 8001106:	f001 f99e 	bl	8002446 <HAL_ADC_PollForConversion>
	cell_voltages[3] = HAL_ADC_GetValue(&hadc1);
 800110a:	483c      	ldr	r0, [pc, #240]	@ (80011fc <get_voltage+0x194>)
 800110c:	f001 fa28 	bl	8002560 <HAL_ADC_GetValue>
 8001110:	ee07 0a90 	vmov	s15, r0
 8001114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001118:	4b39      	ldr	r3, [pc, #228]	@ (8001200 <get_voltage+0x198>)
 800111a:	edc3 7a03 	vstr	s15, [r3, #12]
	HAL_ADC_Stop(&hadc1);
 800111e:	4837      	ldr	r0, [pc, #220]	@ (80011fc <get_voltage+0x194>)
 8001120:	f001 f95e 	bl	80023e0 <HAL_ADC_Stop>

	HAL_ADC_Start(&hadc1);
 8001124:	4835      	ldr	r0, [pc, #212]	@ (80011fc <get_voltage+0x194>)
 8001126:	f001 f907 	bl	8002338 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 800112a:	2164      	movs	r1, #100	@ 0x64
 800112c:	4833      	ldr	r0, [pc, #204]	@ (80011fc <get_voltage+0x194>)
 800112e:	f001 f98a 	bl	8002446 <HAL_ADC_PollForConversion>
	cell_voltages[4] = HAL_ADC_GetValue(&hadc1);
 8001132:	4832      	ldr	r0, [pc, #200]	@ (80011fc <get_voltage+0x194>)
 8001134:	f001 fa14 	bl	8002560 <HAL_ADC_GetValue>
 8001138:	ee07 0a90 	vmov	s15, r0
 800113c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001140:	4b2f      	ldr	r3, [pc, #188]	@ (8001200 <get_voltage+0x198>)
 8001142:	edc3 7a04 	vstr	s15, [r3, #16]
	HAL_ADC_Stop(&hadc1);
 8001146:	482d      	ldr	r0, [pc, #180]	@ (80011fc <get_voltage+0x194>)
 8001148:	f001 f94a 	bl	80023e0 <HAL_ADC_Stop>

	HAL_ADC_Start(&hadc1);
 800114c:	482b      	ldr	r0, [pc, #172]	@ (80011fc <get_voltage+0x194>)
 800114e:	f001 f8f3 	bl	8002338 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8001152:	2164      	movs	r1, #100	@ 0x64
 8001154:	4829      	ldr	r0, [pc, #164]	@ (80011fc <get_voltage+0x194>)
 8001156:	f001 f976 	bl	8002446 <HAL_ADC_PollForConversion>
	cell_voltages[5] = HAL_ADC_GetValue(&hadc1);
 800115a:	4828      	ldr	r0, [pc, #160]	@ (80011fc <get_voltage+0x194>)
 800115c:	f001 fa00 	bl	8002560 <HAL_ADC_GetValue>
 8001160:	ee07 0a90 	vmov	s15, r0
 8001164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001168:	4b25      	ldr	r3, [pc, #148]	@ (8001200 <get_voltage+0x198>)
 800116a:	edc3 7a05 	vstr	s15, [r3, #20]
	HAL_ADC_Stop(&hadc1);
 800116e:	4823      	ldr	r0, [pc, #140]	@ (80011fc <get_voltage+0x194>)
 8001170:	f001 f936 	bl	80023e0 <HAL_ADC_Stop>

	for (int i = 0; i <= 5; i++) {
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	e01b      	b.n	80011b2 <get_voltage+0x14a>
		cell_mv[i] = (cell_voltages[i] / 4095) * 2 * 2500;
 800117a:	4a21      	ldr	r2, [pc, #132]	@ (8001200 <get_voltage+0x198>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	ed93 7a00 	vldr	s14, [r3]
 8001186:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001204 <get_voltage+0x19c>
 800118a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800118e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001192:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001208 <get_voltage+0x1a0>
 8001196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800119a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800119e:	ee17 3a90 	vmov	r3, s15
 80011a2:	b299      	uxth	r1, r3
 80011a4:	4a19      	ldr	r2, [pc, #100]	@ (800120c <get_voltage+0x1a4>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i <= 5; i++) {
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3301      	adds	r3, #1
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b05      	cmp	r3, #5
 80011b6:	dde0      	ble.n	800117a <get_voltage+0x112>
	}
	present_net_mv = cell_mv[0] + cell_mv[1] + cell_mv[2] + cell_mv[3]
 80011b8:	4b14      	ldr	r3, [pc, #80]	@ (800120c <get_voltage+0x1a4>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	b29a      	uxth	r2, r3
 80011be:	4b13      	ldr	r3, [pc, #76]	@ (800120c <get_voltage+0x1a4>)
 80011c0:	885b      	ldrh	r3, [r3, #2]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	4413      	add	r3, r2
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b10      	ldr	r3, [pc, #64]	@ (800120c <get_voltage+0x1a4>)
 80011ca:	889b      	ldrh	r3, [r3, #4]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	4413      	add	r3, r2
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <get_voltage+0x1a4>)
 80011d4:	88db      	ldrh	r3, [r3, #6]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	4413      	add	r3, r2
 80011da:	b29a      	uxth	r2, r3
			+ cell_mv[4] + cell_mv[5];
 80011dc:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <get_voltage+0x1a4>)
 80011de:	891b      	ldrh	r3, [r3, #8]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	4413      	add	r3, r2
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	4b09      	ldr	r3, [pc, #36]	@ (800120c <get_voltage+0x1a4>)
 80011e8:	895b      	ldrh	r3, [r3, #10]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	4413      	add	r3, r2
 80011ee:	b29a      	uxth	r2, r3
	present_net_mv = cell_mv[0] + cell_mv[1] + cell_mv[2] + cell_mv[3]
 80011f0:	4b07      	ldr	r3, [pc, #28]	@ (8001210 <get_voltage+0x1a8>)
 80011f2:	801a      	strh	r2, [r3, #0]
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200001bc 	.word	0x200001bc
 8001200:	20000334 	.word	0x20000334
 8001204:	457ff000 	.word	0x457ff000
 8001208:	451c4000 	.word	0x451c4000
 800120c:	20000328 	.word	0x20000328
 8001210:	2000034a 	.word	0x2000034a

08001214 <display>:

void display(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
	uint16_t lowest_mv;
	for (int i = 1; i <= 5; i++) {
 800121a:	2301      	movs	r3, #1
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	e01b      	b.n	8001258 <display+0x44>
		if (cell_mv[i] < cell_mv[i - 1]) {
 8001220:	4a47      	ldr	r2, [pc, #284]	@ (8001340 <display+0x12c>)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001228:	b29a      	uxth	r2, r3
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	3b01      	subs	r3, #1
 800122e:	4944      	ldr	r1, [pc, #272]	@ (8001340 <display+0x12c>)
 8001230:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001234:	b29b      	uxth	r3, r3
 8001236:	429a      	cmp	r2, r3
 8001238:	d205      	bcs.n	8001246 <display+0x32>
			lowest_mv = cell_mv[i];
 800123a:	4a41      	ldr	r2, [pc, #260]	@ (8001340 <display+0x12c>)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001242:	80fb      	strh	r3, [r7, #6]
 8001244:	e005      	b.n	8001252 <display+0x3e>
		} else {
			lowest_mv = cell_mv[i - 1];
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	3b01      	subs	r3, #1
 800124a:	4a3d      	ldr	r2, [pc, #244]	@ (8001340 <display+0x12c>)
 800124c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001250:	80fb      	strh	r3, [r7, #6]
	for (int i = 1; i <= 5; i++) {
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	3301      	adds	r3, #1
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	2b05      	cmp	r3, #5
 800125c:	dde0      	ble.n	8001220 <display+0xc>
		}
	}

		if (lowest_mv > cell_nominal_mv && lowest_mv < cell_charged_mv) {
 800125e:	4b39      	ldr	r3, [pc, #228]	@ (8001344 <display+0x130>)
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	b29b      	uxth	r3, r3
 8001264:	88fa      	ldrh	r2, [r7, #6]
 8001266:	429a      	cmp	r2, r3
 8001268:	d915      	bls.n	8001296 <display+0x82>
 800126a:	4b37      	ldr	r3, [pc, #220]	@ (8001348 <display+0x134>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	b29b      	uxth	r3, r3
 8001270:	88fa      	ldrh	r2, [r7, #6]
 8001272:	429a      	cmp	r2, r3
 8001274:	d20f      	bcs.n	8001296 <display+0x82>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8001276:	2201      	movs	r2, #1
 8001278:	2120      	movs	r1, #32
 800127a:	4834      	ldr	r0, [pc, #208]	@ (800134c <display+0x138>)
 800127c:	f002 fc4a 	bl	8003b14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001280:	2201      	movs	r2, #1
 8001282:	2110      	movs	r1, #16
 8001284:	4831      	ldr	r0, [pc, #196]	@ (800134c <display+0x138>)
 8001286:	f002 fc45 	bl	8003b14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 800128a:	2200      	movs	r2, #0
 800128c:	2108      	movs	r1, #8
 800128e:	482f      	ldr	r0, [pc, #188]	@ (800134c <display+0x138>)
 8001290:	f002 fc40 	bl	8003b14 <HAL_GPIO_WritePin>
 8001294:	e04f      	b.n	8001336 <display+0x122>

		} else if (lowest_mv < cell_nominal_mv
 8001296:	4b2b      	ldr	r3, [pc, #172]	@ (8001344 <display+0x130>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	b29b      	uxth	r3, r3
 800129c:	88fa      	ldrh	r2, [r7, #6]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d215      	bcs.n	80012ce <display+0xba>
				&& lowest_mv > cell_discharged_mv) {
 80012a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001350 <display+0x13c>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	88fa      	ldrh	r2, [r7, #6]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d90f      	bls.n	80012ce <display+0xba>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80012ae:	2201      	movs	r2, #1
 80012b0:	2120      	movs	r1, #32
 80012b2:	4826      	ldr	r0, [pc, #152]	@ (800134c <display+0x138>)
 80012b4:	f002 fc2e 	bl	8003b14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2110      	movs	r1, #16
 80012bc:	4823      	ldr	r0, [pc, #140]	@ (800134c <display+0x138>)
 80012be:	f002 fc29 	bl	8003b14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 80012c2:	2201      	movs	r2, #1
 80012c4:	2108      	movs	r1, #8
 80012c6:	4821      	ldr	r0, [pc, #132]	@ (800134c <display+0x138>)
 80012c8:	f002 fc24 	bl	8003b14 <HAL_GPIO_WritePin>
 80012cc:	e033      	b.n	8001336 <display+0x122>
		} else if (lowest_mv < cell_discharged_mv) {
 80012ce:	4b20      	ldr	r3, [pc, #128]	@ (8001350 <display+0x13c>)
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	88fa      	ldrh	r2, [r7, #6]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d20f      	bcs.n	80012fa <display+0xe6>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	2120      	movs	r1, #32
 80012de:	481b      	ldr	r0, [pc, #108]	@ (800134c <display+0x138>)
 80012e0:	f002 fc18 	bl	8003b14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2110      	movs	r1, #16
 80012e8:	4818      	ldr	r0, [pc, #96]	@ (800134c <display+0x138>)
 80012ea:	f002 fc13 	bl	8003b14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 80012ee:	2201      	movs	r2, #1
 80012f0:	2108      	movs	r1, #8
 80012f2:	4816      	ldr	r0, [pc, #88]	@ (800134c <display+0x138>)
 80012f4:	f002 fc0e 	bl	8003b14 <HAL_GPIO_WritePin>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
		}
	}
 80012f8:	e01d      	b.n	8001336 <display+0x122>
		} else if (lowest_mv == cell_charged_mv || lowest_mv > cell_charged_mv - 20)
 80012fa:	4b13      	ldr	r3, [pc, #76]	@ (8001348 <display+0x134>)
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	88fa      	ldrh	r2, [r7, #6]
 8001302:	429a      	cmp	r2, r3
 8001304:	d007      	beq.n	8001316 <display+0x102>
 8001306:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <display+0x134>)
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	b29b      	uxth	r3, r3
 800130c:	f1a3 0213 	sub.w	r2, r3, #19
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	429a      	cmp	r2, r3
 8001314:	dc0f      	bgt.n	8001336 <display+0x122>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	2120      	movs	r1, #32
 800131a:	480c      	ldr	r0, [pc, #48]	@ (800134c <display+0x138>)
 800131c:	f002 fbfa 	bl	8003b14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001320:	2201      	movs	r2, #1
 8001322:	2110      	movs	r1, #16
 8001324:	4809      	ldr	r0, [pc, #36]	@ (800134c <display+0x138>)
 8001326:	f002 fbf5 	bl	8003b14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	2108      	movs	r1, #8
 800132e:	4807      	ldr	r0, [pc, #28]	@ (800134c <display+0x138>)
 8001330:	f002 fbf0 	bl	8003b14 <HAL_GPIO_WritePin>
	}
 8001334:	e7ff      	b.n	8001336 <display+0x122>
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000328 	.word	0x20000328
 8001344:	20000008 	.word	0x20000008
 8001348:	2000000a 	.word	0x2000000a
 800134c:	48000400 	.word	0x48000400
 8001350:	2000000c 	.word	0x2000000c

08001354 <stop_display>:

void stop_display(void) {
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	2120      	movs	r1, #32
 800135c:	4807      	ldr	r0, [pc, #28]	@ (800137c <stop_display+0x28>)
 800135e:	f002 fbd9 	bl	8003b14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	2110      	movs	r1, #16
 8001366:	4805      	ldr	r0, [pc, #20]	@ (800137c <stop_display+0x28>)
 8001368:	f002 fbd4 	bl	8003b14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	2108      	movs	r1, #8
 8001370:	4802      	ldr	r0, [pc, #8]	@ (800137c <stop_display+0x28>)
 8001372:	f002 fbcf 	bl	8003b14 <HAL_GPIO_WritePin>
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	48000400 	.word	0x48000400

08001380 <update_state>:

uint8_t update_state(void) {
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	last_net_mv = read_from_flash(last_voltages_base_addr);
 8001384:	4b19      	ldr	r3, [pc, #100]	@ (80013ec <update_state+0x6c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fe3b 	bl	8001004 <read_from_flash>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	4b17      	ldr	r3, [pc, #92]	@ (80013f0 <update_state+0x70>)
 8001394:	801a      	strh	r2, [r3, #0]
	get_voltage();
 8001396:	f7ff fe67 	bl	8001068 <get_voltage>
	if (present_net_mv > last_net_mv + 10) { //charging
 800139a:	4b16      	ldr	r3, [pc, #88]	@ (80013f4 <update_state+0x74>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b13      	ldr	r3, [pc, #76]	@ (80013f0 <update_state+0x70>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	330a      	adds	r3, #10
 80013aa:	429a      	cmp	r2, r3
 80013ac:	dd06      	ble.n	80013bc <update_state+0x3c>
		charge_state = 1;
 80013ae:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <update_state+0x78>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	701a      	strb	r2, [r3, #0]
		return charge_state;
 80013b4:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <update_state+0x78>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	e015      	b.n	80013e8 <update_state+0x68>
	} else if (present_net_mv + 10 < last_net_mv) { //discharging
 80013bc:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <update_state+0x74>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	330a      	adds	r3, #10
 80013c4:	4a0a      	ldr	r2, [pc, #40]	@ (80013f0 <update_state+0x70>)
 80013c6:	8812      	ldrh	r2, [r2, #0]
 80013c8:	b292      	uxth	r2, r2
 80013ca:	4293      	cmp	r3, r2
 80013cc:	da06      	bge.n	80013dc <update_state+0x5c>
		charge_state = 2;
 80013ce:	4b0a      	ldr	r3, [pc, #40]	@ (80013f8 <update_state+0x78>)
 80013d0:	2202      	movs	r2, #2
 80013d2:	701a      	strb	r2, [r3, #0]
		return charge_state;
 80013d4:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <update_state+0x78>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	e005      	b.n	80013e8 <update_state+0x68>
	} else { //Idle
		charge_state = 0;
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <update_state+0x78>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
		return charge_state;
 80013e2:	4b05      	ldr	r3, [pc, #20]	@ (80013f8 <update_state+0x78>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	b2db      	uxtb	r3, r3
	}
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000010 	.word	0x20000010
 80013f0:	2000034c 	.word	0x2000034c
 80013f4:	2000034a 	.word	0x2000034a
 80013f8:	20000348 	.word	0x20000348

080013fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800140c:	d123      	bne.n	8001456 <HAL_TIM_PeriodElapsedCallback+0x5a>

		if (connection_status == 1) {
 800140e:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b01      	cmp	r3, #1
 8001416:	d10a      	bne.n	800142e <HAL_TIM_PeriodElapsedCallback+0x32>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 8001418:	2201      	movs	r2, #1
 800141a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800141e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001422:	f002 fb77 	bl	8003b14 <HAL_GPIO_WritePin>
			count = 0;
 8001426:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	e00a      	b.n	8001444 <HAL_TIM_PeriodElapsedCallback+0x48>
		} else {
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 800142e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001432:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001436:	f002 fb85 	bl	8003b44 <HAL_GPIO_TogglePin>
			count++;
 800143a:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	3301      	adds	r3, #1
 8001440:	4a08      	ldr	r2, [pc, #32]	@ (8001464 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001442:	6013      	str	r3, [r2, #0]
		}
		if (count >= 10) {
 8001444:	4b07      	ldr	r3, [pc, #28]	@ (8001464 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b09      	cmp	r3, #9
 800144a:	d904      	bls.n	8001456 <HAL_TIM_PeriodElapsedCallback+0x5a>
			stop_display();
 800144c:	f7ff ff82 	bl	8001354 <stop_display>
			sleep_flag = 1;
 8001450:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001452:	2201      	movs	r2, #1
 8001454:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000470 	.word	0x20000470
 8001464:	20000320 	.word	0x20000320
 8001468:	20000324 	.word	0x20000324

0800146c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_6) {
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	2b40      	cmp	r3, #64	@ 0x40
 800147a:	d105      	bne.n	8001488 <HAL_GPIO_EXTI_Callback+0x1c>
		HAL_ResumeTick();       // Resume SysTick interrupt
 800147c:	f000 fbde 	bl	8001c3c <HAL_ResumeTick>
		SystemClock_Config();
 8001480:	f7ff fa5a 	bl	8000938 <SystemClock_Config>
		Software_Reset();
 8001484:	f7ff fde4 	bl	8001050 <Software_Reset>
	}
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <RTC_Wakeup_After>:
}



void RTC_Wakeup_After(uint32_t period_seconds)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b096      	sub	sp, #88	@ 0x58
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
    RTC_AlarmTypeDef sAlarm = {0};
 8001498:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800149c:	2228      	movs	r2, #40	@ 0x28
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f009 f9f6 	bl	800a892 <memset>
    RTC_TimeTypeDef sTime = {0};
 80014a6:	f107 0310 	add.w	r3, r7, #16
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]

    // Get current time and date
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80014ba:	f107 0310 	add.w	r3, r7, #16
 80014be:	2200      	movs	r2, #0
 80014c0:	4619      	mov	r1, r3
 80014c2:	4832      	ldr	r0, [pc, #200]	@ (800158c <RTC_Wakeup_After+0xfc>)
 80014c4:	f004 fcad 	bl	8005e22 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	2200      	movs	r2, #0
 80014ce:	4619      	mov	r1, r3
 80014d0:	482e      	ldr	r0, [pc, #184]	@ (800158c <RTC_Wakeup_After+0xfc>)
 80014d2:	f004 fd8d 	bl	8005ff0 <HAL_RTC_GetDate>

    // Calculate new seconds and minutes with overflow handling
    uint32_t total_seconds = sTime.Seconds + period_seconds;
 80014d6:	7cbb      	ldrb	r3, [r7, #18]
 80014d8:	461a      	mov	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	657b      	str	r3, [r7, #84]	@ 0x54
    sAlarm.AlarmTime.Seconds = total_seconds % 60;
 80014e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80014e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001590 <RTC_Wakeup_After+0x100>)
 80014e4:	fba3 2301 	umull	r2, r3, r3, r1
 80014e8:	095a      	lsrs	r2, r3, #5
 80014ea:	4613      	mov	r3, r2
 80014ec:	011b      	lsls	r3, r3, #4
 80014ee:	1a9b      	subs	r3, r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	1aca      	subs	r2, r1, r3
 80014f4:	b2d3      	uxtb	r3, r2
 80014f6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint32_t total_minutes = sTime.Minutes + (total_seconds / 60);
 80014fa:	7c7b      	ldrb	r3, [r7, #17]
 80014fc:	4619      	mov	r1, r3
 80014fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001500:	4a23      	ldr	r2, [pc, #140]	@ (8001590 <RTC_Wakeup_After+0x100>)
 8001502:	fba2 2303 	umull	r2, r3, r2, r3
 8001506:	095b      	lsrs	r3, r3, #5
 8001508:	440b      	add	r3, r1
 800150a:	653b      	str	r3, [r7, #80]	@ 0x50
    sAlarm.AlarmTime.Minutes = total_minutes % 60;
 800150c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800150e:	4b20      	ldr	r3, [pc, #128]	@ (8001590 <RTC_Wakeup_After+0x100>)
 8001510:	fba3 2301 	umull	r2, r3, r3, r1
 8001514:	095a      	lsrs	r2, r3, #5
 8001516:	4613      	mov	r3, r2
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	1a9b      	subs	r3, r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	1aca      	subs	r2, r1, r3
 8001520:	b2d3      	uxtb	r3, r2
 8001522:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint32_t total_hours = sTime.Hours + (total_minutes / 60);
 8001526:	7c3b      	ldrb	r3, [r7, #16]
 8001528:	4619      	mov	r1, r3
 800152a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800152c:	4a18      	ldr	r2, [pc, #96]	@ (8001590 <RTC_Wakeup_After+0x100>)
 800152e:	fba2 2303 	umull	r2, r3, r2, r3
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	440b      	add	r3, r1
 8001536:	64fb      	str	r3, [r7, #76]	@ 0x4c
    sAlarm.AlarmTime.Hours = total_hours % 24;
 8001538:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800153a:	4b16      	ldr	r3, [pc, #88]	@ (8001594 <RTC_Wakeup_After+0x104>)
 800153c:	fba3 2301 	umull	r2, r3, r3, r1
 8001540:	091a      	lsrs	r2, r3, #4
 8001542:	4613      	mov	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4413      	add	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	1aca      	subs	r2, r1, r3
 800154c:	b2d3      	uxtb	r3, r2
 800154e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001552:	2300      	movs	r3, #0
 8001554:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001558:	2300      	movs	r3, #0
 800155a:	633b      	str	r3, [r7, #48]	@ 0x30
    sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800155c:	2300      	movs	r3, #0
 800155e:	637b      	str	r3, [r7, #52]	@ 0x34
    sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8001560:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001564:	63bb      	str	r3, [r7, #56]	@ 0x38
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001566:	2300      	movs	r3, #0
 8001568:	643b      	str	r3, [r7, #64]	@ 0x40
    sAlarm.AlarmDateWeekDay = sDate.Date;
 800156a:	7bbb      	ldrb	r3, [r7, #14]
 800156c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    sAlarm.Alarm = RTC_ALARM_A;
 8001570:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001574:	64bb      	str	r3, [r7, #72]	@ 0x48

    // Set the alarm with interrupt
    HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8001576:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800157a:	2200      	movs	r2, #0
 800157c:	4619      	mov	r1, r3
 800157e:	4803      	ldr	r0, [pc, #12]	@ (800158c <RTC_Wakeup_After+0xfc>)
 8001580:	f004 fd86 	bl	8006090 <HAL_RTC_SetAlarm_IT>

    // Enter Stop Mode and wait for wakeup
}
 8001584:	bf00      	nop
 8001586:	3758      	adds	r7, #88	@ 0x58
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200002b0 	.word	0x200002b0
 8001590:	88888889 	.word	0x88888889
 8001594:	aaaaaaab 	.word	0xaaaaaaab

08001598 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
   Software_Reset();// Wakeup event handler
 80015a0:	f7ff fd56 	bl	8001050 <Software_Reset>
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015b0:	b672      	cpsid	i
}
 80015b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <Error_Handler+0x8>

080015b8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80015bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <LL_RCC_DisableRTC>:
  * @brief  Disable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_DisableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_DisableRTC(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80015de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80015ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <LL_AHB2_GRP1_EnableClock>:
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001604:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001608:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800160a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4313      	orrs	r3, r2
 8001612:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001614:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001618:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4013      	ands	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001620:	68fb      	ldr	r3, [r7, #12]
}
 8001622:	bf00      	nop
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800162e:	b480      	push	{r7}
 8001630:	b085      	sub	sp, #20
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800163a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800163c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4313      	orrs	r3, r2
 8001644:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001646:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800164a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4013      	ands	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001652:	68fb      	ldr	r3, [r7, #12]
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001668:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800166c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800166e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4313      	orrs	r3, r2
 8001676:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001678:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800167c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4013      	ands	r3, r2
 8001682:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001684:	68fb      	ldr	r3, [r7, #12]
}
 8001686:	bf00      	nop
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800169a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800169e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016a8:	4013      	ands	r3, r2
 80016aa:	658b      	str	r3, [r1, #88]	@ 0x58
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80016bc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80016c0:	f7ff ffb5 	bl	800162e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2100      	movs	r1, #0
 80016c8:	202e      	movs	r0, #46	@ 0x2e
 80016ca:	f001 fe7c 	bl	80033c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80016ce:	202e      	movs	r0, #46	@ 0x2e
 80016d0:	f001 fe93 	bl	80033fa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b09c      	sub	sp, #112	@ 0x70
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	2250      	movs	r2, #80	@ 0x50
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f009 f8ca 	bl	800a892 <memset>
  if(hadc->Instance==ADC1)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a1c      	ldr	r2, [pc, #112]	@ (8001774 <HAL_ADC_MspInit+0x9c>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d131      	bne.n	800176c <HAL_ADC_MspInit+0x94>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001708:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800170c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 800170e:	2306      	movs	r3, #6
 8001710:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001712:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001716:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001718:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800171c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800171e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001722:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8001724:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001728:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800172a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800172e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	4618      	mov	r0, r3
 8001736:	f003 ff5a 	bl	80055ee <HAL_RCCEx_PeriphCLKConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 8001740:	f7ff ff34 	bl	80015ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001744:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001748:	f7ff ff58 	bl	80015fc <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174c:	2001      	movs	r0, #1
 800174e:	f7ff ff55 	bl	80015fc <LL_AHB2_GRP1_EnableClock>
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001752:	237e      	movs	r3, #126	@ 0x7e
 8001754:	65fb      	str	r3, [r7, #92]	@ 0x5c
                          |GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001756:	2303      	movs	r3, #3
 8001758:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001762:	4619      	mov	r1, r3
 8001764:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001768:	f002 f864 	bl	8003834 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800176c:	bf00      	nop
 800176e:	3770      	adds	r7, #112	@ 0x70
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	50040000 	.word	0x50040000

08001778 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b09c      	sub	sp, #112	@ 0x70
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	2250      	movs	r2, #80	@ 0x50
 8001796:	2100      	movs	r1, #0
 8001798:	4618      	mov	r0, r3
 800179a:	f009 f87a 	bl	800a892 <memset>
  if(hi2c->Instance==I2C1)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001810 <HAL_I2C_MspInit+0x98>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d12e      	bne.n	8001806 <HAL_I2C_MspInit+0x8e>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017a8:	2304      	movs	r3, #4
 80017aa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017ac:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80017b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017b2:	f107 030c 	add.w	r3, r7, #12
 80017b6:	4618      	mov	r0, r3
 80017b8:	f003 ff19 	bl	80055ee <HAL_RCCEx_PeriphCLKConfig>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80017c2:	f7ff fef3 	bl	80015ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	2002      	movs	r0, #2
 80017c8:	f7ff ff18 	bl	80015fc <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017cc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d2:	2312      	movs	r3, #18
 80017d4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017de:	2304      	movs	r3, #4
 80017e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80017e6:	4619      	mov	r1, r3
 80017e8:	480a      	ldr	r0, [pc, #40]	@ (8001814 <HAL_I2C_MspInit+0x9c>)
 80017ea:	f002 f823 	bl	8003834 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017ee:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80017f2:	f7ff ff35 	bl	8001660 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2100      	movs	r1, #0
 80017fa:	201e      	movs	r0, #30
 80017fc:	f001 fde3 	bl	80033c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001800:	201e      	movs	r0, #30
 8001802:	f001 fdfa 	bl	80033fa <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001806:	bf00      	nop
 8001808:	3770      	adds	r7, #112	@ 0x70
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40005400 	.word	0x40005400
 8001814:	48000400 	.word	0x48000400

08001818 <HAL_IPCC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hipcc: IPCC handle pointer
  * @retval None
  */
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0d      	ldr	r2, [pc, #52]	@ (800185c <HAL_IPCC_MspInit+0x44>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d113      	bne.n	8001852 <HAL_IPCC_MspInit+0x3a>
  {
    /* USER CODE BEGIN IPCC_MspInit 0 */

    /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800182a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800182e:	f7ff fefe 	bl	800162e <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	202c      	movs	r0, #44	@ 0x2c
 8001838:	f001 fdc5 	bl	80033c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800183c:	202c      	movs	r0, #44	@ 0x2c
 800183e:	f001 fddc 	bl	80033fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	202d      	movs	r0, #45	@ 0x2d
 8001848:	f001 fdbd 	bl	80033c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800184c:	202d      	movs	r0, #45	@ 0x2d
 800184e:	f001 fdd4 	bl	80033fa <HAL_NVIC_EnableIRQ>

    /* USER CODE END IPCC_MspInit 1 */

  }

}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	58000c00 	.word	0x58000c00

08001860 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b096      	sub	sp, #88	@ 0x58
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001868:	f107 0308 	add.w	r3, r7, #8
 800186c:	2250      	movs	r2, #80	@ 0x50
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f009 f80e 	bl	800a892 <memset>
  if(hrtc->Instance==RTC)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a13      	ldr	r2, [pc, #76]	@ (80018c8 <HAL_RTC_MspInit+0x68>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d11f      	bne.n	80018c0 <HAL_RTC_MspInit+0x60>

    /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8001880:	f002 fb88 	bl	8003f94 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001884:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001888:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800188a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800188e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001890:	f107 0308 	add.w	r3, r7, #8
 8001894:	4618      	mov	r0, r3
 8001896:	f003 feaa 	bl	80055ee <HAL_RCCEx_PeriphCLKConfig>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 80018a0:	f7ff fe84 	bl	80015ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80018a4:	f7ff fe88 	bl	80015b8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80018a8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80018ac:	f7ff fed8 	bl	8001660 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2100      	movs	r1, #0
 80018b4:	2029      	movs	r0, #41	@ 0x29
 80018b6:	f001 fd86 	bl	80033c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80018ba:	2029      	movs	r0, #41	@ 0x29
 80018bc:	f001 fd9d 	bl	80033fa <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80018c0:	bf00      	nop
 80018c2:	3758      	adds	r7, #88	@ 0x58
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40002800 	.word	0x40002800

080018cc <HAL_RTC_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a07      	ldr	r2, [pc, #28]	@ (80018f8 <HAL_RTC_MspDeInit+0x2c>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d108      	bne.n	80018f0 <HAL_RTC_MspDeInit+0x24>
  {
    /* USER CODE BEGIN RTC_MspDeInit 0 */

    /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 80018de:	f7ff fe7c 	bl	80015da <LL_RCC_DisableRTC>
    __HAL_RCC_RTCAPB_CLK_DISABLE();
 80018e2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80018e6:	f7ff fed4 	bl	8001692 <LL_APB1_GRP1_DisableClock>

    /* RTC interrupt DeInit */
    HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 80018ea:	2029      	movs	r0, #41	@ 0x29
 80018ec:	f001 fd93 	bl	8003416 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN RTC_MspDeInit 1 */

    /* USER CODE END RTC_MspDeInit 1 */
  }

}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40002800 	.word	0x40002800

080018fc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800190c:	d10a      	bne.n	8001924 <HAL_TIM_Base_MspInit+0x28>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800190e:	2001      	movs	r0, #1
 8001910:	f7ff fea6 	bl	8001660 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001914:	2200      	movs	r2, #0
 8001916:	2100      	movs	r1, #0
 8001918:	201c      	movs	r0, #28
 800191a:	f001 fd54 	bl	80033c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800191e:	201c      	movs	r0, #28
 8001920:	f001 fd6b 	bl	80033fa <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <NMI_Handler+0x4>

08001934 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <HardFault_Handler+0x4>

0800193c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <MemManage_Handler+0x4>

08001944 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <BusFault_Handler+0x4>

0800194c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <UsageFault_Handler+0x4>

08001954 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001982:	f000 f91f 	bl	8001bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}

0800198a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800198e:	2040      	movs	r0, #64	@ 0x40
 8001990:	f002 f8f2 	bl	8003b78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}

08001998 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800199c:	4802      	ldr	r0, [pc, #8]	@ (80019a8 <TIM2_IRQHandler+0x10>)
 800199e:	f004 ff23 	bl	80067e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200002d4 	.word	0x200002d4

080019ac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80019b0:	4802      	ldr	r0, [pc, #8]	@ (80019bc <I2C1_EV_IRQHandler+0x10>)
 80019b2:	f002 f9b8 	bl	8003d26 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000220 	.word	0x20000220

080019c0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC A and B alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80019c4:	4802      	ldr	r0, [pc, #8]	@ (80019d0 <RTC_Alarm_IRQHandler+0x10>)
 80019c6:	f004 fcb3 	bl	8006330 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200002b0 	.word	0x200002b0

080019d4 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80019d8:	f008 fa92 	bl	8009f00 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}

080019e0 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80019e4:	f008 fac2 	bl	8009f6c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}

080019ec <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80019f0:	f002 f8da 	bl	8003ba8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80019fc:	4b24      	ldr	r3, [pc, #144]	@ (8001a90 <SystemInit+0x98>)
 80019fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a02:	4a23      	ldr	r2, [pc, #140]	@ (8001a90 <SystemInit+0x98>)
 8001a04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a20:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001a24:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001a26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a30:	4b18      	ldr	r3, [pc, #96]	@ (8001a94 <SystemInit+0x9c>)
 8001a32:	4013      	ands	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001a36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a42:	f023 0305 	bic.w	r3, r3, #5
 8001a46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a56:	f023 0301 	bic.w	r3, r3, #1
 8001a5a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001a5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a62:	4a0d      	ldr	r2, [pc, #52]	@ (8001a98 <SystemInit+0xa0>)
 8001a64:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001a66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a6a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a98 <SystemInit+0xa0>)
 8001a6c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a7c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00
 8001a94:	faf6fefb 	.word	0xfaf6fefb
 8001a98:	22041000 	.word	0x22041000

08001a9c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001a9c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a9e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa0:	3304      	adds	r3, #4

08001aa2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001aa6:	d3f9      	bcc.n	8001a9c <CopyDataInit>
  bx lr
 8001aa8:	4770      	bx	lr

08001aaa <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001aaa:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001aac:	3004      	adds	r0, #4

08001aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001aae:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001ab0:	d3fb      	bcc.n	8001aaa <FillZerobss>
  bx lr
 8001ab2:	4770      	bx	lr

08001ab4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ab4:	480c      	ldr	r0, [pc, #48]	@ (8001ae8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ab6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ab8:	f7ff ff9e 	bl	80019f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001abc:	480b      	ldr	r0, [pc, #44]	@ (8001aec <LoopForever+0x6>)
 8001abe:	490c      	ldr	r1, [pc, #48]	@ (8001af0 <LoopForever+0xa>)
 8001ac0:	4a0c      	ldr	r2, [pc, #48]	@ (8001af4 <LoopForever+0xe>)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f7ff ffed 	bl	8001aa2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001ac8:	480b      	ldr	r0, [pc, #44]	@ (8001af8 <LoopForever+0x12>)
 8001aca:	490c      	ldr	r1, [pc, #48]	@ (8001afc <LoopForever+0x16>)
 8001acc:	4a0c      	ldr	r2, [pc, #48]	@ (8001b00 <LoopForever+0x1a>)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f7ff ffe7 	bl	8001aa2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001ad4:	480b      	ldr	r0, [pc, #44]	@ (8001b04 <LoopForever+0x1e>)
 8001ad6:	490c      	ldr	r1, [pc, #48]	@ (8001b08 <LoopForever+0x22>)
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f7ff ffe8 	bl	8001aae <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ade:	f008 fee1 	bl	800a8a4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001ae2:	f7fe fe9f 	bl	8000824 <main>

08001ae6 <LoopForever>:

LoopForever:
  b LoopForever
 8001ae6:	e7fe      	b.n	8001ae6 <LoopForever>
  ldr   r0, =_estack
 8001ae8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001aec:	20000008 	.word	0x20000008
 8001af0:	200000b4 	.word	0x200000b4
 8001af4:	0800aba0 	.word	0x0800aba0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001af8:	200301e4 	.word	0x200301e4
 8001afc:	20030a67 	.word	0x20030a67
 8001b00:	0800ac92 	.word	0x0800ac92
  INIT_BSS _sbss, _ebss
 8001b04:	20000100 	.word	0x20000100
 8001b08:	20000728 	.word	0x20000728

08001b0c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b0c:	e7fe      	b.n	8001b0c <ADC1_IRQHandler>
	...

08001b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b16:	2300      	movs	r3, #0
 8001b18:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <HAL_Init+0x3c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a0b      	ldr	r2, [pc, #44]	@ (8001b4c <HAL_Init+0x3c>)
 8001b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b24:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b26:	2003      	movs	r0, #3
 8001b28:	f001 fc42 	bl	80033b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b2c:	200f      	movs	r0, #15
 8001b2e:	f000 f80f 	bl	8001b50 <HAL_InitTick>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	71fb      	strb	r3, [r7, #7]
 8001b3c:	e001      	b.n	8001b42 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b3e:	f7ff fdbb 	bl	80016b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b42:	79fb      	ldrb	r3, [r7, #7]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	58004000 	.word	0x58004000

08001b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001b5c:	4b17      	ldr	r3, [pc, #92]	@ (8001bbc <HAL_InitTick+0x6c>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d024      	beq.n	8001bae <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b64:	f003 fade 	bl	8005124 <HAL_RCC_GetHCLKFreq>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	4b14      	ldr	r3, [pc, #80]	@ (8001bbc <HAL_InitTick+0x6c>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b74:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f001 fc58 	bl	8003432 <HAL_SYSTICK_Config>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10f      	bne.n	8001ba8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b0f      	cmp	r3, #15
 8001b8c:	d809      	bhi.n	8001ba2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	f04f 30ff 	mov.w	r0, #4294967295
 8001b96:	f001 fc16 	bl	80033c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b9a:	4a09      	ldr	r2, [pc, #36]	@ (8001bc0 <HAL_InitTick+0x70>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	e007      	b.n	8001bb2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	73fb      	strb	r3, [r7, #15]
 8001ba6:	e004      	b.n	8001bb2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
 8001bac:	e001      	b.n	8001bb2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	2000001c 	.word	0x2000001c
 8001bc0:	20000018 	.word	0x20000018

08001bc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <HAL_IncTick+0x20>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <HAL_IncTick+0x24>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4a04      	ldr	r2, [pc, #16]	@ (8001be8 <HAL_IncTick+0x24>)
 8001bd6:	6013      	str	r3, [r2, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	2000001c 	.word	0x2000001c
 8001be8:	20000350 	.word	0x20000350

08001bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	@ (8001c00 <HAL_GetTick+0x14>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	20000350 	.word	0x20000350

08001c04 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001c08:	4b03      	ldr	r3, [pc, #12]	@ (8001c18 <HAL_GetTickPrio+0x14>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000018 	.word	0x20000018

08001c1c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001c20:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <HAL_SuspendTick+0x1c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a04      	ldr	r2, [pc, #16]	@ (8001c38 <HAL_SuspendTick+0x1c>)
 8001c26:	f023 0302 	bic.w	r3, r3, #2
 8001c2a:	6013      	str	r3, [r2, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000e010 	.word	0xe000e010

08001c3c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001c40:	4b05      	ldr	r3, [pc, #20]	@ (8001c58 <HAL_ResumeTick+0x1c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a04      	ldr	r2, [pc, #16]	@ (8001c58 <HAL_ResumeTick+0x1c>)
 8001c46:	f043 0302 	orr.w	r3, r3, #2
 8001c4a:	6013      	str	r3, [r2, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000e010 	.word	0xe000e010

08001c5c <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8001c60:	4b03      	ldr	r3, [pc, #12]	@ (8001c70 <HAL_GetUIDw2+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	1fff7598 	.word	0x1fff7598

08001c74 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b087      	sub	sp, #28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	3360      	adds	r3, #96	@ 0x60
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <LL_ADC_SetOffset+0x44>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d14:	bf00      	nop
 8001d16:	371c      	adds	r7, #28
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	03fff000 	.word	0x03fff000

08001d24 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3360      	adds	r3, #96	@ 0x60
 8001d32:	461a      	mov	r2, r3
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	3360      	adds	r3, #96	@ 0x60
 8001d60:	461a      	mov	r2, r3
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	431a      	orrs	r2, r3
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d7a:	bf00      	nop
 8001d7c:	371c      	adds	r7, #28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d9e:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	3330      	adds	r3, #48	@ 0x30
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	0a1b      	lsrs	r3, r3, #8
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	f003 030c 	and.w	r3, r3, #12
 8001dc8:	4413      	add	r3, r2
 8001dca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f003 031f 	and.w	r3, r3, #31
 8001dd6:	211f      	movs	r1, #31
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	401a      	ands	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	0e9b      	lsrs	r3, r3, #26
 8001de4:	f003 011f 	and.w	r1, r3, #31
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	fa01 f303 	lsl.w	r3, r1, r3
 8001df2:	431a      	orrs	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001df8:	bf00      	nop
 8001dfa:	371c      	adds	r7, #28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b087      	sub	sp, #28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	3314      	adds	r3, #20
 8001e14:	461a      	mov	r2, r3
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	0e5b      	lsrs	r3, r3, #25
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	4413      	add	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	0d1b      	lsrs	r3, r3, #20
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	2107      	movs	r1, #7
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	401a      	ands	r2, r3
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	0d1b      	lsrs	r3, r3, #20
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001e4e:	bf00      	nop
 8001e50:	371c      	adds	r7, #28
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e74:	43db      	mvns	r3, r3
 8001e76:	401a      	ands	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f003 0318 	and.w	r3, r3, #24
 8001e7e:	4908      	ldr	r1, [pc, #32]	@ (8001ea0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e80:	40d9      	lsrs	r1, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	400b      	ands	r3, r1
 8001e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	0007ffff 	.word	0x0007ffff

08001ea4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001eb4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6093      	str	r3, [r2, #8]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ed8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001edc:	d101      	bne.n	8001ee2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001f00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f04:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f2c:	d101      	bne.n	8001f32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f54:	f043 0201 	orr.w	r2, r3, #1
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f7c:	f043 0202 	orr.w	r2, r3, #2
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <LL_ADC_IsEnabled+0x18>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <LL_ADC_IsEnabled+0x1a>
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d101      	bne.n	8001fce <LL_ADC_IsDisableOngoing+0x18>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <LL_ADC_IsDisableOngoing+0x1a>
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ff0:	f043 0204 	orr.w	r2, r3, #4
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002014:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002018:	f043 0210 	orr.w	r2, r3, #16
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b04      	cmp	r3, #4
 800203e:	d101      	bne.n	8002044 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002062:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002066:	f043 0220 	orr.w	r2, r3, #32
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b08      	cmp	r3, #8
 800208c:	d101      	bne.n	8002092 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e12e      	b.n	800231c <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d109      	bne.n	80020e0 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff fb03 	bl	80016d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff feef 	bl	8001ec8 <LL_ADC_IsDeepPowerDownEnabled>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d004      	beq.n	80020fa <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff fed5 	bl	8001ea4 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff ff0a 	bl	8001f18 <LL_ADC_IsInternalRegulatorEnabled>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d115      	bne.n	8002136 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff feee 	bl	8001ef0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002114:	4b83      	ldr	r3, [pc, #524]	@ (8002324 <HAL_ADC_Init+0x284>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	099b      	lsrs	r3, r3, #6
 800211a:	4a83      	ldr	r2, [pc, #524]	@ (8002328 <HAL_ADC_Init+0x288>)
 800211c:	fba2 2303 	umull	r2, r3, r2, r3
 8002120:	099b      	lsrs	r3, r3, #6
 8002122:	3301      	adds	r3, #1
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002128:	e002      	b.n	8002130 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	3b01      	subs	r3, #1
 800212e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f9      	bne.n	800212a <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff feec 	bl	8001f18 <LL_ADC_IsInternalRegulatorEnabled>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10d      	bne.n	8002162 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800214a:	f043 0210 	orr.w	r2, r3, #16
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002156:	f043 0201 	orr.w	r2, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ff60 	bl	800202c <LL_ADC_REG_IsConversionOngoing>
 800216c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002172:	f003 0310 	and.w	r3, r3, #16
 8002176:	2b00      	cmp	r3, #0
 8002178:	f040 80c7 	bne.w	800230a <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	2b00      	cmp	r3, #0
 8002180:	f040 80c3 	bne.w	800230a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002188:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800218c:	f043 0202 	orr.w	r2, r3, #2
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fef9 	bl	8001f90 <LL_ADC_IsEnabled>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10b      	bne.n	80021bc <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021a4:	4861      	ldr	r0, [pc, #388]	@ (800232c <HAL_ADC_Init+0x28c>)
 80021a6:	f7ff fef3 	bl	8001f90 <LL_ADC_IsEnabled>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d105      	bne.n	80021bc <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4619      	mov	r1, r3
 80021b6:	485e      	ldr	r0, [pc, #376]	@ (8002330 <HAL_ADC_Init+0x290>)
 80021b8:	f7ff fd5c 	bl	8001c74 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	7e5b      	ldrb	r3, [r3, #25]
 80021c0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021c6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80021cc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80021d2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021da:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80021dc:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d106      	bne.n	80021fc <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f2:	3b01      	subs	r3, #1
 80021f4:	045b      	lsls	r3, r3, #17
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002200:	2b00      	cmp	r3, #0
 8002202:	d009      	beq.n	8002218 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002208:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002210:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	4b45      	ldr	r3, [pc, #276]	@ (8002334 <HAL_ADC_Init+0x294>)
 8002220:	4013      	ands	r3, r2
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	69b9      	ldr	r1, [r7, #24]
 8002228:	430b      	orrs	r3, r1
 800222a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fefb 	bl	800202c <LL_ADC_REG_IsConversionOngoing>
 8002236:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff1c 	bl	800207a <LL_ADC_INJ_IsConversionOngoing>
 8002242:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d13d      	bne.n	80022c6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d13a      	bne.n	80022c6 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002254:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800225c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800226c:	f023 0302 	bic.w	r3, r3, #2
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	69b9      	ldr	r1, [r7, #24]
 8002276:	430b      	orrs	r3, r1
 8002278:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002280:	2b01      	cmp	r3, #1
 8002282:	d118      	bne.n	80022b6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800228e:	f023 0304 	bic.w	r3, r3, #4
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800229a:	4311      	orrs	r1, r2
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80022a0:	4311      	orrs	r1, r2
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022a6:	430a      	orrs	r2, r1
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0201 	orr.w	r2, r2, #1
 80022b2:	611a      	str	r2, [r3, #16]
 80022b4:	e007      	b.n	80022c6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0201 	bic.w	r2, r2, #1
 80022c4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d10c      	bne.n	80022e8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d4:	f023 010f 	bic.w	r1, r3, #15
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	1e5a      	subs	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80022e6:	e007      	b.n	80022f8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 020f 	bic.w	r2, r2, #15
 80022f6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fc:	f023 0303 	bic.w	r3, r3, #3
 8002300:	f043 0201 	orr.w	r2, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	655a      	str	r2, [r3, #84]	@ 0x54
 8002308:	e007      	b.n	800231a <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800230e:	f043 0210 	orr.w	r2, r3, #16
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800231a:	7ffb      	ldrb	r3, [r7, #31]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3720      	adds	r7, #32
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20000014 	.word	0x20000014
 8002328:	053e2d63 	.word	0x053e2d63
 800232c:	50040000 	.word	0x50040000
 8002330:	50040300 	.word	0x50040300
 8002334:	fff0c007 	.word	0xfff0c007

08002338 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fe71 	bl	800202c <LL_ADC_REG_IsConversionOngoing>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d140      	bne.n	80023d2 <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_ADC_Start+0x26>
 800235a:	2302      	movs	r3, #2
 800235c:	e03c      	b.n	80023d8 <HAL_ADC_Start+0xa0>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 fd8a 	bl	8002e80 <ADC_Enable>
 800236c:	4603      	mov	r3, r0
 800236e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d128      	bne.n	80023c8 <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800237a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800237e:	f023 0301 	bic.w	r3, r3, #1
 8002382:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800238e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002392:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002396:	d106      	bne.n	80023a6 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239c:	f023 0206 	bic.w	r2, r3, #6
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	659a      	str	r2, [r3, #88]	@ 0x58
 80023a4:	e002      	b.n	80023ac <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	221c      	movs	r2, #28
 80023b2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fe0b 	bl	8001fdc <LL_ADC_REG_StartConversion>
 80023c6:	e006      	b.n	80023d6 <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80023d0:	e001      	b.n	80023d6 <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023d2:	2302      	movs	r3, #2
 80023d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_Stop+0x16>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e023      	b.n	800243e <HAL_ADC_Stop+0x5e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80023fe:	2103      	movs	r1, #3
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 fc81 	bl	8002d08 <ADC_ConversionStop>
 8002406:	4603      	mov	r3, r0
 8002408:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800240a:	7bfb      	ldrb	r3, [r7, #15]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d111      	bne.n	8002434 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 fdaf 	bl	8002f74 <ADC_Disable>
 8002416:	4603      	mov	r3, r0
 8002418:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d109      	bne.n	8002434 <HAL_ADC_Stop+0x54>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002424:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002428:	f023 0301 	bic.w	r3, r3, #1
 800242c:	f043 0201 	orr.w	r2, r3, #1
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	655a      	str	r2, [r3, #84]	@ 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800243c:	7bfb      	ldrb	r3, [r7, #15]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b084      	sub	sp, #16
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	2b08      	cmp	r3, #8
 8002456:	d102      	bne.n	800245e <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002458:	2308      	movs	r3, #8
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	e010      	b.n	8002480 <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	d007      	beq.n	800247c <HAL_ADC_PollForConversion+0x36>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002470:	f043 0220 	orr.w	r2, r3, #32
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	655a      	str	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e06d      	b.n	8002558 <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800247c:	2304      	movs	r3, #4
 800247e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002480:	f7ff fbb4 	bl	8001bec <HAL_GetTick>
 8002484:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002486:	e021      	b.n	80024cc <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248e:	d01d      	beq.n	80024cc <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002490:	f7ff fbac 	bl	8001bec <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d302      	bcc.n	80024a6 <HAL_ADC_PollForConversion+0x60>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d112      	bne.n	80024cc <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4013      	ands	r3, r2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10b      	bne.n	80024cc <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b8:	f043 0204 	orr.w	r2, r3, #4
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e045      	b.n	8002558 <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0d6      	beq.n	8002488 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024de:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fc4b 	bl	8001d86 <LL_ADC_REG_IsTriggerSourceSWStart>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d01c      	beq.n	8002530 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	7e5b      	ldrb	r3, [r3, #25]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d118      	bne.n	8002530 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	2b08      	cmp	r3, #8
 800250a:	d111      	bne.n	8002530 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002510:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800251c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d105      	bne.n	8002530 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002528:	f043 0201 	orr.w	r2, r3, #1
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b08      	cmp	r3, #8
 8002534:	d104      	bne.n	8002540 <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2208      	movs	r2, #8
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	e00a      	b.n	8002556 <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d103      	bne.n	8002556 <HAL_ADC_PollForConversion+0x110>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	220c      	movs	r2, #12
 8002554:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b0b6      	sub	sp, #216	@ 0xd8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002596:	2b01      	cmp	r3, #1
 8002598:	d101      	bne.n	800259e <HAL_ADC_ConfigChannel+0x22>
 800259a:	2302      	movs	r3, #2
 800259c:	e39f      	b.n	8002cde <HAL_ADC_ConfigChannel+0x762>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fd3e 	bl	800202c <LL_ADC_REG_IsConversionOngoing>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f040 8384 	bne.w	8002cc0 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	f7ff fbf1 	bl	8001dac <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fd2c 	bl	800202c <LL_ADC_REG_IsConversionOngoing>
 80025d4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff fd4c 	bl	800207a <LL_ADC_INJ_IsConversionOngoing>
 80025e2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f040 81a6 	bne.w	800293c <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f040 81a1 	bne.w	800293c <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6819      	ldr	r1, [r3, #0]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	461a      	mov	r2, r3
 8002608:	f7ff fbfc 	bl	8001e04 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	695a      	ldr	r2, [r3, #20]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	08db      	lsrs	r3, r3, #3
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	2b04      	cmp	r3, #4
 800262c:	d00a      	beq.n	8002644 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6919      	ldr	r1, [r3, #16]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800263e:	f7ff fb4d 	bl	8001cdc <LL_ADC_SetOffset>
 8002642:	e17b      	b.n	800293c <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2100      	movs	r1, #0
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fb6a 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 8002650:	4603      	mov	r3, r0
 8002652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10a      	bne.n	8002670 <HAL_ADC_ConfigChannel+0xf4>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2100      	movs	r1, #0
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff fb5f 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 8002666:	4603      	mov	r3, r0
 8002668:	0e9b      	lsrs	r3, r3, #26
 800266a:	f003 021f 	and.w	r2, r3, #31
 800266e:	e01e      	b.n	80026ae <HAL_ADC_ConfigChannel+0x132>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2100      	movs	r1, #0
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fb54 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 800267c:	4603      	mov	r3, r0
 800267e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 800268e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002692:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  if (value == 0U)
 8002696:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 800269e:	2320      	movs	r3, #32
 80026a0:	e004      	b.n	80026ac <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 80026a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80026a6:	fab3 f383 	clz	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d105      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x14a>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	0e9b      	lsrs	r3, r3, #26
 80026c0:	f003 031f 	and.w	r3, r3, #31
 80026c4:	e018      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x17c>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026d2:	fa93 f3a3 	rbit	r3, r3
 80026d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80026da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80026e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80026ea:	2320      	movs	r3, #32
 80026ec:	e004      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80026ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d106      	bne.n	800270a <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2200      	movs	r2, #0
 8002702:	2100      	movs	r1, #0
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff fb23 	bl	8001d50 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2101      	movs	r1, #1
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fb07 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 8002716:	4603      	mov	r3, r0
 8002718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10a      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x1ba>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2101      	movs	r1, #1
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff fafc 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 800272c:	4603      	mov	r3, r0
 800272e:	0e9b      	lsrs	r3, r3, #26
 8002730:	f003 021f 	and.w	r2, r3, #31
 8002734:	e01e      	b.n	8002774 <HAL_ADC_ConfigChannel+0x1f8>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2101      	movs	r1, #1
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff faf1 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 8002742:	4603      	mov	r3, r0
 8002744:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002748:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800274c:	fa93 f3a3 	rbit	r3, r3
 8002750:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002754:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002758:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800275c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002764:	2320      	movs	r3, #32
 8002766:	e004      	b.n	8002772 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002768:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800276c:	fab3 f383 	clz	r3, r3
 8002770:	b2db      	uxtb	r3, r3
 8002772:	461a      	mov	r2, r3
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277c:	2b00      	cmp	r3, #0
 800277e:	d105      	bne.n	800278c <HAL_ADC_ConfigChannel+0x210>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	0e9b      	lsrs	r3, r3, #26
 8002786:	f003 031f 	and.w	r3, r3, #31
 800278a:	e018      	b.n	80027be <HAL_ADC_ConfigChannel+0x242>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002798:	fa93 f3a3 	rbit	r3, r3
 800279c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80027a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80027a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80027a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80027b0:	2320      	movs	r3, #32
 80027b2:	e004      	b.n	80027be <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80027b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027b8:	fab3 f383 	clz	r3, r3
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	429a      	cmp	r2, r3
 80027c0:	d106      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2200      	movs	r2, #0
 80027c8:	2101      	movs	r1, #1
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fac0 	bl	8001d50 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2102      	movs	r1, #2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff faa4 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 80027dc:	4603      	mov	r3, r0
 80027de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10a      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x280>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2102      	movs	r1, #2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fa99 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 80027f2:	4603      	mov	r3, r0
 80027f4:	0e9b      	lsrs	r3, r3, #26
 80027f6:	f003 021f 	and.w	r2, r3, #31
 80027fa:	e01e      	b.n	800283a <HAL_ADC_ConfigChannel+0x2be>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2102      	movs	r1, #2
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fa8e 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 8002808:	4603      	mov	r3, r0
 800280a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002812:	fa93 f3a3 	rbit	r3, r3
 8002816:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800281a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800281e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002822:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800282a:	2320      	movs	r3, #32
 800282c:	e004      	b.n	8002838 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800282e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002832:	fab3 f383 	clz	r3, r3
 8002836:	b2db      	uxtb	r3, r3
 8002838:	461a      	mov	r2, r3
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002842:	2b00      	cmp	r3, #0
 8002844:	d105      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x2d6>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	0e9b      	lsrs	r3, r3, #26
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	e016      	b.n	8002880 <HAL_ADC_ConfigChannel+0x304>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800285e:	fa93 f3a3 	rbit	r3, r3
 8002862:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002864:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002866:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800286a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002872:	2320      	movs	r3, #32
 8002874:	e004      	b.n	8002880 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002876:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800287a:	fab3 f383 	clz	r3, r3
 800287e:	b2db      	uxtb	r3, r3
 8002880:	429a      	cmp	r2, r3
 8002882:	d106      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2200      	movs	r2, #0
 800288a:	2102      	movs	r1, #2
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff fa5f 	bl	8001d50 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2103      	movs	r1, #3
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff fa43 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 800289e:	4603      	mov	r3, r0
 80028a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10a      	bne.n	80028be <HAL_ADC_ConfigChannel+0x342>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2103      	movs	r1, #3
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fa38 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 80028b4:	4603      	mov	r3, r0
 80028b6:	0e9b      	lsrs	r3, r3, #26
 80028b8:	f003 021f 	and.w	r2, r3, #31
 80028bc:	e017      	b.n	80028ee <HAL_ADC_ConfigChannel+0x372>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2103      	movs	r1, #3
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fa2d 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 80028ca:	4603      	mov	r3, r0
 80028cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028d0:	fa93 f3a3 	rbit	r3, r3
 80028d4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80028d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028d8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80028da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80028e0:	2320      	movs	r3, #32
 80028e2:	e003      	b.n	80028ec <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80028e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028e6:	fab3 f383 	clz	r3, r3
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	461a      	mov	r2, r3
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d105      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x38a>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	0e9b      	lsrs	r3, r3, #26
 8002900:	f003 031f 	and.w	r3, r3, #31
 8002904:	e011      	b.n	800292a <HAL_ADC_ConfigChannel+0x3ae>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002914:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002916:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002918:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 800291e:	2320      	movs	r3, #32
 8002920:	e003      	b.n	800292a <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002922:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002924:	fab3 f383 	clz	r3, r3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	429a      	cmp	r2, r3
 800292c:	d106      	bne.n	800293c <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2200      	movs	r2, #0
 8002934:	2103      	movs	r1, #3
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fa0a 	bl	8001d50 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff fb25 	bl	8001f90 <LL_ADC_IsEnabled>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	f040 81c2 	bne.w	8002cd2 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	6819      	ldr	r1, [r3, #0]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	461a      	mov	r2, r3
 800295c:	f7ff fa7e 	bl	8001e5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	4a8e      	ldr	r2, [pc, #568]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x624>)
 8002966:	4293      	cmp	r3, r2
 8002968:	f040 8130 	bne.w	8002bcc <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10b      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x418>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	0e9b      	lsrs	r3, r3, #26
 8002982:	3301      	adds	r3, #1
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	2b09      	cmp	r3, #9
 800298a:	bf94      	ite	ls
 800298c:	2301      	movls	r3, #1
 800298e:	2300      	movhi	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	e019      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x44c>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800299c:	fa93 f3a3 	rbit	r3, r3
 80029a0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80029a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029a4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80029a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 80029ac:	2320      	movs	r3, #32
 80029ae:	e003      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 80029b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	3301      	adds	r3, #1
 80029ba:	f003 031f 	and.w	r3, r3, #31
 80029be:	2b09      	cmp	r3, #9
 80029c0:	bf94      	ite	ls
 80029c2:	2301      	movls	r3, #1
 80029c4:	2300      	movhi	r3, #0
 80029c6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d079      	beq.n	8002ac0 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d107      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x46c>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	0e9b      	lsrs	r3, r3, #26
 80029de:	3301      	adds	r3, #1
 80029e0:	069b      	lsls	r3, r3, #26
 80029e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029e6:	e015      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x498>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80029f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029f8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80029fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002a00:	2320      	movs	r3, #32
 8002a02:	e003      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	069b      	lsls	r3, r3, #26
 8002a10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d109      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x4b8>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	0e9b      	lsrs	r3, r3, #26
 8002a26:	3301      	adds	r3, #1
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a32:	e017      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x4e8>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a3c:	fa93 f3a3 	rbit	r3, r3
 8002a40:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002a42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a44:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002a46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002a4c:	2320      	movs	r3, #32
 8002a4e:	e003      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002a50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a52:	fab3 f383 	clz	r3, r3
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	3301      	adds	r3, #1
 8002a5a:	f003 031f 	and.w	r3, r3, #31
 8002a5e:	2101      	movs	r1, #1
 8002a60:	fa01 f303 	lsl.w	r3, r1, r3
 8002a64:	ea42 0103 	orr.w	r1, r2, r3
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10a      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x50e>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	0e9b      	lsrs	r3, r3, #26
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	f003 021f 	and.w	r2, r3, #31
 8002a80:	4613      	mov	r3, r2
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	4413      	add	r3, r2
 8002a86:	051b      	lsls	r3, r3, #20
 8002a88:	e018      	b.n	8002abc <HAL_ADC_ConfigChannel+0x540>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a92:	fa93 f3a3 	rbit	r3, r3
 8002a96:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002aa2:	2320      	movs	r3, #32
 8002aa4:	e003      	b.n	8002aae <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002aa8:	fab3 f383 	clz	r3, r3
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f003 021f 	and.w	r2, r3, #31
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	4413      	add	r3, r2
 8002aba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002abc:	430b      	orrs	r3, r1
 8002abe:	e080      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d107      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x560>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	0e9b      	lsrs	r3, r3, #26
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	069b      	lsls	r3, r3, #26
 8002ad6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ada:	e015      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x58c>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae4:	fa93 f3a3 	rbit	r3, r3
 8002ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aec:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002af4:	2320      	movs	r3, #32
 8002af6:	e003      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002afa:	fab3 f383 	clz	r3, r3
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	3301      	adds	r3, #1
 8002b02:	069b      	lsls	r3, r3, #26
 8002b04:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d109      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x5ac>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	0e9b      	lsrs	r3, r3, #26
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	2101      	movs	r1, #1
 8002b22:	fa01 f303 	lsl.w	r3, r1, r3
 8002b26:	e017      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x5dc>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	fa93 f3a3 	rbit	r3, r3
 8002b34:	61fb      	str	r3, [r7, #28]
  return result;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002b40:	2320      	movs	r3, #32
 8002b42:	e003      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	f003 031f 	and.w	r3, r3, #31
 8002b52:	2101      	movs	r1, #1
 8002b54:	fa01 f303 	lsl.w	r3, r1, r3
 8002b58:	ea42 0103 	orr.w	r1, r2, r3
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10d      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x608>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	0e9b      	lsrs	r3, r3, #26
 8002b6e:	3301      	adds	r3, #1
 8002b70:	f003 021f 	and.w	r2, r3, #31
 8002b74:	4613      	mov	r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	4413      	add	r3, r2
 8002b7a:	3b1e      	subs	r3, #30
 8002b7c:	051b      	lsls	r3, r3, #20
 8002b7e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b82:	e01d      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x644>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	fa93 f3a3 	rbit	r3, r3
 8002b90:	613b      	str	r3, [r7, #16]
  return result;
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d103      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002b9c:	2320      	movs	r3, #32
 8002b9e:	e005      	b.n	8002bac <HAL_ADC_ConfigChannel+0x630>
 8002ba0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	3301      	adds	r3, #1
 8002bae:	f003 021f 	and.w	r2, r3, #31
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3b1e      	subs	r3, #30
 8002bba:	051b      	lsls	r3, r3, #20
 8002bbc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc0:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	f7ff f91c 	bl	8001e04 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b45      	ldr	r3, [pc, #276]	@ (8002ce8 <HAL_ADC_ConfigChannel+0x76c>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d07c      	beq.n	8002cd2 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bd8:	4844      	ldr	r0, [pc, #272]	@ (8002cec <HAL_ADC_ConfigChannel+0x770>)
 8002bda:	f7ff f871 	bl	8001cc0 <LL_ADC_GetCommonPathInternalCh>
 8002bde:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002be2:	4843      	ldr	r0, [pc, #268]	@ (8002cf0 <HAL_ADC_ConfigChannel+0x774>)
 8002be4:	f7ff f9d4 	bl	8001f90 <LL_ADC_IsEnabled>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d15e      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a40      	ldr	r2, [pc, #256]	@ (8002cf4 <HAL_ADC_ConfigChannel+0x778>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d127      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x6cc>
 8002bf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002bfc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d121      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a39      	ldr	r2, [pc, #228]	@ (8002cf0 <HAL_ADC_ConfigChannel+0x774>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d161      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002c0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c12:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c16:	4619      	mov	r1, r3
 8002c18:	4834      	ldr	r0, [pc, #208]	@ (8002cec <HAL_ADC_ConfigChannel+0x770>)
 8002c1a:	f7ff f83e 	bl	8001c9a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c1e:	4b36      	ldr	r3, [pc, #216]	@ (8002cf8 <HAL_ADC_ConfigChannel+0x77c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	099b      	lsrs	r3, r3, #6
 8002c24:	4a35      	ldr	r2, [pc, #212]	@ (8002cfc <HAL_ADC_ConfigChannel+0x780>)
 8002c26:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2a:	099b      	lsrs	r3, r3, #6
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	4613      	mov	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4413      	add	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002c38:	e002      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f9      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c46:	e044      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a2c      	ldr	r2, [pc, #176]	@ (8002d00 <HAL_ADC_ConfigChannel+0x784>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d113      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x6fe>
 8002c52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c56:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10d      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a23      	ldr	r2, [pc, #140]	@ (8002cf0 <HAL_ADC_ConfigChannel+0x774>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d134      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002c68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c70:	4619      	mov	r1, r3
 8002c72:	481e      	ldr	r0, [pc, #120]	@ (8002cec <HAL_ADC_ConfigChannel+0x770>)
 8002c74:	f7ff f811 	bl	8001c9a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c78:	e02b      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a21      	ldr	r2, [pc, #132]	@ (8002d04 <HAL_ADC_ConfigChannel+0x788>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d126      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x756>
 8002c84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d120      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a16      	ldr	r2, [pc, #88]	@ (8002cf0 <HAL_ADC_ConfigChannel+0x774>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d11b      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002c9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4811      	ldr	r0, [pc, #68]	@ (8002cec <HAL_ADC_ConfigChannel+0x770>)
 8002ca6:	f7fe fff8 	bl	8001c9a <LL_ADC_SetCommonPathInternalCh>
 8002caa:	e012      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb0:	f043 0220 	orr.w	r2, r3, #32
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002cbe:	e008      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc4:	f043 0220 	orr.w	r2, r3, #32
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8002cda:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	37d8      	adds	r7, #216	@ 0xd8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	80080000 	.word	0x80080000
 8002cec:	50040300 	.word	0x50040300
 8002cf0:	50040000 	.word	0x50040000
 8002cf4:	c7520000 	.word	0xc7520000
 8002cf8:	20000014 	.word	0x20000014
 8002cfc:	053e2d63 	.word	0x053e2d63
 8002d00:	cb840000 	.word	0xcb840000
 8002d04:	80000001 	.word	0x80000001

08002d08 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff f984 	bl	800202c <LL_ADC_REG_IsConversionOngoing>
 8002d24:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff f9a5 	bl	800207a <LL_ADC_INJ_IsConversionOngoing>
 8002d30:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d103      	bne.n	8002d40 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 8098 	beq.w	8002e70 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d02a      	beq.n	8002da4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	7e5b      	ldrb	r3, [r3, #25]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d126      	bne.n	8002da4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	7e1b      	ldrb	r3, [r3, #24]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d122      	bne.n	8002da4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002d62:	e014      	b.n	8002d8e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	4a45      	ldr	r2, [pc, #276]	@ (8002e7c <ADC_ConversionStop+0x174>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d90d      	bls.n	8002d88 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d70:	f043 0210 	orr.w	r2, r3, #16
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d7c:	f043 0201 	orr.w	r2, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e074      	b.n	8002e72 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d98:	2b40      	cmp	r3, #64	@ 0x40
 8002d9a:	d1e3      	bne.n	8002d64 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2240      	movs	r2, #64	@ 0x40
 8002da2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d014      	beq.n	8002dd4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff f93c 	bl	800202c <LL_ADC_REG_IsConversionOngoing>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00c      	beq.n	8002dd4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff f8f9 	bl	8001fb6 <LL_ADC_IsDisableOngoing>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d104      	bne.n	8002dd4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff f918 	bl	8002004 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d014      	beq.n	8002e04 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff f94b 	bl	800207a <LL_ADC_INJ_IsConversionOngoing>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00c      	beq.n	8002e04 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff f8e1 	bl	8001fb6 <LL_ADC_IsDisableOngoing>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d104      	bne.n	8002e04 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff f927 	bl	8002052 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d005      	beq.n	8002e16 <ADC_ConversionStop+0x10e>
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d105      	bne.n	8002e1c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002e10:	230c      	movs	r3, #12
 8002e12:	617b      	str	r3, [r7, #20]
        break;
 8002e14:	e005      	b.n	8002e22 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002e16:	2308      	movs	r3, #8
 8002e18:	617b      	str	r3, [r7, #20]
        break;
 8002e1a:	e002      	b.n	8002e22 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002e1c:	2304      	movs	r3, #4
 8002e1e:	617b      	str	r3, [r7, #20]
        break;
 8002e20:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002e22:	f7fe fee3 	bl	8001bec <HAL_GetTick>
 8002e26:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e28:	e01b      	b.n	8002e62 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002e2a:	f7fe fedf 	bl	8001bec <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b05      	cmp	r3, #5
 8002e36:	d914      	bls.n	8002e62 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00d      	beq.n	8002e62 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e4a:	f043 0210 	orr.w	r2, r3, #16
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e56:	f043 0201 	orr.w	r2, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e007      	b.n	8002e72 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1dc      	bne.n	8002e2a <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3720      	adds	r7, #32
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	a33fffff 	.word	0xa33fffff

08002e80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff f87d 	bl	8001f90 <LL_ADC_IsEnabled>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d15e      	bne.n	8002f5a <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	4b30      	ldr	r3, [pc, #192]	@ (8002f64 <ADC_Enable+0xe4>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00d      	beq.n	8002ec6 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eae:	f043 0210 	orr.w	r2, r3, #16
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eba:	f043 0201 	orr.w	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e04a      	b.n	8002f5c <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff f838 	bl	8001f40 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002ed0:	4825      	ldr	r0, [pc, #148]	@ (8002f68 <ADC_Enable+0xe8>)
 8002ed2:	f7fe fef5 	bl	8001cc0 <LL_ADC_GetCommonPathInternalCh>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00f      	beq.n	8002f00 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ee0:	4b22      	ldr	r3, [pc, #136]	@ (8002f6c <ADC_Enable+0xec>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	099b      	lsrs	r3, r3, #6
 8002ee6:	4a22      	ldr	r2, [pc, #136]	@ (8002f70 <ADC_Enable+0xf0>)
 8002ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eec:	099b      	lsrs	r3, r3, #6
 8002eee:	3301      	adds	r3, #1
 8002ef0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002ef2:	e002      	b.n	8002efa <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1f9      	bne.n	8002ef4 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002f00:	f7fe fe74 	bl	8001bec <HAL_GetTick>
 8002f04:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f06:	e021      	b.n	8002f4c <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff f83f 	bl	8001f90 <LL_ADC_IsEnabled>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d104      	bne.n	8002f22 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff f80f 	bl	8001f40 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f22:	f7fe fe63 	bl	8001bec <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d90d      	bls.n	8002f4c <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f34:	f043 0210 	orr.w	r2, r3, #16
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f40:	f043 0201 	orr.w	r2, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e007      	b.n	8002f5c <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d1d6      	bne.n	8002f08 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	8000003f 	.word	0x8000003f
 8002f68:	50040300 	.word	0x50040300
 8002f6c:	20000014 	.word	0x20000014
 8002f70:	053e2d63 	.word	0x053e2d63

08002f74 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff f818 	bl	8001fb6 <LL_ADC_IsDisableOngoing>
 8002f86:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fe ffff 	bl	8001f90 <LL_ADC_IsEnabled>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d047      	beq.n	8003028 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d144      	bne.n	8003028 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 030d 	and.w	r3, r3, #13
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d10c      	bne.n	8002fc6 <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7fe ffd9 	bl	8001f68 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2203      	movs	r2, #3
 8002fbc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fbe:	f7fe fe15 	bl	8001bec <HAL_GetTick>
 8002fc2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fc4:	e029      	b.n	800301a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fca:	f043 0210 	orr.w	r2, r3, #16
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd6:	f043 0201 	orr.w	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e023      	b.n	800302a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002fe2:	f7fe fe03 	bl	8001bec <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d914      	bls.n	800301a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00d      	beq.n	800301a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003002:	f043 0210 	orr.w	r2, r3, #16
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300e:	f043 0201 	orr.w	r2, r3, #1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e007      	b.n	800302a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1dc      	bne.n	8002fe2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <LL_ADC_StartCalibration>:
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003044:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800304e:	4313      	orrs	r3, r2
 8003050:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	609a      	str	r2, [r3, #8]
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <LL_ADC_IsCalibrationOnGoing>:
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003074:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003078:	d101      	bne.n	800307e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003096:	2300      	movs	r3, #0
 8003098:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_ADCEx_Calibration_Start+0x1c>
 80030a4:	2302      	movs	r3, #2
 80030a6:	e04d      	b.n	8003144 <HAL_ADCEx_Calibration_Start+0xb8>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff ff5f 	bl	8002f74 <ADC_Disable>
 80030b6:	4603      	mov	r3, r0
 80030b8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d136      	bne.n	800312e <HAL_ADCEx_Calibration_Start+0xa2>
#if defined(ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80030c8:	f023 0302 	bic.w	r3, r3, #2
 80030cc:	f043 0202 	orr.w	r2, r3, #2
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	655a      	str	r2, [r3, #84]	@ 0x54
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);

#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6839      	ldr	r1, [r7, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff ffa9 	bl	8003032 <LL_ADC_StartCalibration>
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80030e0:	e014      	b.n	800310c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	3301      	adds	r3, #1
 80030e6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	4a18      	ldr	r2, [pc, #96]	@ (800314c <HAL_ADCEx_Calibration_Start+0xc0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d90d      	bls.n	800310c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f4:	f023 0312 	bic.w	r3, r3, #18
 80030f8:	f043 0210 	orr.w	r2, r3, #16
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e01b      	b.n	8003144 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff ffa7 	bl	8003064 <LL_ADC_IsCalibrationOnGoing>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1e2      	bne.n	80030e2 <HAL_ADCEx_Calibration_Start+0x56>
    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003120:	f023 0303 	bic.w	r3, r3, #3
 8003124:	f043 0201 	orr.w	r2, r3, #1
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	655a      	str	r2, [r3, #84]	@ 0x54
 800312c:	e005      	b.n	800313a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003132:	f043 0210 	orr.w	r2, r3, #16
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003142:	7bfb      	ldrb	r3, [r7, #15]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	00026aaa 	.word	0x00026aaa

08003150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003160:	4b0c      	ldr	r3, [pc, #48]	@ (8003194 <__NVIC_SetPriorityGrouping+0x44>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800316c:	4013      	ands	r3, r2
 800316e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003178:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800317c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003182:	4a04      	ldr	r2, [pc, #16]	@ (8003194 <__NVIC_SetPriorityGrouping+0x44>)
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	60d3      	str	r3, [r2, #12]
}
 8003188:	bf00      	nop
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	e000ed00 	.word	0xe000ed00

08003198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800319c:	4b04      	ldr	r3, [pc, #16]	@ (80031b0 <__NVIC_GetPriorityGrouping+0x18>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	0a1b      	lsrs	r3, r3, #8
 80031a2:	f003 0307 	and.w	r3, r3, #7
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	e000ed00 	.word	0xe000ed00

080031b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	db0b      	blt.n	80031de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031c6:	79fb      	ldrb	r3, [r7, #7]
 80031c8:	f003 021f 	and.w	r2, r3, #31
 80031cc:	4907      	ldr	r1, [pc, #28]	@ (80031ec <__NVIC_EnableIRQ+0x38>)
 80031ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	2001      	movs	r0, #1
 80031d6:	fa00 f202 	lsl.w	r2, r0, r2
 80031da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	e000e100 	.word	0xe000e100

080031f0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	db12      	blt.n	8003228 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003202:	79fb      	ldrb	r3, [r7, #7]
 8003204:	f003 021f 	and.w	r2, r3, #31
 8003208:	490a      	ldr	r1, [pc, #40]	@ (8003234 <__NVIC_DisableIRQ+0x44>)
 800320a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	2001      	movs	r0, #1
 8003212:	fa00 f202 	lsl.w	r2, r0, r2
 8003216:	3320      	adds	r3, #32
 8003218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800321c:	f3bf 8f4f 	dsb	sy
}
 8003220:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003222:	f3bf 8f6f 	isb	sy
}
 8003226:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	e000e100 	.word	0xe000e100

08003238 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	2b00      	cmp	r3, #0
 8003248:	db0c      	blt.n	8003264 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	f003 021f 	and.w	r2, r3, #31
 8003250:	4907      	ldr	r1, [pc, #28]	@ (8003270 <__NVIC_SetPendingIRQ+0x38>)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	2001      	movs	r0, #1
 800325a:	fa00 f202 	lsl.w	r2, r0, r2
 800325e:	3340      	adds	r3, #64	@ 0x40
 8003260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	e000e100 	.word	0xe000e100

08003274 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800327e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003282:	2b00      	cmp	r3, #0
 8003284:	db0c      	blt.n	80032a0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	f003 021f 	and.w	r2, r3, #31
 800328c:	4907      	ldr	r1, [pc, #28]	@ (80032ac <__NVIC_ClearPendingIRQ+0x38>)
 800328e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	2001      	movs	r0, #1
 8003296:	fa00 f202 	lsl.w	r2, r0, r2
 800329a:	3360      	adds	r3, #96	@ 0x60
 800329c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	e000e100 	.word	0xe000e100

080032b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	6039      	str	r1, [r7, #0]
 80032ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	db0a      	blt.n	80032da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	490c      	ldr	r1, [pc, #48]	@ (80032fc <__NVIC_SetPriority+0x4c>)
 80032ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ce:	0112      	lsls	r2, r2, #4
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	440b      	add	r3, r1
 80032d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032d8:	e00a      	b.n	80032f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	4908      	ldr	r1, [pc, #32]	@ (8003300 <__NVIC_SetPriority+0x50>)
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	3b04      	subs	r3, #4
 80032e8:	0112      	lsls	r2, r2, #4
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	440b      	add	r3, r1
 80032ee:	761a      	strb	r2, [r3, #24]
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	e000e100 	.word	0xe000e100
 8003300:	e000ed00 	.word	0xe000ed00

08003304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003304:	b480      	push	{r7}
 8003306:	b089      	sub	sp, #36	@ 0x24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f1c3 0307 	rsb	r3, r3, #7
 800331e:	2b04      	cmp	r3, #4
 8003320:	bf28      	it	cs
 8003322:	2304      	movcs	r3, #4
 8003324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	3304      	adds	r3, #4
 800332a:	2b06      	cmp	r3, #6
 800332c:	d902      	bls.n	8003334 <NVIC_EncodePriority+0x30>
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	3b03      	subs	r3, #3
 8003332:	e000      	b.n	8003336 <NVIC_EncodePriority+0x32>
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003338:	f04f 32ff 	mov.w	r2, #4294967295
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	43da      	mvns	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	401a      	ands	r2, r3
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800334c:	f04f 31ff 	mov.w	r1, #4294967295
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	fa01 f303 	lsl.w	r3, r1, r3
 8003356:	43d9      	mvns	r1, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800335c:	4313      	orrs	r3, r2
         );
}
 800335e:	4618      	mov	r0, r3
 8003360:	3724      	adds	r7, #36	@ 0x24
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
	...

0800336c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3b01      	subs	r3, #1
 8003378:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800337c:	d301      	bcc.n	8003382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800337e:	2301      	movs	r3, #1
 8003380:	e00f      	b.n	80033a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003382:	4a0a      	ldr	r2, [pc, #40]	@ (80033ac <SysTick_Config+0x40>)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3b01      	subs	r3, #1
 8003388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800338a:	210f      	movs	r1, #15
 800338c:	f04f 30ff 	mov.w	r0, #4294967295
 8003390:	f7ff ff8e 	bl	80032b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003394:	4b05      	ldr	r3, [pc, #20]	@ (80033ac <SysTick_Config+0x40>)
 8003396:	2200      	movs	r2, #0
 8003398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800339a:	4b04      	ldr	r3, [pc, #16]	@ (80033ac <SysTick_Config+0x40>)
 800339c:	2207      	movs	r2, #7
 800339e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	e000e010 	.word	0xe000e010

080033b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff fec9 	bl	8003150 <__NVIC_SetPriorityGrouping>
}
 80033be:	bf00      	nop
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b086      	sub	sp, #24
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	4603      	mov	r3, r0
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033d4:	f7ff fee0 	bl	8003198 <__NVIC_GetPriorityGrouping>
 80033d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	68b9      	ldr	r1, [r7, #8]
 80033de:	6978      	ldr	r0, [r7, #20]
 80033e0:	f7ff ff90 	bl	8003304 <NVIC_EncodePriority>
 80033e4:	4602      	mov	r2, r0
 80033e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ea:	4611      	mov	r1, r2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff ff5f 	bl	80032b0 <__NVIC_SetPriority>
}
 80033f2:	bf00      	nop
 80033f4:	3718      	adds	r7, #24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	4603      	mov	r3, r0
 8003402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff fed3 	bl	80031b4 <__NVIC_EnableIRQ>
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	4603      	mov	r3, r0
 800341e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff fee3 	bl	80031f0 <__NVIC_DisableIRQ>
}
 800342a:	bf00      	nop
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff ff96 	bl	800336c <SysTick_Config>
 8003440:	4603      	mov	r3, r0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b082      	sub	sp, #8
 800344e:	af00      	add	r7, sp, #0
 8003450:	4603      	mov	r3, r0
 8003452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff feed 	bl	8003238 <__NVIC_SetPendingIRQ>
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b082      	sub	sp, #8
 800346a:	af00      	add	r7, sp, #0
 800346c:	4603      	mov	r3, r0
 800346e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff fefd 	bl	8003274 <__NVIC_ClearPendingIRQ>
}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003492:	4b1c      	ldr	r3, [pc, #112]	@ (8003504 <HAL_FLASH_Program+0x80>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <HAL_FLASH_Program+0x1a>
 800349a:	2302      	movs	r3, #2
 800349c:	e02d      	b.n	80034fa <HAL_FLASH_Program+0x76>
 800349e:	4b19      	ldr	r3, [pc, #100]	@ (8003504 <HAL_FLASH_Program+0x80>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80034a4:	4b17      	ldr	r3, [pc, #92]	@ (8003504 <HAL_FLASH_Program+0x80>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80034aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80034ae:	f000 f869 	bl	8003584 <FLASH_WaitForLastOperation>
 80034b2:	4603      	mov	r3, r0
 80034b4:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80034b6:	7dfb      	ldrb	r3, [r7, #23]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d11a      	bne.n	80034f2 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d105      	bne.n	80034ce <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80034c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034c6:	68b8      	ldr	r0, [r7, #8]
 80034c8:	f000 f8ca 	bl	8003660 <FLASH_Program_DoubleWord>
 80034cc:	e004      	b.n	80034d8 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	4619      	mov	r1, r3
 80034d2:	68b8      	ldr	r0, [r7, #8]
 80034d4:	f007 fa24 	bl	800a920 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80034d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80034dc:	f000 f852 	bl	8003584 <FLASH_WaitForLastOperation>
 80034e0:	4603      	mov	r3, r0
 80034e2:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80034e4:	4b08      	ldr	r3, [pc, #32]	@ (8003508 <HAL_FLASH_Program+0x84>)
 80034e6:	695a      	ldr	r2, [r3, #20]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	43db      	mvns	r3, r3
 80034ec:	4906      	ldr	r1, [pc, #24]	@ (8003508 <HAL_FLASH_Program+0x84>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80034f2:	4b04      	ldr	r3, [pc, #16]	@ (8003504 <HAL_FLASH_Program+0x80>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80034f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20000354 	.word	0x20000354
 8003508:	58004000 	.word	0x58004000

0800350c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003516:	4b0b      	ldr	r3, [pc, #44]	@ (8003544 <HAL_FLASH_Unlock+0x38>)
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	2b00      	cmp	r3, #0
 800351c:	da0b      	bge.n	8003536 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800351e:	4b09      	ldr	r3, [pc, #36]	@ (8003544 <HAL_FLASH_Unlock+0x38>)
 8003520:	4a09      	ldr	r2, [pc, #36]	@ (8003548 <HAL_FLASH_Unlock+0x3c>)
 8003522:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003524:	4b07      	ldr	r3, [pc, #28]	@ (8003544 <HAL_FLASH_Unlock+0x38>)
 8003526:	4a09      	ldr	r2, [pc, #36]	@ (800354c <HAL_FLASH_Unlock+0x40>)
 8003528:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800352a:	4b06      	ldr	r3, [pc, #24]	@ (8003544 <HAL_FLASH_Unlock+0x38>)
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	2b00      	cmp	r3, #0
 8003530:	da01      	bge.n	8003536 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003536:	79fb      	ldrb	r3, [r7, #7]
}
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	58004000 	.word	0x58004000
 8003548:	45670123 	.word	0x45670123
 800354c:	cdef89ab 	.word	0xcdef89ab

08003550 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800355a:	4b09      	ldr	r3, [pc, #36]	@ (8003580 <HAL_FLASH_Lock+0x30>)
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	4a08      	ldr	r2, [pc, #32]	@ (8003580 <HAL_FLASH_Lock+0x30>)
 8003560:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003564:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8003566:	4b06      	ldr	r3, [pc, #24]	@ (8003580 <HAL_FLASH_Lock+0x30>)
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	2b00      	cmp	r3, #0
 800356c:	db01      	blt.n	8003572 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8003572:	79fb      	ldrb	r3, [r7, #7]
}
 8003574:	4618      	mov	r0, r3
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	58004000 	.word	0x58004000

08003584 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800358c:	f7fe fb2e 	bl	8001bec <HAL_GetTick>
 8003590:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003592:	e009      	b.n	80035a8 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003594:	f7fe fb2a 	bl	8001bec <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d801      	bhi.n	80035a8 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e053      	b.n	8003650 <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80035a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003658 <FLASH_WaitForLastOperation+0xd4>)
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035b4:	d0ee      	beq.n	8003594 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 80035b6:	4b28      	ldr	r3, [pc, #160]	@ (8003658 <FLASH_WaitForLastOperation+0xd4>)
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80035c6:	4b24      	ldr	r3, [pc, #144]	@ (8003658 <FLASH_WaitForLastOperation+0xd4>)
 80035c8:	2201      	movs	r2, #1
 80035ca:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d007      	beq.n	80035e6 <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80035d6:	4b20      	ldr	r3, [pc, #128]	@ (8003658 <FLASH_WaitForLastOperation+0xd4>)
 80035d8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80035dc:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80035e4:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 80035ec:	4013      	ands	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035f6:	d307      	bcc.n	8003608 <FLASH_WaitForLastOperation+0x84>
 80035f8:	4b17      	ldr	r3, [pc, #92]	@ (8003658 <FLASH_WaitForLastOperation+0xd4>)
 80035fa:	699a      	ldr	r2, [r3, #24]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8003602:	4915      	ldr	r1, [pc, #84]	@ (8003658 <FLASH_WaitForLastOperation+0xd4>)
 8003604:	4313      	orrs	r3, r2
 8003606:	618b      	str	r3, [r1, #24]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d004      	beq.n	800361c <FLASH_WaitForLastOperation+0x98>
 8003612:	4a11      	ldr	r2, [pc, #68]	@ (8003658 <FLASH_WaitForLastOperation+0xd4>)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800361a:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00e      	beq.n	8003640 <FLASH_WaitForLastOperation+0xbc>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8003622:	4a0e      	ldr	r2, [pc, #56]	@ (800365c <FLASH_WaitForLastOperation+0xd8>)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e011      	b.n	8003650 <FLASH_WaitForLastOperation+0xcc>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800362c:	f7fe fade 	bl	8001bec <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	429a      	cmp	r2, r3
 800363a:	d801      	bhi.n	8003640 <FLASH_WaitForLastOperation+0xbc>
    {
      return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e007      	b.n	8003650 <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8003640:	4b05      	ldr	r3, [pc, #20]	@ (8003658 <FLASH_WaitForLastOperation+0xd4>)
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003648:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800364c:	d0ee      	beq.n	800362c <FLASH_WaitForLastOperation+0xa8>
    }
  }

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	58004000 	.word	0x58004000
 800365c:	20000354 	.word	0x20000354

08003660 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800366c:	4b0e      	ldr	r3, [pc, #56]	@ (80036a8 <FLASH_Program_DoubleWord+0x48>)
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	4a0d      	ldr	r2, [pc, #52]	@ (80036a8 <FLASH_Program_DoubleWord+0x48>)
 8003672:	f043 0301 	orr.w	r3, r3, #1
 8003676:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800367e:	f3bf 8f6f 	isb	sy
}
 8003682:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003684:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	000a      	movs	r2, r1
 8003692:	2300      	movs	r3, #0
 8003694:	68f9      	ldr	r1, [r7, #12]
 8003696:	3104      	adds	r1, #4
 8003698:	4613      	mov	r3, r2
 800369a:	600b      	str	r3, [r1, #0]
}
 800369c:	bf00      	nop
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	58004000 	.word	0x58004000

080036ac <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80036b6:	4b24      	ldr	r3, [pc, #144]	@ (8003748 <HAL_FLASHEx_Erase+0x9c>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d101      	bne.n	80036c2 <HAL_FLASHEx_Erase+0x16>
 80036be:	2302      	movs	r3, #2
 80036c0:	e03d      	b.n	800373e <HAL_FLASHEx_Erase+0x92>
 80036c2:	4b21      	ldr	r3, [pc, #132]	@ (8003748 <HAL_FLASHEx_Erase+0x9c>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80036c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003748 <HAL_FLASHEx_Erase+0x9c>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80036ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80036d2:	f7ff ff57 	bl	8003584 <FLASH_WaitForLastOperation>
 80036d6:	4603      	mov	r3, r0
 80036d8:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80036da:	7bfb      	ldrb	r3, [r7, #15]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d12a      	bne.n	8003736 <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d124      	bne.n	8003732 <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	f04f 32ff 	mov.w	r2, #4294967295
 80036ee:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	60bb      	str	r3, [r7, #8]
 80036f6:	e012      	b.n	800371e <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 80036f8:	68b8      	ldr	r0, [r7, #8]
 80036fa:	f000 f827 	bl	800374c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80036fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003702:	f7ff ff3f 	bl	8003584 <FLASH_WaitForLastOperation>
 8003706:	4603      	mov	r3, r0
 8003708:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 800370a:	7bfb      	ldrb	r3, [r7, #15]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	601a      	str	r2, [r3, #0]
          break;
 8003716:	e00a      	b.n	800372e <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	3301      	adds	r3, #1
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	4413      	add	r3, r2
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	429a      	cmp	r2, r3
 800372c:	d3e4      	bcc.n	80036f8 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800372e:	f000 f86f 	bl	8003810 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003732:	f000 f825 	bl	8003780 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003736:	4b04      	ldr	r3, [pc, #16]	@ (8003748 <HAL_FLASHEx_Erase+0x9c>)
 8003738:	2200      	movs	r2, #0
 800373a:	701a      	strb	r2, [r3, #0]

  return status;
 800373c:	7bfb      	ldrb	r3, [r7, #15]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000354 	.word	0x20000354

0800374c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8003754:	4b09      	ldr	r3, [pc, #36]	@ (800377c <FLASH_PageErase+0x30>)
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4313      	orrs	r3, r2
 8003762:	4a06      	ldr	r2, [pc, #24]	@ (800377c <FLASH_PageErase+0x30>)
 8003764:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003768:	f043 0302 	orr.w	r3, r3, #2
 800376c:	6153      	str	r3, [r2, #20]
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	58004000 	.word	0x58004000

08003780 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 8003784:	4b21      	ldr	r3, [pc, #132]	@ (800380c <FLASH_FlushCaches+0x8c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800378c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003790:	d117      	bne.n	80037c2 <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003792:	4b1e      	ldr	r3, [pc, #120]	@ (800380c <FLASH_FlushCaches+0x8c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a1d      	ldr	r2, [pc, #116]	@ (800380c <FLASH_FlushCaches+0x8c>)
 8003798:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800379c:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800379e:	4b1b      	ldr	r3, [pc, #108]	@ (800380c <FLASH_FlushCaches+0x8c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a1a      	ldr	r2, [pc, #104]	@ (800380c <FLASH_FlushCaches+0x8c>)
 80037a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	4b18      	ldr	r3, [pc, #96]	@ (800380c <FLASH_FlushCaches+0x8c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a17      	ldr	r2, [pc, #92]	@ (800380c <FLASH_FlushCaches+0x8c>)
 80037b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037b4:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037b6:	4b15      	ldr	r3, [pc, #84]	@ (800380c <FLASH_FlushCaches+0x8c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a14      	ldr	r2, [pc, #80]	@ (800380c <FLASH_FlushCaches+0x8c>)
 80037bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037c0:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 80037c2:	4b12      	ldr	r3, [pc, #72]	@ (800380c <FLASH_FlushCaches+0x8c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ce:	d117      	bne.n	8003800 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80037d0:	4b0e      	ldr	r3, [pc, #56]	@ (800380c <FLASH_FlushCaches+0x8c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a0d      	ldr	r2, [pc, #52]	@ (800380c <FLASH_FlushCaches+0x8c>)
 80037d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037da:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80037dc:	4b0b      	ldr	r3, [pc, #44]	@ (800380c <FLASH_FlushCaches+0x8c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a0a      	ldr	r2, [pc, #40]	@ (800380c <FLASH_FlushCaches+0x8c>)
 80037e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	4b08      	ldr	r3, [pc, #32]	@ (800380c <FLASH_FlushCaches+0x8c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a07      	ldr	r2, [pc, #28]	@ (800380c <FLASH_FlushCaches+0x8c>)
 80037ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037f2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80037f4:	4b05      	ldr	r3, [pc, #20]	@ (800380c <FLASH_FlushCaches+0x8c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a04      	ldr	r2, [pc, #16]	@ (800380c <FLASH_FlushCaches+0x8c>)
 80037fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037fe:	6013      	str	r3, [r2, #0]
  }
}
 8003800:	bf00      	nop
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	58004000 	.word	0x58004000

08003810 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003814:	4b06      	ldr	r3, [pc, #24]	@ (8003830 <FLASH_AcknowledgePageErase+0x20>)
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	4a05      	ldr	r2, [pc, #20]	@ (8003830 <FLASH_AcknowledgePageErase+0x20>)
 800381a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800381e:	f023 0302 	bic.w	r3, r3, #2
 8003822:	6153      	str	r3, [r2, #20]
}
 8003824:	bf00      	nop
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	58004000 	.word	0x58004000

08003834 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003842:	e14c      	b.n	8003ade <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	2101      	movs	r1, #1
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	fa01 f303 	lsl.w	r3, r1, r3
 8003850:	4013      	ands	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 813e 	beq.w	8003ad8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 0303 	and.w	r3, r3, #3
 8003864:	2b01      	cmp	r3, #1
 8003866:	d005      	beq.n	8003874 <HAL_GPIO_Init+0x40>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 0303 	and.w	r3, r3, #3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d130      	bne.n	80038d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	2203      	movs	r2, #3
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43db      	mvns	r3, r3
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	4013      	ands	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038aa:	2201      	movs	r2, #1
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	43db      	mvns	r3, r3
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4013      	ands	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	091b      	lsrs	r3, r3, #4
 80038c0:	f003 0201 	and.w	r2, r3, #1
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	2b03      	cmp	r3, #3
 80038e0:	d017      	beq.n	8003912 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	2203      	movs	r2, #3
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43db      	mvns	r3, r3
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4013      	ands	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d123      	bne.n	8003966 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	08da      	lsrs	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3208      	adds	r2, #8
 8003926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800392a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	220f      	movs	r2, #15
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43db      	mvns	r3, r3
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4013      	ands	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	691a      	ldr	r2, [r3, #16]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4313      	orrs	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	08da      	lsrs	r2, r3, #3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3208      	adds	r2, #8
 8003960:	6939      	ldr	r1, [r7, #16]
 8003962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	2203      	movs	r2, #3
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	43db      	mvns	r3, r3
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4013      	ands	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f003 0203 	and.w	r2, r3, #3
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 8098 	beq.w	8003ad8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80039a8:	4a54      	ldr	r2, [pc, #336]	@ (8003afc <HAL_GPIO_Init+0x2c8>)
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	089b      	lsrs	r3, r3, #2
 80039ae:	3302      	adds	r3, #2
 80039b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	220f      	movs	r2, #15
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4013      	ands	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80039d2:	d019      	beq.n	8003a08 <HAL_GPIO_Init+0x1d4>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a4a      	ldr	r2, [pc, #296]	@ (8003b00 <HAL_GPIO_Init+0x2cc>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d013      	beq.n	8003a04 <HAL_GPIO_Init+0x1d0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a49      	ldr	r2, [pc, #292]	@ (8003b04 <HAL_GPIO_Init+0x2d0>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d00d      	beq.n	8003a00 <HAL_GPIO_Init+0x1cc>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a48      	ldr	r2, [pc, #288]	@ (8003b08 <HAL_GPIO_Init+0x2d4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d007      	beq.n	80039fc <HAL_GPIO_Init+0x1c8>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a47      	ldr	r2, [pc, #284]	@ (8003b0c <HAL_GPIO_Init+0x2d8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d101      	bne.n	80039f8 <HAL_GPIO_Init+0x1c4>
 80039f4:	2304      	movs	r3, #4
 80039f6:	e008      	b.n	8003a0a <HAL_GPIO_Init+0x1d6>
 80039f8:	2307      	movs	r3, #7
 80039fa:	e006      	b.n	8003a0a <HAL_GPIO_Init+0x1d6>
 80039fc:	2303      	movs	r3, #3
 80039fe:	e004      	b.n	8003a0a <HAL_GPIO_Init+0x1d6>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e002      	b.n	8003a0a <HAL_GPIO_Init+0x1d6>
 8003a04:	2301      	movs	r3, #1
 8003a06:	e000      	b.n	8003a0a <HAL_GPIO_Init+0x1d6>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	f002 0203 	and.w	r2, r2, #3
 8003a10:	0092      	lsls	r2, r2, #2
 8003a12:	4093      	lsls	r3, r2
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a1a:	4938      	ldr	r1, [pc, #224]	@ (8003afc <HAL_GPIO_Init+0x2c8>)
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	089b      	lsrs	r3, r3, #2
 8003a20:	3302      	adds	r3, #2
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a28:	4b39      	ldr	r3, [pc, #228]	@ (8003b10 <HAL_GPIO_Init+0x2dc>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	43db      	mvns	r3, r3
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4013      	ands	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a4c:	4a30      	ldr	r2, [pc, #192]	@ (8003b10 <HAL_GPIO_Init+0x2dc>)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003a52:	4b2f      	ldr	r3, [pc, #188]	@ (8003b10 <HAL_GPIO_Init+0x2dc>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a76:	4a26      	ldr	r2, [pc, #152]	@ (8003b10 <HAL_GPIO_Init+0x2dc>)
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a7c:	4b24      	ldr	r3, [pc, #144]	@ (8003b10 <HAL_GPIO_Init+0x2dc>)
 8003a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	43db      	mvns	r3, r3
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003aa2:	4a1b      	ldr	r2, [pc, #108]	@ (8003b10 <HAL_GPIO_Init+0x2dc>)
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8003aaa:	4b19      	ldr	r3, [pc, #100]	@ (8003b10 <HAL_GPIO_Init+0x2dc>)
 8003aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ad0:	4a0f      	ldr	r2, [pc, #60]	@ (8003b10 <HAL_GPIO_Init+0x2dc>)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	3301      	adds	r3, #1
 8003adc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f47f aeab 	bne.w	8003844 <HAL_GPIO_Init+0x10>
  }
}
 8003aee:	bf00      	nop
 8003af0:	bf00      	nop
 8003af2:	371c      	adds	r7, #28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	40010000 	.word	0x40010000
 8003b00:	48000400 	.word	0x48000400
 8003b04:	48000800 	.word	0x48000800
 8003b08:	48000c00 	.word	0x48000c00
 8003b0c:	48001000 	.word	0x48001000
 8003b10:	58000800 	.word	0x58000800

08003b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	807b      	strh	r3, [r7, #2]
 8003b20:	4613      	mov	r3, r2
 8003b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b24:	787b      	ldrb	r3, [r7, #1]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b2a:	887a      	ldrh	r2, [r7, #2]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b30:	e002      	b.n	8003b38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b32:	887a      	ldrh	r2, [r7, #2]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b56:	887a      	ldrh	r2, [r7, #2]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	041a      	lsls	r2, r3, #16
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	43d9      	mvns	r1, r3
 8003b62:	887b      	ldrh	r3, [r7, #2]
 8003b64:	400b      	ands	r3, r1
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	619a      	str	r2, [r3, #24]
}
 8003b6c:	bf00      	nop
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b82:	4b08      	ldr	r3, [pc, #32]	@ (8003ba4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d006      	beq.n	8003b9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b8e:	4a05      	ldr	r2, [pc, #20]	@ (8003ba4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b90:	88fb      	ldrh	r3, [r7, #6]
 8003b92:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b94:	88fb      	ldrh	r3, [r7, #6]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fd fc68 	bl	800146c <HAL_GPIO_EXTI_Callback>
  }
}
 8003b9c:	bf00      	nop
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	58000800 	.word	0x58000800

08003ba8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003bae:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd8 <HAL_HSEM_IRQHandler+0x30>)
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003bb4:	4b08      	ldr	r3, [pc, #32]	@ (8003bd8 <HAL_HSEM_IRQHandler+0x30>)
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	4906      	ldr	r1, [pc, #24]	@ (8003bd8 <HAL_HSEM_IRQHandler+0x30>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003bc2:	4a05      	ldr	r2, [pc, #20]	@ (8003bd8 <HAL_HSEM_IRQHandler+0x30>)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f807 	bl	8003bdc <HAL_HSEM_FreeCallback>
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	58001500 	.word	0x58001500

08003bdc <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e08d      	b.n	8003d1e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7fd fdae 	bl	8001778 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2224      	movs	r2, #36	@ 0x24
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0201 	bic.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d107      	bne.n	8003c6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c66:	609a      	str	r2, [r3, #8]
 8003c68:	e006      	b.n	8003c78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003c76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d108      	bne.n	8003c92 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c8e:	605a      	str	r2, [r3, #4]
 8003c90:	e007      	b.n	8003ca2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ca0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003cb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cb4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68da      	ldr	r2, [r3, #12]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691a      	ldr	r2, [r3, #16]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	69d9      	ldr	r1, [r3, #28]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1a      	ldr	r2, [r3, #32]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0201 	orr.w	r2, r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d005      	beq.n	8003d52 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	68f9      	ldr	r1, [r7, #12]
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	4798      	blx	r3
  }
}
 8003d52:	bf00      	nop
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b20      	cmp	r3, #32
 8003d6e:	d138      	bne.n	8003de2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e032      	b.n	8003de4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2224      	movs	r2, #36	@ 0x24
 8003d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0201 	bic.w	r2, r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003dac:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6819      	ldr	r1, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0201 	orr.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	e000      	b.n	8003de4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003de2:	2302      	movs	r3, #2
  }
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	d139      	bne.n	8003e7a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e033      	b.n	8003e7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2224      	movs	r2, #36	@ 0x24
 8003e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0201 	bic.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e42:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	021b      	lsls	r3, r3, #8
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f042 0201 	orr.w	r2, r2, #1
 8003e64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	e000      	b.n	8003e7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e7a:	2302      	movs	r3, #2
  }
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d01e      	beq.n	8003ed8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003e9a:	4b13      	ldr	r3, [pc, #76]	@ (8003ee8 <HAL_IPCC_Init+0x60>)
 8003e9c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d102      	bne.n	8003eb0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fd fcb4 	bl	8001818 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003eb0:	68b8      	ldr	r0, [r7, #8]
 8003eb2:	f000 f85b 	bl	8003f6c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f82c 	bl	8003f20 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8003ed6:	e001      	b.n	8003edc <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	58000c00 	.word	0x58000c00

08003eec <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003efa:	bf00      	nop
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b085      	sub	sp, #20
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	60f8      	str	r0, [r7, #12]
 8003f0e:	60b9      	str	r1, [r7, #8]
 8003f10:	4613      	mov	r3, r2
 8003f12:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003f14:	bf00      	nop
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	e00f      	b.n	8003f4e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	4a0b      	ldr	r2, [pc, #44]	@ (8003f64 <IPCC_SetDefaultCallbacks+0x44>)
 8003f38:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	3306      	adds	r3, #6
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	4a08      	ldr	r2, [pc, #32]	@ (8003f68 <IPCC_SetDefaultCallbacks+0x48>)
 8003f46:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b05      	cmp	r3, #5
 8003f52:	d9ec      	bls.n	8003f2e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003f54:	bf00      	nop
 8003f56:	bf00      	nop
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	08003eed 	.word	0x08003eed
 8003f68:	08003f07 	.word	0x08003f07

08003f6c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8003f80:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	223f      	movs	r2, #63	@ 0x3f
 8003f86:	609a      	str	r2, [r3, #8]
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f98:	4b05      	ldr	r3, [pc, #20]	@ (8003fb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a04      	ldr	r2, [pc, #16]	@ (8003fb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fa2:	6013      	str	r3, [r2, #0]
}
 8003fa4:	bf00      	nop
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	58000400 	.word	0x58000400

08003fb4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003fb8:	4b04      	ldr	r3, [pc, #16]	@ (8003fcc <HAL_PWREx_GetVoltageRange+0x18>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	58000400 	.word	0x58000400

08003fd0 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8003fda:	4b11      	ldr	r3, [pc, #68]	@ (8004020 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f023 0307 	bic.w	r3, r3, #7
 8003fe2:	4a0f      	ldr	r2, [pc, #60]	@ (8004020 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8003fe4:	f043 0302 	orr.w	r3, r3, #2
 8003fe8:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003fea:	4b0e      	ldr	r3, [pc, #56]	@ (8004024 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	4a0d      	ldr	r2, [pc, #52]	@ (8004024 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8003ff0:	f043 0304 	orr.w	r3, r3, #4
 8003ff4:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8003ff6:	79fb      	ldrb	r3, [r7, #7]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d101      	bne.n	8004000 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003ffc:	bf30      	wfi
 8003ffe:	e002      	b.n	8004006 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004000:	bf40      	sev
    __WFE();
 8004002:	bf20      	wfe
    __WFE();
 8004004:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004006:	4b07      	ldr	r3, [pc, #28]	@ (8004024 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	4a06      	ldr	r2, [pc, #24]	@ (8004024 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800400c:	f023 0304 	bic.w	r3, r3, #4
 8004010:	6113      	str	r3, [r2, #16]
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	58000400 	.word	0x58000400
 8004024:	e000ed00 	.word	0xe000ed00

08004028 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800402c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004036:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800403a:	d101      	bne.n	8004040 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800403c:	2301      	movs	r3, #1
 800403e:	e000      	b.n	8004042 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <LL_RCC_HSE_Enable>:
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004050:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800405a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800405e:	6013      	str	r3, [r2, #0]
}
 8004060:	bf00      	nop
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <LL_RCC_HSE_Disable>:
{
 800406a:	b480      	push	{r7}
 800406c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800406e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004078:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800407c:	6013      	str	r3, [r2, #0]
}
 800407e:	bf00      	nop
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <LL_RCC_HSE_IsReady>:
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800408c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004096:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800409a:	d101      	bne.n	80040a0 <LL_RCC_HSE_IsReady+0x18>
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <LL_RCC_HSE_IsReady+0x1a>
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <LL_RCC_HSI_Enable>:
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80040b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040be:	6013      	str	r3, [r2, #0]
}
 80040c0:	bf00      	nop
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <LL_RCC_HSI_Disable>:
{
 80040ca:	b480      	push	{r7}
 80040cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80040ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040dc:	6013      	str	r3, [r2, #0]
}
 80040de:	bf00      	nop
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <LL_RCC_HSI_IsReady>:
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80040ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040fa:	d101      	bne.n	8004100 <LL_RCC_HSI_IsReady+0x18>
 80040fc:	2301      	movs	r3, #1
 80040fe:	e000      	b.n	8004102 <LL_RCC_HSI_IsReady+0x1a>
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <LL_RCC_HSI_SetCalibTrimming>:
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004114:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	061b      	lsls	r3, r3, #24
 8004122:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004126:	4313      	orrs	r3, r2
 8004128:	604b      	str	r3, [r1, #4]
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <LL_RCC_HSI48_Enable>:
{
 8004136:	b480      	push	{r7}
 8004138:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800413a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800413e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004142:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004146:	f043 0301 	orr.w	r3, r3, #1
 800414a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800414e:	bf00      	nop
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <LL_RCC_HSI48_Disable>:
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800415c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004160:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004164:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004168:	f023 0301 	bic.w	r3, r3, #1
 800416c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8004170:	bf00      	nop
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <LL_RCC_HSI48_IsReady>:
{
 800417a:	b480      	push	{r7}
 800417c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800417e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004182:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b02      	cmp	r3, #2
 800418c:	d101      	bne.n	8004192 <LL_RCC_HSI48_IsReady+0x18>
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <LL_RCC_HSI48_IsReady+0x1a>
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <LL_RCC_LSE_Enable>:
{
 800419e:	b480      	push	{r7}
 80041a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80041a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041ae:	f043 0301 	orr.w	r3, r3, #1
 80041b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80041b6:	bf00      	nop
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <LL_RCC_LSE_Disable>:
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80041c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041d0:	f023 0301 	bic.w	r3, r3, #1
 80041d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80041d8:	bf00      	nop
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <LL_RCC_LSE_EnableBypass>:
{
 80041e2:	b480      	push	{r7}
 80041e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80041e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041f2:	f043 0304 	orr.w	r3, r3, #4
 80041f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80041fa:	bf00      	nop
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <LL_RCC_LSE_DisableBypass>:
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004208:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800420c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004210:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004214:	f023 0304 	bic.w	r3, r3, #4
 8004218:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800421c:	bf00      	nop
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <LL_RCC_LSE_IsReady>:
{
 8004226:	b480      	push	{r7}
 8004228:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800422a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800422e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b02      	cmp	r3, #2
 8004238:	d101      	bne.n	800423e <LL_RCC_LSE_IsReady+0x18>
 800423a:	2301      	movs	r3, #1
 800423c:	e000      	b.n	8004240 <LL_RCC_LSE_IsReady+0x1a>
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <LL_RCC_LSI1_Enable>:
{
 800424a:	b480      	push	{r7}
 800424c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800424e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004252:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004256:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800425a:	f043 0301 	orr.w	r3, r3, #1
 800425e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004262:	bf00      	nop
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <LL_RCC_LSI1_Disable>:
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004270:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004274:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004278:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800427c:	f023 0301 	bic.w	r3, r3, #1
 8004280:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004284:	bf00      	nop
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <LL_RCC_LSI1_IsReady>:
{
 800428e:	b480      	push	{r7}
 8004290:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004292:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004296:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d101      	bne.n	80042a6 <LL_RCC_LSI1_IsReady+0x18>
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <LL_RCC_LSI1_IsReady+0x1a>
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <LL_RCC_LSI2_Enable>:
{
 80042b2:	b480      	push	{r7}
 80042b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80042b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042c2:	f043 0304 	orr.w	r3, r3, #4
 80042c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80042ca:	bf00      	nop
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <LL_RCC_LSI2_Disable>:
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80042d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042e4:	f023 0304 	bic.w	r3, r3, #4
 80042e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80042ec:	bf00      	nop
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <LL_RCC_LSI2_IsReady>:
{
 80042f6:	b480      	push	{r7}
 80042f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80042fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b08      	cmp	r3, #8
 8004308:	d101      	bne.n	800430e <LL_RCC_LSI2_IsReady+0x18>
 800430a:	2301      	movs	r3, #1
 800430c:	e000      	b.n	8004310 <LL_RCC_LSI2_IsReady+0x1a>
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <LL_RCC_LSI2_SetTrimming>:
{
 800431a:	b480      	push	{r7}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004322:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004326:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800432a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	021b      	lsls	r3, r3, #8
 8004332:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <LL_RCC_MSI_Enable>:
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800434c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004356:	f043 0301 	orr.w	r3, r3, #1
 800435a:	6013      	str	r3, [r2, #0]
}
 800435c:	bf00      	nop
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <LL_RCC_MSI_Disable>:
{
 8004366:	b480      	push	{r7}
 8004368:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800436a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004374:	f023 0301 	bic.w	r3, r3, #1
 8004378:	6013      	str	r3, [r2, #0]
}
 800437a:	bf00      	nop
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <LL_RCC_MSI_IsReady>:
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004388:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b02      	cmp	r3, #2
 8004394:	d101      	bne.n	800439a <LL_RCC_MSI_IsReady+0x16>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <LL_RCC_MSI_IsReady+0x18>
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <LL_RCC_MSI_SetRange>:
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80043ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4313      	orrs	r3, r2
 80043c0:	600b      	str	r3, [r1, #0]
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <LL_RCC_MSI_GetRange>:
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80043d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043de:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2bb0      	cmp	r3, #176	@ 0xb0
 80043e4:	d901      	bls.n	80043ea <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80043e6:	23b0      	movs	r3, #176	@ 0xb0
 80043e8:	607b      	str	r3, [r7, #4]
  return msiRange;
 80043ea:	687b      	ldr	r3, [r7, #4]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	021b      	lsls	r3, r3, #8
 800440e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004412:	4313      	orrs	r3, r2
 8004414:	604b      	str	r3, [r1, #4]
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <LL_RCC_SetSysClkSource>:
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800442a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f023 0203 	bic.w	r2, r3, #3
 8004434:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4313      	orrs	r3, r2
 800443c:	608b      	str	r3, [r1, #8]
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <LL_RCC_GetSysClkSource>:
{
 800444a:	b480      	push	{r7}
 800444c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800444e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 030c 	and.w	r3, r3, #12
}
 8004458:	4618      	mov	r0, r3
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <LL_RCC_SetAHBPrescaler>:
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800446a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004474:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4313      	orrs	r3, r2
 800447c:	608b      	str	r3, [r1, #8]
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <LL_C2_RCC_SetAHBPrescaler>:
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004492:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004496:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800449a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800449e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <LL_RCC_SetAHB4Prescaler>:
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80044be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80044c6:	f023 020f 	bic.w	r2, r3, #15
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	091b      	lsrs	r3, r3, #4
 80044ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <LL_RCC_SetAPB1Prescaler>:
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80044ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	608b      	str	r3, [r1, #8]
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <LL_RCC_SetAPB2Prescaler>:
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004514:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800451e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4313      	orrs	r3, r2
 8004526:	608b      	str	r3, [r1, #8]
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <LL_RCC_GetAHBPrescaler>:
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004542:	4618      	mov	r0, r3
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <LL_RCC_GetAHB4Prescaler>:
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004554:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800455e:	4618      	mov	r0, r3
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800456c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004576:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800457a:	6013      	str	r3, [r2, #0]
}
 800457c:	bf00      	nop
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004586:	b480      	push	{r7}
 8004588:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800458a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004594:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004598:	6013      	str	r3, [r2, #0]
}
 800459a:	bf00      	nop
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80045a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045b6:	d101      	bne.n	80045bc <LL_RCC_PLL_IsReady+0x18>
 80045b8:	2301      	movs	r3, #1
 80045ba:	e000      	b.n	80045be <LL_RCC_PLL_IsReady+0x1a>
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80045cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	0a1b      	lsrs	r3, r3, #8
 80045d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80045d8:	4618      	mov	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80045e2:	b480      	push	{r7}
 80045e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80045e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80045fa:	b480      	push	{r7}
 80045fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80045fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8004608:	4618      	mov	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004612:	b480      	push	{r7}
 8004614:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004616:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0303 	and.w	r3, r3, #3
}
 8004620:	4618      	mov	r0, r3
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800462a:	b480      	push	{r7}
 800462c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800462e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800463c:	d101      	bne.n	8004642 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800464e:	b480      	push	{r7}
 8004650:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004652:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004656:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800465a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800465e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004662:	d101      	bne.n	8004668 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004664:	2301      	movs	r3, #1
 8004666:	e000      	b.n	800466a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004678:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800467c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004680:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004688:	d101      	bne.n	800468e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800469a:	b480      	push	{r7}
 800469c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800469e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046ac:	d101      	bne.n	80046b2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80046be:	b480      	push	{r7}
 80046c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80046c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046d0:	d101      	bne.n	80046d6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
	...

080046e4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046e4:	b590      	push	{r4, r7, lr}
 80046e6:	b08d      	sub	sp, #52	@ 0x34
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e363      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 808d 	beq.w	800481e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004704:	f7ff fea1 	bl	800444a <LL_RCC_GetSysClkSource>
 8004708:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800470a:	f7ff ff82 	bl	8004612 <LL_RCC_PLL_GetMainSource>
 800470e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004712:	2b00      	cmp	r3, #0
 8004714:	d005      	beq.n	8004722 <HAL_RCC_OscConfig+0x3e>
 8004716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004718:	2b0c      	cmp	r3, #12
 800471a:	d147      	bne.n	80047ac <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800471c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800471e:	2b01      	cmp	r3, #1
 8004720:	d144      	bne.n	80047ac <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e347      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8004732:	f7ff fe4c 	bl	80043ce <LL_RCC_MSI_GetRange>
 8004736:	4603      	mov	r3, r0
 8004738:	429c      	cmp	r4, r3
 800473a:	d914      	bls.n	8004766 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004740:	4618      	mov	r0, r3
 8004742:	f000 fd03 	bl	800514c <RCC_SetFlashLatencyFromMSIRange>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e336      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff fe26 	bl	80043a6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	4618      	mov	r0, r3
 8004760:	f7ff fe4a 	bl	80043f8 <LL_RCC_MSI_SetCalibTrimming>
 8004764:	e013      	b.n	800478e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff fe1b 	bl	80043a6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff fe3f 	bl	80043f8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fce4 	bl	800514c <RCC_SetFlashLatencyFromMSIRange>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e317      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800478e:	f000 fcc9 	bl	8005124 <HAL_RCC_GetHCLKFreq>
 8004792:	4603      	mov	r3, r0
 8004794:	4aa4      	ldr	r2, [pc, #656]	@ (8004a28 <HAL_RCC_OscConfig+0x344>)
 8004796:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004798:	4ba4      	ldr	r3, [pc, #656]	@ (8004a2c <HAL_RCC_OscConfig+0x348>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4618      	mov	r0, r3
 800479e:	f7fd f9d7 	bl	8001b50 <HAL_InitTick>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d039      	beq.n	800481c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e308      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d01e      	beq.n	80047f2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80047b4:	f7ff fdc8 	bl	8004348 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047b8:	f7fd fa18 	bl	8001bec <HAL_GetTick>
 80047bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047c0:	f7fd fa14 	bl	8001bec <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e2f5      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80047d2:	f7ff fdd7 	bl	8004384 <LL_RCC_MSI_IsReady>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0f1      	beq.n	80047c0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff fde0 	bl	80043a6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7ff fe04 	bl	80043f8 <LL_RCC_MSI_SetCalibTrimming>
 80047f0:	e015      	b.n	800481e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80047f2:	f7ff fdb8 	bl	8004366 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047f6:	f7fd f9f9 	bl	8001bec <HAL_GetTick>
 80047fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80047fc:	e008      	b.n	8004810 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047fe:	f7fd f9f5 	bl	8001bec <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e2d6      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004810:	f7ff fdb8 	bl	8004384 <LL_RCC_MSI_IsReady>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f1      	bne.n	80047fe <HAL_RCC_OscConfig+0x11a>
 800481a:	e000      	b.n	800481e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800481c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d047      	beq.n	80048ba <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800482a:	f7ff fe0e 	bl	800444a <LL_RCC_GetSysClkSource>
 800482e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004830:	f7ff feef 	bl	8004612 <LL_RCC_PLL_GetMainSource>
 8004834:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	2b08      	cmp	r3, #8
 800483a:	d005      	beq.n	8004848 <HAL_RCC_OscConfig+0x164>
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	2b0c      	cmp	r3, #12
 8004840:	d108      	bne.n	8004854 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	2b03      	cmp	r3, #3
 8004846:	d105      	bne.n	8004854 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d134      	bne.n	80048ba <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e2b4      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800485c:	d102      	bne.n	8004864 <HAL_RCC_OscConfig+0x180>
 800485e:	f7ff fbf5 	bl	800404c <LL_RCC_HSE_Enable>
 8004862:	e001      	b.n	8004868 <HAL_RCC_OscConfig+0x184>
 8004864:	f7ff fc01 	bl	800406a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d012      	beq.n	8004896 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004870:	f7fd f9bc 	bl	8001bec <HAL_GetTick>
 8004874:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004878:	f7fd f9b8 	bl	8001bec <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b64      	cmp	r3, #100	@ 0x64
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e299      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800488a:	f7ff fbfd 	bl	8004088 <LL_RCC_HSE_IsReady>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0f1      	beq.n	8004878 <HAL_RCC_OscConfig+0x194>
 8004894:	e011      	b.n	80048ba <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004896:	f7fd f9a9 	bl	8001bec <HAL_GetTick>
 800489a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800489c:	e008      	b.n	80048b0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800489e:	f7fd f9a5 	bl	8001bec <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b64      	cmp	r3, #100	@ 0x64
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e286      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80048b0:	f7ff fbea 	bl	8004088 <LL_RCC_HSE_IsReady>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f1      	bne.n	800489e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d04c      	beq.n	8004960 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048c6:	f7ff fdc0 	bl	800444a <LL_RCC_GetSysClkSource>
 80048ca:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048cc:	f7ff fea1 	bl	8004612 <LL_RCC_PLL_GetMainSource>
 80048d0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d005      	beq.n	80048e4 <HAL_RCC_OscConfig+0x200>
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	2b0c      	cmp	r3, #12
 80048dc:	d10e      	bne.n	80048fc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d10b      	bne.n	80048fc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e266      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff fc09 	bl	800410c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80048fa:	e031      	b.n	8004960 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d019      	beq.n	8004938 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004904:	f7ff fbd2 	bl	80040ac <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004908:	f7fd f970 	bl	8001bec <HAL_GetTick>
 800490c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004910:	f7fd f96c 	bl	8001bec <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e24d      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004922:	f7ff fbe1 	bl	80040e8 <LL_RCC_HSI_IsReady>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0f1      	beq.n	8004910 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff fbeb 	bl	800410c <LL_RCC_HSI_SetCalibTrimming>
 8004936:	e013      	b.n	8004960 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004938:	f7ff fbc7 	bl	80040ca <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493c:	f7fd f956 	bl	8001bec <HAL_GetTick>
 8004940:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004944:	f7fd f952 	bl	8001bec <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e233      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004956:	f7ff fbc7 	bl	80040e8 <LL_RCC_HSI_IsReady>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1f1      	bne.n	8004944 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0308 	and.w	r3, r3, #8
 8004968:	2b00      	cmp	r3, #0
 800496a:	d106      	bne.n	800497a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 80a3 	beq.w	8004ac0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d076      	beq.n	8004a70 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0310 	and.w	r3, r3, #16
 800498a:	2b00      	cmp	r3, #0
 800498c:	d046      	beq.n	8004a1c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800498e:	f7ff fc7e 	bl	800428e <LL_RCC_LSI1_IsReady>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d113      	bne.n	80049c0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004998:	f7ff fc57 	bl	800424a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800499c:	f7fd f926 	bl	8001bec <HAL_GetTick>
 80049a0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80049a4:	f7fd f922 	bl	8001bec <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e203      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80049b6:	f7ff fc6a 	bl	800428e <LL_RCC_LSI1_IsReady>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0f1      	beq.n	80049a4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80049c0:	f7ff fc77 	bl	80042b2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c4:	f7fd f912 	bl	8001bec <HAL_GetTick>
 80049c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80049cc:	f7fd f90e 	bl	8001bec <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e1ef      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80049de:	f7ff fc8a 	bl	80042f6 <LL_RCC_LSI2_IsReady>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0f1      	beq.n	80049cc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff fc94 	bl	800431a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80049f2:	f7ff fc3b 	bl	800426c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f6:	f7fd f8f9 	bl	8001bec <HAL_GetTick>
 80049fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80049fc:	e008      	b.n	8004a10 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80049fe:	f7fd f8f5 	bl	8001bec <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e1d6      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004a10:	f7ff fc3d 	bl	800428e <LL_RCC_LSI1_IsReady>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1f1      	bne.n	80049fe <HAL_RCC_OscConfig+0x31a>
 8004a1a:	e051      	b.n	8004ac0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004a1c:	f7ff fc15 	bl	800424a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a20:	f7fd f8e4 	bl	8001bec <HAL_GetTick>
 8004a24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004a26:	e00c      	b.n	8004a42 <HAL_RCC_OscConfig+0x35e>
 8004a28:	20000014 	.word	0x20000014
 8004a2c:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004a30:	f7fd f8dc 	bl	8001bec <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e1bd      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004a42:	f7ff fc24 	bl	800428e <LL_RCC_LSI1_IsReady>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0f1      	beq.n	8004a30 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004a4c:	f7ff fc42 	bl	80042d4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004a50:	e008      	b.n	8004a64 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004a52:	f7fd f8cb 	bl	8001bec <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b03      	cmp	r3, #3
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e1ac      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004a64:	f7ff fc47 	bl	80042f6 <LL_RCC_LSI2_IsReady>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f1      	bne.n	8004a52 <HAL_RCC_OscConfig+0x36e>
 8004a6e:	e027      	b.n	8004ac0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004a70:	f7ff fc30 	bl	80042d4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a74:	f7fd f8ba 	bl	8001bec <HAL_GetTick>
 8004a78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004a7c:	f7fd f8b6 	bl	8001bec <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b03      	cmp	r3, #3
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e197      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004a8e:	f7ff fc32 	bl	80042f6 <LL_RCC_LSI2_IsReady>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1f1      	bne.n	8004a7c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004a98:	f7ff fbe8 	bl	800426c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a9c:	f7fd f8a6 	bl	8001bec <HAL_GetTick>
 8004aa0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004aa4:	f7fd f8a2 	bl	8001bec <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e183      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004ab6:	f7ff fbea 	bl	800428e <LL_RCC_LSI1_IsReady>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1f1      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d05b      	beq.n	8004b84 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004acc:	4ba7      	ldr	r3, [pc, #668]	@ (8004d6c <HAL_RCC_OscConfig+0x688>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d114      	bne.n	8004b02 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004ad8:	f7ff fa5c 	bl	8003f94 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004adc:	f7fd f886 	bl	8001bec <HAL_GetTick>
 8004ae0:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ae4:	f7fd f882 	bl	8001bec <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e163      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004af6:	4b9d      	ldr	r3, [pc, #628]	@ (8004d6c <HAL_RCC_OscConfig+0x688>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0f0      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d102      	bne.n	8004b10 <HAL_RCC_OscConfig+0x42c>
 8004b0a:	f7ff fb48 	bl	800419e <LL_RCC_LSE_Enable>
 8004b0e:	e00c      	b.n	8004b2a <HAL_RCC_OscConfig+0x446>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	2b05      	cmp	r3, #5
 8004b16:	d104      	bne.n	8004b22 <HAL_RCC_OscConfig+0x43e>
 8004b18:	f7ff fb63 	bl	80041e2 <LL_RCC_LSE_EnableBypass>
 8004b1c:	f7ff fb3f 	bl	800419e <LL_RCC_LSE_Enable>
 8004b20:	e003      	b.n	8004b2a <HAL_RCC_OscConfig+0x446>
 8004b22:	f7ff fb4d 	bl	80041c0 <LL_RCC_LSE_Disable>
 8004b26:	f7ff fb6d 	bl	8004204 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d014      	beq.n	8004b5c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b32:	f7fd f85b 	bl	8001bec <HAL_GetTick>
 8004b36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004b38:	e00a      	b.n	8004b50 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b3a:	f7fd f857 	bl	8001bec <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e136      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004b50:	f7ff fb69 	bl	8004226 <LL_RCC_LSE_IsReady>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0ef      	beq.n	8004b3a <HAL_RCC_OscConfig+0x456>
 8004b5a:	e013      	b.n	8004b84 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b5c:	f7fd f846 	bl	8001bec <HAL_GetTick>
 8004b60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004b62:	e00a      	b.n	8004b7a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b64:	f7fd f842 	bl	8001bec <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e121      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004b7a:	f7ff fb54 	bl	8004226 <LL_RCC_LSE_IsReady>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1ef      	bne.n	8004b64 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d02c      	beq.n	8004bea <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d014      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b98:	f7ff facd 	bl	8004136 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b9c:	f7fd f826 	bl	8001bec <HAL_GetTick>
 8004ba0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ba4:	f7fd f822 	bl	8001bec <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e103      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004bb6:	f7ff fae0 	bl	800417a <LL_RCC_HSI48_IsReady>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0f1      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x4c0>
 8004bc0:	e013      	b.n	8004bea <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bc2:	f7ff fac9 	bl	8004158 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc6:	f7fd f811 	bl	8001bec <HAL_GetTick>
 8004bca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bce:	f7fd f80d 	bl	8001bec <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e0ee      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004be0:	f7ff facb 	bl	800417a <LL_RCC_HSI48_IsReady>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f1      	bne.n	8004bce <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 80e4 	beq.w	8004dbc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bf4:	f7ff fc29 	bl	800444a <LL_RCC_GetSysClkSource>
 8004bf8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004bfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	f040 80b4 	bne.w	8004d74 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f003 0203 	and.w	r2, r3, #3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d123      	bne.n	8004c62 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d11c      	bne.n	8004c62 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	0a1b      	lsrs	r3, r3, #8
 8004c2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d114      	bne.n	8004c62 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d10d      	bne.n	8004c62 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d106      	bne.n	8004c62 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d05d      	beq.n	8004d1e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	2b0c      	cmp	r3, #12
 8004c66:	d058      	beq.n	8004d1a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e0a1      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004c7a:	f7ff fc84 	bl	8004586 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c7e:	f7fc ffb5 	bl	8001bec <HAL_GetTick>
 8004c82:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c86:	f7fc ffb1 	bl	8001bec <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e092      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1ef      	bne.n	8004c86 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ca6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	4b30      	ldr	r3, [pc, #192]	@ (8004d70 <HAL_RCC_OscConfig+0x68c>)
 8004cae:	4013      	ands	r3, r2
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004cb8:	4311      	orrs	r1, r2
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004cbe:	0212      	lsls	r2, r2, #8
 8004cc0:	4311      	orrs	r1, r2
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004cc6:	4311      	orrs	r1, r2
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004ccc:	4311      	orrs	r1, r2
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004cdc:	f7ff fc44 	bl	8004568 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ce0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004cea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004cf0:	f7fc ff7c 	bl	8001bec <HAL_GetTick>
 8004cf4:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf8:	f7fc ff78 	bl	8001bec <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e059      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0ef      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d18:	e050      	b.n	8004dbc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e04f      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d147      	bne.n	8004dbc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d2c:	f7ff fc1c 	bl	8004568 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d40:	f7fc ff54 	bl	8001bec <HAL_GetTick>
 8004d44:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d48:	f7fc ff50 	bl	8001bec <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e031      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0ef      	beq.n	8004d48 <HAL_RCC_OscConfig+0x664>
 8004d68:	e028      	b.n	8004dbc <HAL_RCC_OscConfig+0x6d8>
 8004d6a:	bf00      	nop
 8004d6c:	58000400 	.word	0x58000400
 8004d70:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	2b0c      	cmp	r3, #12
 8004d78:	d01e      	beq.n	8004db8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d7a:	f7ff fc04 	bl	8004586 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7e:	f7fc ff35 	bl	8001bec <HAL_GetTick>
 8004d82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d86:	f7fc ff31 	bl	8001bec <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e012      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1ef      	bne.n	8004d86 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004da6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004db0:	4b05      	ldr	r3, [pc, #20]	@ (8004dc8 <HAL_RCC_OscConfig+0x6e4>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	60cb      	str	r3, [r1, #12]
 8004db6:	e001      	b.n	8004dbc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e000      	b.n	8004dbe <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3734      	adds	r7, #52	@ 0x34
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd90      	pop	{r4, r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	eefefffc 	.word	0xeefefffc

08004dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e12d      	b.n	800503c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004de0:	4b98      	ldr	r3, [pc, #608]	@ (8005044 <HAL_RCC_ClockConfig+0x278>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d91b      	bls.n	8004e26 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dee:	4b95      	ldr	r3, [pc, #596]	@ (8005044 <HAL_RCC_ClockConfig+0x278>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f023 0207 	bic.w	r2, r3, #7
 8004df6:	4993      	ldr	r1, [pc, #588]	@ (8005044 <HAL_RCC_ClockConfig+0x278>)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dfe:	f7fc fef5 	bl	8001bec <HAL_GetTick>
 8004e02:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e06:	f7fc fef1 	bl	8001bec <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e111      	b.n	800503c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e18:	4b8a      	ldr	r3, [pc, #552]	@ (8005044 <HAL_RCC_ClockConfig+0x278>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d1ef      	bne.n	8004e06 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d016      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7ff fb13 	bl	8004462 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e3c:	f7fc fed6 	bl	8001bec <HAL_GetTick>
 8004e40:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e44:	f7fc fed2 	bl	8001bec <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e0f2      	b.n	800503c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004e56:	f7ff fbe8 	bl	800462a <LL_RCC_IsActiveFlag_HPRE>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0f1      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0320 	and.w	r3, r3, #32
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d016      	beq.n	8004e9a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff fb0a 	bl	800448a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e76:	f7fc feb9 	bl	8001bec <HAL_GetTick>
 8004e7a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e7e:	f7fc feb5 	bl	8001bec <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e0d5      	b.n	800503c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004e90:	f7ff fbdd 	bl	800464e <LL_RCC_IsActiveFlag_C2HPRE>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0f1      	beq.n	8004e7e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d016      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7ff fb03 	bl	80044b6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004eb0:	f7fc fe9c 	bl	8001bec <HAL_GetTick>
 8004eb4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004eb8:	f7fc fe98 	bl	8001bec <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e0b8      	b.n	800503c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004eca:	f7ff fbd3 	bl	8004674 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0f1      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d016      	beq.n	8004f0e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff fafd 	bl	80044e4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004eea:	f7fc fe7f 	bl	8001bec <HAL_GetTick>
 8004eee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004ef0:	e008      	b.n	8004f04 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ef2:	f7fc fe7b 	bl	8001bec <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d901      	bls.n	8004f04 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e09b      	b.n	800503c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004f04:	f7ff fbc9 	bl	800469a <LL_RCC_IsActiveFlag_PPRE1>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0f1      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d017      	beq.n	8004f4a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7ff faf3 	bl	800450c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f26:	f7fc fe61 	bl	8001bec <HAL_GetTick>
 8004f2a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004f2c:	e008      	b.n	8004f40 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f2e:	f7fc fe5d 	bl	8001bec <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e07d      	b.n	800503c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004f40:	f7ff fbbd 	bl	80046be <LL_RCC_IsActiveFlag_PPRE2>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f1      	beq.n	8004f2e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d043      	beq.n	8004fde <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d106      	bne.n	8004f6c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004f5e:	f7ff f893 	bl	8004088 <LL_RCC_HSE_IsReady>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d11e      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e067      	b.n	800503c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	2b03      	cmp	r3, #3
 8004f72:	d106      	bne.n	8004f82 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004f74:	f7ff fb16 	bl	80045a4 <LL_RCC_PLL_IsReady>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d113      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e05c      	b.n	800503c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004f8a:	f7ff f9fb 	bl	8004384 <LL_RCC_MSI_IsReady>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d108      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e051      	b.n	800503c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004f98:	f7ff f8a6 	bl	80040e8 <LL_RCC_HSI_IsReady>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e04a      	b.n	800503c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7ff fa39 	bl	8004422 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fb0:	f7fc fe1c 	bl	8001bec <HAL_GetTick>
 8004fb4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb6:	e00a      	b.n	8004fce <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fb8:	f7fc fe18 	bl	8001bec <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e036      	b.n	800503c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fce:	f7ff fa3c 	bl	800444a <LL_RCC_GetSysClkSource>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d1ec      	bne.n	8004fb8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fde:	4b19      	ldr	r3, [pc, #100]	@ (8005044 <HAL_RCC_ClockConfig+0x278>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d21b      	bcs.n	8005024 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fec:	4b15      	ldr	r3, [pc, #84]	@ (8005044 <HAL_RCC_ClockConfig+0x278>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f023 0207 	bic.w	r2, r3, #7
 8004ff4:	4913      	ldr	r1, [pc, #76]	@ (8005044 <HAL_RCC_ClockConfig+0x278>)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ffc:	f7fc fdf6 	bl	8001bec <HAL_GetTick>
 8005000:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005002:	e008      	b.n	8005016 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005004:	f7fc fdf2 	bl	8001bec <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e012      	b.n	800503c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005016:	4b0b      	ldr	r3, [pc, #44]	@ (8005044 <HAL_RCC_ClockConfig+0x278>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	429a      	cmp	r2, r3
 8005022:	d1ef      	bne.n	8005004 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005024:	f000 f87e 	bl	8005124 <HAL_RCC_GetHCLKFreq>
 8005028:	4603      	mov	r3, r0
 800502a:	4a07      	ldr	r2, [pc, #28]	@ (8005048 <HAL_RCC_ClockConfig+0x27c>)
 800502c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800502e:	f7fc fde9 	bl	8001c04 <HAL_GetTickPrio>
 8005032:	4603      	mov	r3, r0
 8005034:	4618      	mov	r0, r3
 8005036:	f7fc fd8b 	bl	8001b50 <HAL_InitTick>
 800503a:	4603      	mov	r3, r0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	58004000 	.word	0x58004000
 8005048:	20000014 	.word	0x20000014

0800504c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800504c:	b590      	push	{r4, r7, lr}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005052:	f7ff f9fa 	bl	800444a <LL_RCC_GetSysClkSource>
 8005056:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10a      	bne.n	8005074 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800505e:	f7ff f9b6 	bl	80043ce <LL_RCC_MSI_GetRange>
 8005062:	4603      	mov	r3, r0
 8005064:	091b      	lsrs	r3, r3, #4
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	4a2b      	ldr	r2, [pc, #172]	@ (8005118 <HAL_RCC_GetSysClockFreq+0xcc>)
 800506c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	e04b      	b.n	800510c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b04      	cmp	r3, #4
 8005078:	d102      	bne.n	8005080 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800507a:	4b28      	ldr	r3, [pc, #160]	@ (800511c <HAL_RCC_GetSysClockFreq+0xd0>)
 800507c:	60fb      	str	r3, [r7, #12]
 800507e:	e045      	b.n	800510c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b08      	cmp	r3, #8
 8005084:	d10a      	bne.n	800509c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005086:	f7fe ffcf 	bl	8004028 <LL_RCC_HSE_IsEnabledDiv2>
 800508a:	4603      	mov	r3, r0
 800508c:	2b01      	cmp	r3, #1
 800508e:	d102      	bne.n	8005096 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005090:	4b22      	ldr	r3, [pc, #136]	@ (800511c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	e03a      	b.n	800510c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005096:	4b22      	ldr	r3, [pc, #136]	@ (8005120 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	e037      	b.n	800510c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800509c:	f7ff fab9 	bl	8004612 <LL_RCC_PLL_GetMainSource>
 80050a0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d003      	beq.n	80050b0 <HAL_RCC_GetSysClockFreq+0x64>
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	2b03      	cmp	r3, #3
 80050ac:	d003      	beq.n	80050b6 <HAL_RCC_GetSysClockFreq+0x6a>
 80050ae:	e00d      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80050b0:	4b1a      	ldr	r3, [pc, #104]	@ (800511c <HAL_RCC_GetSysClockFreq+0xd0>)
 80050b2:	60bb      	str	r3, [r7, #8]
        break;
 80050b4:	e015      	b.n	80050e2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80050b6:	f7fe ffb7 	bl	8004028 <LL_RCC_HSE_IsEnabledDiv2>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d102      	bne.n	80050c6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80050c0:	4b16      	ldr	r3, [pc, #88]	@ (800511c <HAL_RCC_GetSysClockFreq+0xd0>)
 80050c2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80050c4:	e00d      	b.n	80050e2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80050c6:	4b16      	ldr	r3, [pc, #88]	@ (8005120 <HAL_RCC_GetSysClockFreq+0xd4>)
 80050c8:	60bb      	str	r3, [r7, #8]
        break;
 80050ca:	e00a      	b.n	80050e2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80050cc:	f7ff f97f 	bl	80043ce <LL_RCC_MSI_GetRange>
 80050d0:	4603      	mov	r3, r0
 80050d2:	091b      	lsrs	r3, r3, #4
 80050d4:	f003 030f 	and.w	r3, r3, #15
 80050d8:	4a0f      	ldr	r2, [pc, #60]	@ (8005118 <HAL_RCC_GetSysClockFreq+0xcc>)
 80050da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050de:	60bb      	str	r3, [r7, #8]
        break;
 80050e0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80050e2:	f7ff fa71 	bl	80045c8 <LL_RCC_PLL_GetN>
 80050e6:	4602      	mov	r2, r0
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	fb03 f402 	mul.w	r4, r3, r2
 80050ee:	f7ff fa84 	bl	80045fa <LL_RCC_PLL_GetDivider>
 80050f2:	4603      	mov	r3, r0
 80050f4:	091b      	lsrs	r3, r3, #4
 80050f6:	3301      	adds	r3, #1
 80050f8:	fbb4 f4f3 	udiv	r4, r4, r3
 80050fc:	f7ff fa71 	bl	80045e2 <LL_RCC_PLL_GetR>
 8005100:	4603      	mov	r3, r0
 8005102:	0f5b      	lsrs	r3, r3, #29
 8005104:	3301      	adds	r3, #1
 8005106:	fbb4 f3f3 	udiv	r3, r4, r3
 800510a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800510c:	68fb      	ldr	r3, [r7, #12]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	bd90      	pop	{r4, r7, pc}
 8005116:	bf00      	nop
 8005118:	0800ab28 	.word	0x0800ab28
 800511c:	00f42400 	.word	0x00f42400
 8005120:	01e84800 	.word	0x01e84800

08005124 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005124:	b598      	push	{r3, r4, r7, lr}
 8005126:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005128:	f7ff ff90 	bl	800504c <HAL_RCC_GetSysClockFreq>
 800512c:	4604      	mov	r4, r0
 800512e:	f7ff fa01 	bl	8004534 <LL_RCC_GetAHBPrescaler>
 8005132:	4603      	mov	r3, r0
 8005134:	091b      	lsrs	r3, r3, #4
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	4a03      	ldr	r2, [pc, #12]	@ (8005148 <HAL_RCC_GetHCLKFreq+0x24>)
 800513c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005140:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005144:	4618      	mov	r0, r3
 8005146:	bd98      	pop	{r3, r4, r7, pc}
 8005148:	0800aae8 	.word	0x0800aae8

0800514c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800514c:	b590      	push	{r4, r7, lr}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2bb0      	cmp	r3, #176	@ 0xb0
 8005158:	d903      	bls.n	8005162 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800515a:	4b15      	ldr	r3, [pc, #84]	@ (80051b0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800515c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	e007      	b.n	8005172 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	091b      	lsrs	r3, r3, #4
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	4a11      	ldr	r2, [pc, #68]	@ (80051b0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800516c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005170:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005172:	f7ff f9eb 	bl	800454c <LL_RCC_GetAHB4Prescaler>
 8005176:	4603      	mov	r3, r0
 8005178:	091b      	lsrs	r3, r3, #4
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	4a0d      	ldr	r2, [pc, #52]	@ (80051b4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	fbb2 f3f3 	udiv	r3, r2, r3
 800518a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4a0a      	ldr	r2, [pc, #40]	@ (80051b8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005190:	fba2 2303 	umull	r2, r3, r2, r3
 8005194:	0c9c      	lsrs	r4, r3, #18
 8005196:	f7fe ff0d 	bl	8003fb4 <HAL_PWREx_GetVoltageRange>
 800519a:	4603      	mov	r3, r0
 800519c:	4619      	mov	r1, r3
 800519e:	4620      	mov	r0, r4
 80051a0:	f000 f80c 	bl	80051bc <RCC_SetFlashLatency>
 80051a4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd90      	pop	{r4, r7, pc}
 80051ae:	bf00      	nop
 80051b0:	0800ab28 	.word	0x0800ab28
 80051b4:	0800aae8 	.word	0x0800aae8
 80051b8:	431bde83 	.word	0x431bde83

080051bc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80051bc:	b590      	push	{r4, r7, lr}
 80051be:	b093      	sub	sp, #76	@ 0x4c
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80051c6:	4b37      	ldr	r3, [pc, #220]	@ (80052a4 <RCC_SetFlashLatency+0xe8>)
 80051c8:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80051cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80051ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80051d2:	4a35      	ldr	r2, [pc, #212]	@ (80052a8 <RCC_SetFlashLatency+0xec>)
 80051d4:	f107 031c 	add.w	r3, r7, #28
 80051d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80051da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80051de:	4b33      	ldr	r3, [pc, #204]	@ (80052ac <RCC_SetFlashLatency+0xf0>)
 80051e0:	f107 040c 	add.w	r4, r7, #12
 80051e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80051e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80051ea:	2300      	movs	r3, #0
 80051ec:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051f4:	d11a      	bne.n	800522c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80051f6:	2300      	movs	r3, #0
 80051f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80051fa:	e013      	b.n	8005224 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80051fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	3348      	adds	r3, #72	@ 0x48
 8005202:	443b      	add	r3, r7
 8005204:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	429a      	cmp	r2, r3
 800520c:	d807      	bhi.n	800521e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800520e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	3348      	adds	r3, #72	@ 0x48
 8005214:	443b      	add	r3, r7
 8005216:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800521a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800521c:	e020      	b.n	8005260 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800521e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005220:	3301      	adds	r3, #1
 8005222:	643b      	str	r3, [r7, #64]	@ 0x40
 8005224:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005226:	2b03      	cmp	r3, #3
 8005228:	d9e8      	bls.n	80051fc <RCC_SetFlashLatency+0x40>
 800522a:	e019      	b.n	8005260 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800522c:	2300      	movs	r3, #0
 800522e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005230:	e013      	b.n	800525a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	3348      	adds	r3, #72	@ 0x48
 8005238:	443b      	add	r3, r7
 800523a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	429a      	cmp	r2, r3
 8005242:	d807      	bhi.n	8005254 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	3348      	adds	r3, #72	@ 0x48
 800524a:	443b      	add	r3, r7
 800524c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005250:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8005252:	e005      	b.n	8005260 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005256:	3301      	adds	r3, #1
 8005258:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800525a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800525c:	2b02      	cmp	r3, #2
 800525e:	d9e8      	bls.n	8005232 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005260:	4b13      	ldr	r3, [pc, #76]	@ (80052b0 <RCC_SetFlashLatency+0xf4>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f023 0207 	bic.w	r2, r3, #7
 8005268:	4911      	ldr	r1, [pc, #68]	@ (80052b0 <RCC_SetFlashLatency+0xf4>)
 800526a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800526c:	4313      	orrs	r3, r2
 800526e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005270:	f7fc fcbc 	bl	8001bec <HAL_GetTick>
 8005274:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005276:	e008      	b.n	800528a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005278:	f7fc fcb8 	bl	8001bec <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e007      	b.n	800529a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800528a:	4b09      	ldr	r3, [pc, #36]	@ (80052b0 <RCC_SetFlashLatency+0xf4>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005294:	429a      	cmp	r2, r3
 8005296:	d1ef      	bne.n	8005278 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	374c      	adds	r7, #76	@ 0x4c
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd90      	pop	{r4, r7, pc}
 80052a2:	bf00      	nop
 80052a4:	0800a944 	.word	0x0800a944
 80052a8:	0800a954 	.word	0x0800a954
 80052ac:	0800a960 	.word	0x0800a960
 80052b0:	58004000 	.word	0x58004000

080052b4 <LL_RCC_LSE_IsEnabled>:
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80052b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <LL_RCC_LSE_IsEnabled+0x18>
 80052c8:	2301      	movs	r3, #1
 80052ca:	e000      	b.n	80052ce <LL_RCC_LSE_IsEnabled+0x1a>
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <LL_RCC_LSE_IsReady>:
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80052dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d101      	bne.n	80052f0 <LL_RCC_LSE_IsReady+0x18>
 80052ec:	2301      	movs	r3, #1
 80052ee:	e000      	b.n	80052f2 <LL_RCC_LSE_IsReady+0x1a>
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <LL_RCC_SetRFWKPClockSource>:
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005304:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005308:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800530c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005310:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <LL_RCC_SetSMPSClockSource>:
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005330:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005336:	f023 0203 	bic.w	r2, r3, #3
 800533a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4313      	orrs	r3, r2
 8005342:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <LL_RCC_SetSMPSPrescaler>:
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005358:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800535c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005362:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4313      	orrs	r3, r2
 800536a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <LL_RCC_SetUSARTClockSource>:
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005380:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005388:	f023 0203 	bic.w	r2, r3, #3
 800538c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <LL_RCC_SetLPUARTClockSource>:
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80053ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80053b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <LL_RCC_SetI2CClockSource>:
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80053d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	091b      	lsrs	r3, r3, #4
 80053e4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80053e8:	43db      	mvns	r3, r3
 80053ea:	401a      	ands	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80053f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053f8:	4313      	orrs	r3, r2
 80053fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <LL_RCC_SetLPTIMClockSource>:
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005412:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005416:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	0c1b      	lsrs	r3, r3, #16
 800541e:	041b      	lsls	r3, r3, #16
 8005420:	43db      	mvns	r3, r3
 8005422:	401a      	ands	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	041b      	lsls	r3, r3, #16
 8005428:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <LL_RCC_SetSAIClockSource>:
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005446:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800544a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800544e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005452:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4313      	orrs	r3, r2
 800545a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <LL_RCC_SetRNGClockSource>:
{
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005472:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800547a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800547e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <LL_RCC_SetCLK48ClockSource>:
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800549e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80054aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <LL_RCC_SetUSBClockSource>:
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b082      	sub	sp, #8
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff ffe3 	bl	8005496 <LL_RCC_SetCLK48ClockSource>
}
 80054d0:	bf00      	nop
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <LL_RCC_SetADCClockSource>:
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80054e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80054ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <LL_RCC_SetRTCClockSource>:
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800550c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005514:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005518:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4313      	orrs	r3, r2
 8005520:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <LL_RCC_GetRTCClockSource>:
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005534:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800553c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8005540:	4618      	mov	r0, r3
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <LL_RCC_ForceBackupDomainReset>:
{
 800554a:	b480      	push	{r7}
 800554c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800554e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005556:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800555a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800555e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005562:	bf00      	nop
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <LL_RCC_ReleaseBackupDomainReset>:
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005578:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800557c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005580:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005584:	bf00      	nop
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <LL_RCC_PLLSAI1_Enable>:
{
 800558e:	b480      	push	{r7}
 8005590:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005592:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800559c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80055a0:	6013      	str	r3, [r2, #0]
}
 80055a2:	bf00      	nop
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <LL_RCC_PLLSAI1_Disable>:
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80055b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80055be:	6013      	str	r3, [r2, #0]
}
 80055c0:	bf00      	nop
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <LL_RCC_PLLSAI1_IsReady>:
{
 80055ca:	b480      	push	{r7}
 80055cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80055ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055dc:	d101      	bne.n	80055e2 <LL_RCC_PLLSAI1_IsReady+0x18>
 80055de:	2301      	movs	r3, #1
 80055e0:	e000      	b.n	80055e4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b088      	sub	sp, #32
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80055f6:	2300      	movs	r3, #0
 80055f8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80055fa:	2300      	movs	r3, #0
 80055fc:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005606:	2b00      	cmp	r3, #0
 8005608:	d034      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800560e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005612:	d021      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005614:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005618:	d81b      	bhi.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800561a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800561e:	d01d      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005620:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005624:	d815      	bhi.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00b      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800562a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800562e:	d110      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005630:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800563a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800563e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005640:	e00d      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	3304      	adds	r3, #4
 8005646:	4618      	mov	r0, r3
 8005648:	f000 f947 	bl	80058da <RCCEx_PLLSAI1_ConfigNP>
 800564c:	4603      	mov	r3, r0
 800564e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005650:	e005      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	77fb      	strb	r3, [r7, #31]
        break;
 8005656:	e002      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005658:	bf00      	nop
 800565a:	e000      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800565c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800565e:	7ffb      	ldrb	r3, [r7, #31]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d105      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005668:	4618      	mov	r0, r3
 800566a:	f7ff fee8 	bl	800543e <LL_RCC_SetSAIClockSource>
 800566e:	e001      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005670:	7ffb      	ldrb	r3, [r7, #31]
 8005672:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800567c:	2b00      	cmp	r3, #0
 800567e:	d046      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005680:	f7ff ff56 	bl	8005530 <LL_RCC_GetRTCClockSource>
 8005684:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	429a      	cmp	r2, r3
 800568e:	d03c      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005690:	f7fe fc80 	bl	8003f94 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d105      	bne.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff ff30 	bl	8005504 <LL_RCC_SetRTCClockSource>
 80056a4:	e02e      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80056a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ae:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80056b0:	f7ff ff4b 	bl	800554a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80056b4:	f7ff ff5a 	bl	800556c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c2:	4313      	orrs	r3, r2
 80056c4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80056c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80056d0:	f7ff fdf0 	bl	80052b4 <LL_RCC_LSE_IsEnabled>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d114      	bne.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80056da:	f7fc fa87 	bl	8001bec <HAL_GetTick>
 80056de:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80056e0:	e00b      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e2:	f7fc fa83 	bl	8001bec <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d902      	bls.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	77fb      	strb	r3, [r7, #31]
              break;
 80056f8:	e004      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80056fa:	f7ff fded 	bl	80052d8 <LL_RCC_LSE_IsReady>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b01      	cmp	r3, #1
 8005702:	d1ee      	bne.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005704:	7ffb      	ldrb	r3, [r7, #31]
 8005706:	77bb      	strb	r3, [r7, #30]
 8005708:	e001      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570a:	7ffb      	ldrb	r3, [r7, #31]
 800570c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d004      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	4618      	mov	r0, r3
 8005720:	f7ff fe2a 	bl	8005378 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0302 	and.w	r3, r3, #2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d004      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	4618      	mov	r0, r3
 8005736:	f7ff fe35 	bl	80053a4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0310 	and.w	r3, r3, #16
 8005742:	2b00      	cmp	r3, #0
 8005744:	d004      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800574a:	4618      	mov	r0, r3
 800574c:	f7ff fe5d 	bl	800540a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0320 	and.w	r3, r3, #32
 8005758:	2b00      	cmp	r3, #0
 800575a:	d004      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005760:	4618      	mov	r0, r3
 8005762:	f7ff fe52 	bl	800540a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0304 	and.w	r3, r3, #4
 800576e:	2b00      	cmp	r3, #0
 8005770:	d004      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	4618      	mov	r0, r3
 8005778:	f7ff fe2a 	bl	80053d0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0308 	and.w	r3, r3, #8
 8005784:	2b00      	cmp	r3, #0
 8005786:	d004      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578c:	4618      	mov	r0, r3
 800578e:	f7ff fe1f 	bl	80053d0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800579a:	2b00      	cmp	r3, #0
 800579c:	d022      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7ff fe8d 	bl	80054c2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057b0:	d107      	bne.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80057b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057c0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057ca:	d10b      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	3304      	adds	r3, #4
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 f8dd 	bl	8005990 <RCCEx_PLLSAI1_ConfigNQ>
 80057d6:	4603      	mov	r3, r0
 80057d8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80057da:	7ffb      	ldrb	r3, [r7, #31]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80057e0:	7ffb      	ldrb	r3, [r7, #31]
 80057e2:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d02b      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057f8:	d008      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005802:	d003      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005808:	2b00      	cmp	r3, #0
 800580a:	d105      	bne.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff fe2a 	bl	800546a <LL_RCC_SetRNGClockSource>
 8005816:	e00a      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800581c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005820:	60fb      	str	r3, [r7, #12]
 8005822:	2000      	movs	r0, #0
 8005824:	f7ff fe21 	bl	800546a <LL_RCC_SetRNGClockSource>
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f7ff fe34 	bl	8005496 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005832:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005836:	d107      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005838:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005842:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005846:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005850:	2b00      	cmp	r3, #0
 8005852:	d022      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff fe3d 	bl	80054d8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005862:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005866:	d107      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005872:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005876:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800587c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005880:	d10b      	bne.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	3304      	adds	r3, #4
 8005886:	4618      	mov	r0, r3
 8005888:	f000 f8dd 	bl	8005a46 <RCCEx_PLLSAI1_ConfigNR>
 800588c:	4603      	mov	r3, r0
 800588e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005890:	7ffb      	ldrb	r3, [r7, #31]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005896:	7ffb      	ldrb	r3, [r7, #31]
 8005898:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d004      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7ff fd26 	bl	80052fc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d009      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7ff fd45 	bl	8005350 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7ff fd2c 	bl	8005328 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80058d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3720      	adds	r7, #32
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b084      	sub	sp, #16
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80058e6:	f7ff fe61 	bl	80055ac <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80058ea:	f7fc f97f 	bl	8001bec <HAL_GetTick>
 80058ee:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80058f0:	e009      	b.n	8005906 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058f2:	f7fc f97b 	bl	8001bec <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d902      	bls.n	8005906 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	73fb      	strb	r3, [r7, #15]
      break;
 8005904:	e004      	b.n	8005910 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005906:	f7ff fe60 	bl	80055ca <LL_RCC_PLLSAI1_IsReady>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1f0      	bne.n	80058f2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005910:	7bfb      	ldrb	r3, [r7, #15]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d137      	bne.n	8005986 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005916:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	021b      	lsls	r3, r3, #8
 8005926:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800592a:	4313      	orrs	r3, r2
 800592c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800592e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005940:	4313      	orrs	r3, r2
 8005942:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005944:	f7ff fe23 	bl	800558e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005948:	f7fc f950 	bl	8001bec <HAL_GetTick>
 800594c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800594e:	e009      	b.n	8005964 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005950:	f7fc f94c 	bl	8001bec <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b02      	cmp	r3, #2
 800595c:	d902      	bls.n	8005964 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	73fb      	strb	r3, [r7, #15]
        break;
 8005962:	e004      	b.n	800596e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005964:	f7ff fe31 	bl	80055ca <LL_RCC_PLLSAI1_IsReady>
 8005968:	4603      	mov	r3, r0
 800596a:	2b01      	cmp	r3, #1
 800596c:	d1f0      	bne.n	8005950 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800596e:	7bfb      	ldrb	r3, [r7, #15]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d108      	bne.n	8005986 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005974:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005978:	691a      	ldr	r2, [r3, #16]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005982:	4313      	orrs	r3, r2
 8005984:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005986:	7bfb      	ldrb	r3, [r7, #15]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005998:	2300      	movs	r3, #0
 800599a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800599c:	f7ff fe06 	bl	80055ac <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80059a0:	f7fc f924 	bl	8001bec <HAL_GetTick>
 80059a4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80059a6:	e009      	b.n	80059bc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059a8:	f7fc f920 	bl	8001bec <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d902      	bls.n	80059bc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	73fb      	strb	r3, [r7, #15]
      break;
 80059ba:	e004      	b.n	80059c6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80059bc:	f7ff fe05 	bl	80055ca <LL_RCC_PLLSAI1_IsReady>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1f0      	bne.n	80059a8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d137      	bne.n	8005a3c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80059cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	021b      	lsls	r3, r3, #8
 80059dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059e0:	4313      	orrs	r3, r2
 80059e2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80059e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059f6:	4313      	orrs	r3, r2
 80059f8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80059fa:	f7ff fdc8 	bl	800558e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059fe:	f7fc f8f5 	bl	8001bec <HAL_GetTick>
 8005a02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005a04:	e009      	b.n	8005a1a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a06:	f7fc f8f1 	bl	8001bec <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d902      	bls.n	8005a1a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	73fb      	strb	r3, [r7, #15]
        break;
 8005a18:	e004      	b.n	8005a24 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005a1a:	f7ff fdd6 	bl	80055ca <LL_RCC_PLLSAI1_IsReady>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d1f0      	bne.n	8005a06 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d108      	bne.n	8005a3c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005a2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b084      	sub	sp, #16
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005a52:	f7ff fdab 	bl	80055ac <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a56:	f7fc f8c9 	bl	8001bec <HAL_GetTick>
 8005a5a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005a5c:	e009      	b.n	8005a72 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a5e:	f7fc f8c5 	bl	8001bec <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d902      	bls.n	8005a72 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a70:	e004      	b.n	8005a7c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005a72:	f7ff fdaa 	bl	80055ca <LL_RCC_PLLSAI1_IsReady>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1f0      	bne.n	8005a5e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d137      	bne.n	8005af2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005a82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	021b      	lsls	r3, r3, #8
 8005a92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a96:	4313      	orrs	r3, r2
 8005a98:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005a9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005aac:	4313      	orrs	r3, r2
 8005aae:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005ab0:	f7ff fd6d 	bl	800558e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ab4:	f7fc f89a 	bl	8001bec <HAL_GetTick>
 8005ab8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005aba:	e009      	b.n	8005ad0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005abc:	f7fc f896 	bl	8001bec <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d902      	bls.n	8005ad0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	73fb      	strb	r3, [r7, #15]
        break;
 8005ace:	e004      	b.n	8005ada <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ad0:	f7ff fd7b 	bl	80055ca <LL_RCC_PLLSAI1_IsReady>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d1f0      	bne.n	8005abc <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005ada:	7bfb      	ldrb	r3, [r7, #15]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d108      	bne.n	8005af2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005ae0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ae4:	691a      	ldr	r2, [r3, #16]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005aee:	4313      	orrs	r3, r2
 8005af0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e07a      	b.n	8005c04 <HAL_RTC_Init+0x108>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d106      	bne.n	8005b28 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7fb fe9c 	bl	8001860 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f003 0310 	and.w	r3, r3, #16
 8005b3a:	2b10      	cmp	r3, #16
 8005b3c:	d058      	beq.n	8005bf0 <HAL_RTC_Init+0xf4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	22ca      	movs	r2, #202	@ 0xca
 8005b44:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2253      	movs	r2, #83	@ 0x53
 8005b4c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 fc5a 	bl	8006408 <RTC_EnterInitMode>
 8005b54:	4603      	mov	r3, r0
 8005b56:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d12c      	bne.n	8005bb8 <HAL_RTC_Init+0xbc>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6812      	ldr	r2, [r2, #0]
 8005b68:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005b6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b70:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6899      	ldr	r1, [r3, #8]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	431a      	orrs	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	68d2      	ldr	r2, [r2, #12]
 8005b98:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6919      	ldr	r1, [r3, #16]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	041a      	lsls	r2, r3, #16
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fc62 	bl	8006478 <RTC_ExitInitMode>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d113      	bne.n	8005be6 <HAL_RTC_Init+0xea>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 0203 	bic.w	r2, r2, #3
 8005bcc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	69da      	ldr	r2, [r3, #28]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	22ff      	movs	r2, #255	@ 0xff
 8005bec:	625a      	str	r2, [r3, #36]	@ 0x24
 8005bee:	e001      	b.n	8005bf4 <HAL_RTC_Init+0xf8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d103      	bne.n	8005c02 <HAL_RTC_Init+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8005c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <HAL_RTC_DeInit>:
  *                the configuration information for RTC.
  * @note   This function does not reset the RTC Backup Data registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	22ca      	movs	r2, #202	@ 0xca
 8005c22:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2253      	movs	r2, #83	@ 0x53
 8005c2a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 fbeb 	bl	8006408 <RTC_EnterInitMode>
 8005c32:	4603      	mov	r3, r0
 8005c34:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005c36:	7bfb      	ldrb	r3, [r7, #15]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d132      	bne.n	8005ca2 <HAL_RTC_DeInit+0x96>
  {
    /* Reset RTC registers */
    hrtc->Instance->TR = 0x00000000U;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2200      	movs	r2, #0
 8005c42:	601a      	str	r2, [r3, #0]
    hrtc->Instance->DR = (RTC_DR_WDU_0 | RTC_DR_MU_0 | RTC_DR_DU_0);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f242 1201 	movw	r2, #8449	@ 0x2101
 8005c4c:	605a      	str	r2, [r3, #4]
    hrtc->Instance->CR = 0x00000000U;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2200      	movs	r2, #0
 8005c54:	609a      	str	r2, [r3, #8]
    hrtc->Instance->WUTR = RTC_WUTR_WUT;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c5e:	615a      	str	r2, [r3, #20]
    hrtc->Instance->PRER = (uint32_t)(RTC_PRER_PREDIV_A | 0x000000FFU);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a1e      	ldr	r2, [pc, #120]	@ (8005ce0 <HAL_RTC_DeInit+0xd4>)
 8005c66:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ALRMAR   = 0x00000000U;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	61da      	str	r2, [r3, #28]
    hrtc->Instance->ALRMBR   = 0x00000000U;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2200      	movs	r2, #0
 8005c76:	621a      	str	r2, [r3, #32]
    hrtc->Instance->CALR     = 0x00000000U;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	63da      	str	r2, [r3, #60]	@ 0x3c
    hrtc->Instance->SHIFTR   = 0x00000000U;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2200      	movs	r2, #0
 8005c86:	62da      	str	r2, [r3, #44]	@ 0x2c
    hrtc->Instance->ALRMASSR = 0x00000000U;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	645a      	str	r2, [r3, #68]	@ 0x44
    hrtc->Instance->ALRMBSSR = 0x00000000U;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2200      	movs	r2, #0
 8005c96:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fbed 	bl	8006478 <RTC_ExitInitMode>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	22ff      	movs	r2, #255	@ 0xff
 8005ca8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005caa:	7bfb      	ldrb	r3, [r7, #15]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10e      	bne.n	8005cce <HAL_RTC_DeInit+0xc2>
  {
    /* Reset Tamper and alternate functions configuration register */
    hrtc->Instance->TAMPCR = 0x00000000U;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Reset Option register */
    hrtc->Instance->OR = 0x00000000U;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* DeInit the low level hardware: CLOCK, NVIC.*/
    hrtc->MspDeInitCallback(hrtc);
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
    /* De-Initialize RTC MSP */
    HAL_RTC_MspDeInit(hrtc);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7fb fe03 	bl	80018cc <HAL_RTC_MspDeInit>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    hrtc->State = HAL_RTC_STATE_RESET;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Release Lock */
  __HAL_UNLOCK(hrtc);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	007f00ff 	.word	0x007f00ff

08005ce4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ce4:	b590      	push	{r4, r7, lr}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d101      	bne.n	8005d02 <HAL_RTC_SetTime+0x1e>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	e08b      	b.n	8005e1a <HAL_RTC_SetTime+0x136>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d126      	bne.n	8005d66 <HAL_RTC_SetTime+0x82>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d102      	bne.n	8005d2c <HAL_RTC_SetTime+0x48>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 fbc7 	bl	80064c4 <RTC_ByteToBcd2>
 8005d36:	4603      	mov	r3, r0
 8005d38:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	785b      	ldrb	r3, [r3, #1]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 fbc0 	bl	80064c4 <RTC_ByteToBcd2>
 8005d44:	4603      	mov	r3, r0
 8005d46:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d48:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	789b      	ldrb	r3, [r3, #2]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 fbb8 	bl	80064c4 <RTC_ByteToBcd2>
 8005d54:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005d56:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	78db      	ldrb	r3, [r3, #3]
 8005d5e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d60:	4313      	orrs	r3, r2
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	e018      	b.n	8005d98 <HAL_RTC_SetTime+0xb4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d102      	bne.n	8005d7a <HAL_RTC_SetTime+0x96>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2200      	movs	r2, #0
 8005d78:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	785b      	ldrb	r3, [r3, #1]
 8005d84:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005d86:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005d8c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	78db      	ldrb	r3, [r3, #3]
 8005d92:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005d94:	4313      	orrs	r3, r2
 8005d96:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	22ca      	movs	r2, #202	@ 0xca
 8005d9e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2253      	movs	r2, #83	@ 0x53
 8005da6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 fb2d 	bl	8006408 <RTC_EnterInitMode>
 8005dae:	4603      	mov	r3, r0
 8005db0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005db2:	7cfb      	ldrb	r3, [r7, #19]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d120      	bne.n	8005dfa <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005dc2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005dc6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689a      	ldr	r2, [r3, #8]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005dd6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6899      	ldr	r1, [r3, #8]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	68da      	ldr	r2, [r3, #12]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	431a      	orrs	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 fb41 	bl	8006478 <RTC_ExitInitMode>
 8005df6:	4603      	mov	r3, r0
 8005df8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005dfa:	7cfb      	ldrb	r3, [r7, #19]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d103      	bne.n	8005e08 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	22ff      	movs	r2, #255	@ 0xff
 8005e0e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005e18:	7cfb      	ldrb	r3, [r7, #19]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	371c      	adds	r7, #28
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd90      	pop	{r4, r7, pc}

08005e22 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b086      	sub	sp, #24
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	60f8      	str	r0, [r7, #12]
 8005e2a:	60b9      	str	r1, [r7, #8]
 8005e2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005e54:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005e58:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	0c1b      	lsrs	r3, r3, #16
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	0a1b      	lsrs	r3, r3, #8
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e74:	b2da      	uxtb	r2, r3
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	0d9b      	lsrs	r3, r3, #22
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d11a      	bne.n	8005ed4 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f000 fb2c 	bl	8006500 <RTC_Bcd2ToByte>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	461a      	mov	r2, r3
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	785b      	ldrb	r3, [r3, #1]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 fb23 	bl	8006500 <RTC_Bcd2ToByte>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	789b      	ldrb	r3, [r3, #2]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 fb1a 	bl	8006500 <RTC_Bcd2ToByte>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	461a      	mov	r2, r3
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3718      	adds	r7, #24
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ede:	b590      	push	{r4, r7, lr}
 8005ee0:	b087      	sub	sp, #28
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	60f8      	str	r0, [r7, #12]
 8005ee6:	60b9      	str	r1, [r7, #8]
 8005ee8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d101      	bne.n	8005efc <HAL_RTC_SetDate+0x1e>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	e075      	b.n	8005fe8 <HAL_RTC_SetDate+0x10a>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2202      	movs	r2, #2
 8005f08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10e      	bne.n	8005f30 <HAL_RTC_SetDate+0x52>
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	785b      	ldrb	r3, [r3, #1]
 8005f16:	f003 0310 	and.w	r3, r3, #16
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d008      	beq.n	8005f30 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	785b      	ldrb	r3, [r3, #1]
 8005f22:	f023 0310 	bic.w	r3, r3, #16
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	330a      	adds	r3, #10
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d11c      	bne.n	8005f70 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	78db      	ldrb	r3, [r3, #3]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 fac2 	bl	80064c4 <RTC_ByteToBcd2>
 8005f40:	4603      	mov	r3, r0
 8005f42:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	785b      	ldrb	r3, [r3, #1]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 fabb 	bl	80064c4 <RTC_ByteToBcd2>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f52:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	789b      	ldrb	r3, [r3, #2]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 fab3 	bl	80064c4 <RTC_ByteToBcd2>
 8005f5e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005f60:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	617b      	str	r3, [r7, #20]
 8005f6e:	e00e      	b.n	8005f8e <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	78db      	ldrb	r3, [r3, #3]
 8005f74:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	785b      	ldrb	r3, [r3, #1]
 8005f7a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005f7c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005f82:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	22ca      	movs	r2, #202	@ 0xca
 8005f94:	625a      	str	r2, [r3, #36]	@ 0x24
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2253      	movs	r2, #83	@ 0x53
 8005f9c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 fa32 	bl	8006408 <RTC_EnterInitMode>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005fa8:	7cfb      	ldrb	r3, [r7, #19]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10c      	bne.n	8005fc8 <HAL_RTC_SetDate+0xea>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005fb8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005fbc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 fa5a 	bl	8006478 <RTC_ExitInitMode>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005fc8:	7cfb      	ldrb	r3, [r7, #19]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d103      	bne.n	8005fd6 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	22ff      	movs	r2, #255	@ 0xff
 8005fdc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005fe6:	7cfb      	ldrb	r3, [r7, #19]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	371c      	adds	r7, #28
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd90      	pop	{r4, r7, pc}

08005ff0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800600a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800600e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	0c1b      	lsrs	r3, r3, #16
 8006014:	b2da      	uxtb	r2, r3
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	0a1b      	lsrs	r3, r3, #8
 800601e:	b2db      	uxtb	r3, r3
 8006020:	f003 031f 	and.w	r3, r3, #31
 8006024:	b2da      	uxtb	r2, r3
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	b2db      	uxtb	r3, r3
 800602e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006032:	b2da      	uxtb	r2, r3
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	0b5b      	lsrs	r3, r3, #13
 800603c:	b2db      	uxtb	r3, r3
 800603e:	f003 0307 	and.w	r3, r3, #7
 8006042:	b2da      	uxtb	r2, r3
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d11a      	bne.n	8006084 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	78db      	ldrb	r3, [r3, #3]
 8006052:	4618      	mov	r0, r3
 8006054:	f000 fa54 	bl	8006500 <RTC_Bcd2ToByte>
 8006058:	4603      	mov	r3, r0
 800605a:	461a      	mov	r2, r3
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	785b      	ldrb	r3, [r3, #1]
 8006064:	4618      	mov	r0, r3
 8006066:	f000 fa4b 	bl	8006500 <RTC_Bcd2ToByte>
 800606a:	4603      	mov	r3, r0
 800606c:	461a      	mov	r2, r3
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	789b      	ldrb	r3, [r3, #2]
 8006076:	4618      	mov	r0, r3
 8006078:	f000 fa42 	bl	8006500 <RTC_Bcd2ToByte>
 800607c:	4603      	mov	r3, r0
 800607e:	461a      	mov	r2, r3
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
	...

08006090 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006090:	b590      	push	{r4, r7, lr}
 8006092:	b089      	sub	sp, #36	@ 0x24
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800609c:	4ba1      	ldr	r3, [pc, #644]	@ (8006324 <HAL_RTC_SetAlarm_IT+0x294>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4aa1      	ldr	r2, [pc, #644]	@ (8006328 <HAL_RTC_SetAlarm_IT+0x298>)
 80060a2:	fba2 2303 	umull	r2, r3, r2, r3
 80060a6:	0adb      	lsrs	r3, r3, #11
 80060a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80060ac:	fb02 f303 	mul.w	r3, r2, r3
 80060b0:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d101      	bne.n	80060c8 <HAL_RTC_SetAlarm_IT+0x38>
 80060c4:	2302      	movs	r3, #2
 80060c6:	e128      	b.n	800631a <HAL_RTC_SetAlarm_IT+0x28a>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d137      	bne.n	800614e <HAL_RTC_SetAlarm_IT+0xbe>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d102      	bne.n	80060f2 <HAL_RTC_SetAlarm_IT+0x62>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2200      	movs	r2, #0
 80060f0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 f9e4 	bl	80064c4 <RTC_ByteToBcd2>
 80060fc:	4603      	mov	r3, r0
 80060fe:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	785b      	ldrb	r3, [r3, #1]
 8006104:	4618      	mov	r0, r3
 8006106:	f000 f9dd 	bl	80064c4 <RTC_ByteToBcd2>
 800610a:	4603      	mov	r3, r0
 800610c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800610e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	789b      	ldrb	r3, [r3, #2]
 8006114:	4618      	mov	r0, r3
 8006116:	f000 f9d5 	bl	80064c4 <RTC_ByteToBcd2>
 800611a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800611c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	78db      	ldrb	r3, [r3, #3]
 8006124:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006126:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006130:	4618      	mov	r0, r3
 8006132:	f000 f9c7 	bl	80064c4 <RTC_ByteToBcd2>
 8006136:	4603      	mov	r3, r0
 8006138:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800613a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006142:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006148:	4313      	orrs	r3, r2
 800614a:	61fb      	str	r3, [r7, #28]
 800614c:	e023      	b.n	8006196 <HAL_RTC_SetAlarm_IT+0x106>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006158:	2b00      	cmp	r3, #0
 800615a:	d102      	bne.n	8006162 <HAL_RTC_SetAlarm_IT+0xd2>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2200      	movs	r2, #0
 8006160:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	785b      	ldrb	r3, [r3, #1]
 800616c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800616e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006174:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	78db      	ldrb	r3, [r3, #3]
 800617a:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800617c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006184:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8006186:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800618c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006192:	4313      	orrs	r3, r2
 8006194:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800619e:	4313      	orrs	r3, r2
 80061a0:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	22ca      	movs	r2, #202	@ 0xca
 80061a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2253      	movs	r2, #83	@ 0x53
 80061b0:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061ba:	d144      	bne.n	8006246 <HAL_RTC_SetAlarm_IT+0x1b6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689a      	ldr	r2, [r3, #8]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80061ca:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80061dc:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10d      	bne.n	8006206 <HAL_RTC_SetAlarm_IT+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	22ff      	movs	r2, #255	@ 0xff
 80061f0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2203      	movs	r2, #3
 80061f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e089      	b.n	800631a <HAL_RTC_SetAlarm_IT+0x28a>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0e4      	beq.n	80061de <HAL_RTC_SetAlarm_IT+0x14e>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	69fa      	ldr	r2, [r7, #28]
 800621a:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689a      	ldr	r2, [r3, #8]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006232:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689a      	ldr	r2, [r3, #8]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006242:	609a      	str	r2, [r3, #8]
 8006244:	e04e      	b.n	80062e4 <HAL_RTC_SetAlarm_IT+0x254>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006254:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	b2da      	uxtb	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8006266:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006268:	4b2e      	ldr	r3, [pc, #184]	@ (8006324 <HAL_RTC_SetAlarm_IT+0x294>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a2e      	ldr	r2, [pc, #184]	@ (8006328 <HAL_RTC_SetAlarm_IT+0x298>)
 800626e:	fba2 2303 	umull	r2, r3, r2, r3
 8006272:	0adb      	lsrs	r3, r3, #11
 8006274:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006278:	fb02 f303 	mul.w	r3, r2, r3
 800627c:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	3b01      	subs	r3, #1
 8006282:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10d      	bne.n	80062a6 <HAL_RTC_SetAlarm_IT+0x216>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	22ff      	movs	r2, #255	@ 0xff
 8006290:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2203      	movs	r2, #3
 8006296:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e039      	b.n	800631a <HAL_RTC_SetAlarm_IT+0x28a>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f003 0302 	and.w	r3, r3, #2
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d0e4      	beq.n	800627e <HAL_RTC_SetAlarm_IT+0x1ee>

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	69fa      	ldr	r2, [r7, #28]
 80062ba:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689a      	ldr	r2, [r3, #8]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062d2:	609a      	str	r2, [r3, #8]
    /* Enable Alarm B interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689a      	ldr	r2, [r3, #8]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062e2:	609a      	str	r2, [r3, #8]
  }

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80062e4:	4b11      	ldr	r3, [pc, #68]	@ (800632c <HAL_RTC_SetAlarm_IT+0x29c>)
 80062e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062ea:	4a10      	ldr	r2, [pc, #64]	@ (800632c <HAL_RTC_SetAlarm_IT+0x29c>)
 80062ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80062f4:	4b0d      	ldr	r3, [pc, #52]	@ (800632c <HAL_RTC_SetAlarm_IT+0x29c>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a0c      	ldr	r2, [pc, #48]	@ (800632c <HAL_RTC_SetAlarm_IT+0x29c>)
 80062fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062fe:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	22ff      	movs	r2, #255	@ 0xff
 8006306:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3724      	adds	r7, #36	@ 0x24
 800631e:	46bd      	mov	sp, r7
 8006320:	bd90      	pop	{r4, r7, pc}
 8006322:	bf00      	nop
 8006324:	20000014 	.word	0x20000014
 8006328:	10624dd3 	.word	0x10624dd3
 800632c:	58000800 	.word	0x58000800

08006330 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006338:	4b1f      	ldr	r3, [pc, #124]	@ (80063b8 <HAL_RTC_AlarmIRQHandler+0x88>)
 800633a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800633e:	60da      	str	r2, [r3, #12]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d012      	beq.n	8006374 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00b      	beq.n	8006374 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	b2da      	uxtb	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800636c:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7fb f912 	bl	8001598 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d012      	beq.n	80063a8 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00b      	beq.n	80063a8 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	b2da      	uxtb	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80063a0:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f970 	bl	8006688 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 80063b0:	bf00      	nop
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	58000800 	.word	0x58000800

080063bc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a0d      	ldr	r2, [pc, #52]	@ (8006404 <HAL_RTC_WaitForSynchro+0x48>)
 80063ce:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063d0:	f7fb fc0c 	bl	8001bec <HAL_GetTick>
 80063d4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80063d6:	e009      	b.n	80063ec <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80063d8:	f7fb fc08 	bl	8001bec <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063e6:	d901      	bls.n	80063ec <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e007      	b.n	80063fc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	f003 0320 	and.w	r3, r3, #32
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0ee      	beq.n	80063d8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	0001ff5f 	.word	0x0001ff5f

08006408 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006410:	2300      	movs	r3, #0
 8006412:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006414:	2300      	movs	r3, #0
 8006416:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006422:	2b00      	cmp	r3, #0
 8006424:	d123      	bne.n	800646e <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68da      	ldr	r2, [r3, #12]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006434:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006436:	f7fb fbd9 	bl	8001bec <HAL_GetTick>
 800643a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800643c:	e00d      	b.n	800645a <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800643e:	f7fb fbd5 	bl	8001bec <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800644c:	d905      	bls.n	800645a <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2204      	movs	r2, #4
 8006452:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006464:	2b00      	cmp	r3, #0
 8006466:	d102      	bne.n	800646e <RTC_EnterInitMode+0x66>
 8006468:	7bfb      	ldrb	r3, [r7, #15]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d1e7      	bne.n	800643e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800646e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006492:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f003 0320 	and.w	r3, r3, #32
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10b      	bne.n	80064ba <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7ff ff8a 	bl	80063bc <HAL_RTC_WaitForSynchro>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d005      	beq.n	80064ba <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2204      	movs	r2, #4
 80064b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	4603      	mov	r3, r0
 80064cc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80064d2:	e005      	b.n	80064e0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	3301      	adds	r3, #1
 80064d8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80064da:	79fb      	ldrb	r3, [r7, #7]
 80064dc:	3b0a      	subs	r3, #10
 80064de:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80064e0:	79fb      	ldrb	r3, [r7, #7]
 80064e2:	2b09      	cmp	r3, #9
 80064e4:	d8f6      	bhi.n	80064d4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	011b      	lsls	r3, r3, #4
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	79fb      	ldrb	r3, [r7, #7]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	b2db      	uxtb	r3, r3
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	4603      	mov	r3, r0
 8006508:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800650a:	2300      	movs	r3, #0
 800650c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800650e:	79fb      	ldrb	r3, [r7, #7]
 8006510:	091b      	lsrs	r3, r3, #4
 8006512:	b2db      	uxtb	r3, r3
 8006514:	461a      	mov	r2, r3
 8006516:	4613      	mov	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	b2da      	uxtb	r2, r3
 8006524:	79fb      	ldrb	r3, [r7, #7]
 8006526:	f003 030f 	and.w	r3, r3, #15
 800652a:	b2db      	uxtb	r3, r3
 800652c:	4413      	add	r3, r2
 800652e:	b2db      	uxtb	r3, r3
}
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d101      	bne.n	800655a <HAL_RTCEx_SetWakeUpTimer+0x1e>
 8006556:	2302      	movs	r3, #2
 8006558:	e092      	b.n	8006680 <HAL_RTCEx_SetWakeUpTimer+0x144>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2202      	movs	r2, #2
 8006566:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	22ca      	movs	r2, #202	@ 0xca
 8006570:	625a      	str	r2, [r3, #36]	@ 0x24
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2253      	movs	r2, #83	@ 0x53
 8006578:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006584:	2b00      	cmp	r3, #0
 8006586:	d020      	beq.n	80065ca <HAL_RTCEx_SetWakeUpTimer+0x8e>
  {
    tickstart = HAL_GetTick();
 8006588:	f7fb fb30 	bl	8001bec <HAL_GetTick>
 800658c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 800658e:	e015      	b.n	80065bc <HAL_RTCEx_SetWakeUpTimer+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006590:	f7fb fb2c 	bl	8001bec <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800659e:	d90d      	bls.n	80065bc <HAL_RTCEx_SetWakeUpTimer+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	22ff      	movs	r2, #255	@ 0xff
 80065a6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2203      	movs	r2, #3
 80065ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e061      	b.n	8006680 <HAL_RTCEx_SetWakeUpTimer+0x144>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	f003 0304 	and.w	r3, r3, #4
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1e2      	bne.n	8006590 <HAL_RTCEx_SetWakeUpTimer+0x54>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065d8:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80065ea:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065ec:	f7fb fafe 	bl	8001bec <HAL_GetTick>
 80065f0:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80065f2:	e015      	b.n	8006620 <HAL_RTCEx_SetWakeUpTimer+0xe4>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80065f4:	f7fb fafa 	bl	8001bec <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006602:	d90d      	bls.n	8006620 <HAL_RTCEx_SetWakeUpTimer+0xe4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	22ff      	movs	r2, #255	@ 0xff
 800660a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2203      	movs	r2, #3
 8006610:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e02f      	b.n	8006680 <HAL_RTCEx_SetWakeUpTimer+0x144>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f003 0304 	and.w	r3, r3, #4
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0e2      	beq.n	80065f4 <HAL_RTCEx_SetWakeUpTimer+0xb8>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 0207 	bic.w	r2, r2, #7
 800663c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6899      	ldr	r1, [r3, #8]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	430a      	orrs	r2, r1
 800664c:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689a      	ldr	r2, [r3, #8]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006664:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	22ff      	movs	r2, #255	@ 0xff
 800666c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e049      	b.n	8006742 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d106      	bne.n	80066c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7fb f91a 	bl	80018fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2202      	movs	r2, #2
 80066cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	3304      	adds	r3, #4
 80066d8:	4619      	mov	r1, r3
 80066da:	4610      	mov	r0, r2
 80066dc:	f000 fa7c 	bl	8006bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
	...

0800674c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b01      	cmp	r3, #1
 800675e:	d001      	beq.n	8006764 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e036      	b.n	80067d2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2202      	movs	r2, #2
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68da      	ldr	r2, [r3, #12]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f042 0201 	orr.w	r2, r2, #1
 800677a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a17      	ldr	r2, [pc, #92]	@ (80067e0 <HAL_TIM_Base_Start_IT+0x94>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d004      	beq.n	8006790 <HAL_TIM_Base_Start_IT+0x44>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800678e:	d115      	bne.n	80067bc <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	689a      	ldr	r2, [r3, #8]
 8006796:	4b13      	ldr	r3, [pc, #76]	@ (80067e4 <HAL_TIM_Base_Start_IT+0x98>)
 8006798:	4013      	ands	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b06      	cmp	r3, #6
 80067a0:	d015      	beq.n	80067ce <HAL_TIM_Base_Start_IT+0x82>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067a8:	d011      	beq.n	80067ce <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f042 0201 	orr.w	r2, r2, #1
 80067b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ba:	e008      	b.n	80067ce <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f042 0201 	orr.w	r2, r2, #1
 80067ca:	601a      	str	r2, [r3, #0]
 80067cc:	e000      	b.n	80067d0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	40012c00 	.word	0x40012c00
 80067e4:	00010007 	.word	0x00010007

080067e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d020      	beq.n	800684c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d01b      	beq.n	800684c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f06f 0202 	mvn.w	r2, #2
 800681c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	f003 0303 	and.w	r3, r3, #3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f9b2 	bl	8006b9c <HAL_TIM_IC_CaptureCallback>
 8006838:	e005      	b.n	8006846 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f9a4 	bl	8006b88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f9b5 	bl	8006bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b00      	cmp	r3, #0
 8006854:	d020      	beq.n	8006898 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b00      	cmp	r3, #0
 800685e:	d01b      	beq.n	8006898 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f06f 0204 	mvn.w	r2, #4
 8006868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2202      	movs	r2, #2
 800686e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f98c 	bl	8006b9c <HAL_TIM_IC_CaptureCallback>
 8006884:	e005      	b.n	8006892 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f97e 	bl	8006b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f98f 	bl	8006bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	f003 0308 	and.w	r3, r3, #8
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d020      	beq.n	80068e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f003 0308 	and.w	r3, r3, #8
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d01b      	beq.n	80068e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f06f 0208 	mvn.w	r2, #8
 80068b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2204      	movs	r2, #4
 80068ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	f003 0303 	and.w	r3, r3, #3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f966 	bl	8006b9c <HAL_TIM_IC_CaptureCallback>
 80068d0:	e005      	b.n	80068de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f958 	bl	8006b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f969 	bl	8006bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	f003 0310 	and.w	r3, r3, #16
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d020      	beq.n	8006930 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f003 0310 	and.w	r3, r3, #16
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d01b      	beq.n	8006930 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f06f 0210 	mvn.w	r2, #16
 8006900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2208      	movs	r2, #8
 8006906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f940 	bl	8006b9c <HAL_TIM_IC_CaptureCallback>
 800691c:	e005      	b.n	800692a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f932 	bl	8006b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f943 	bl	8006bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00c      	beq.n	8006954 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b00      	cmp	r3, #0
 8006942:	d007      	beq.n	8006954 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f06f 0201 	mvn.w	r2, #1
 800694c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7fa fd54 	bl	80013fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800695a:	2b00      	cmp	r3, #0
 800695c:	d104      	bne.n	8006968 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00c      	beq.n	8006982 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800696e:	2b00      	cmp	r3, #0
 8006970:	d007      	beq.n	8006982 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800697a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fa9b 	bl	8006eb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00c      	beq.n	80069a6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006992:	2b00      	cmp	r3, #0
 8006994:	d007      	beq.n	80069a6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800699e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fa93 	bl	8006ecc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00c      	beq.n	80069ca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d007      	beq.n	80069ca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80069c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f8fd 	bl	8006bc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	f003 0320 	and.w	r3, r3, #32
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00c      	beq.n	80069ee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f003 0320 	and.w	r3, r3, #32
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d007      	beq.n	80069ee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f06f 0220 	mvn.w	r2, #32
 80069e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fa5b 	bl	8006ea4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069ee:	bf00      	nop
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b084      	sub	sp, #16
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a00:	2300      	movs	r3, #0
 8006a02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d101      	bne.n	8006a12 <HAL_TIM_ConfigClockSource+0x1c>
 8006a0e:	2302      	movs	r3, #2
 8006a10:	e0b6      	b.n	8006b80 <HAL_TIM_ConfigClockSource+0x18a>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006a30:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006a34:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a3c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a4e:	d03e      	beq.n	8006ace <HAL_TIM_ConfigClockSource+0xd8>
 8006a50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a54:	f200 8087 	bhi.w	8006b66 <HAL_TIM_ConfigClockSource+0x170>
 8006a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a5c:	f000 8086 	beq.w	8006b6c <HAL_TIM_ConfigClockSource+0x176>
 8006a60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a64:	d87f      	bhi.n	8006b66 <HAL_TIM_ConfigClockSource+0x170>
 8006a66:	2b70      	cmp	r3, #112	@ 0x70
 8006a68:	d01a      	beq.n	8006aa0 <HAL_TIM_ConfigClockSource+0xaa>
 8006a6a:	2b70      	cmp	r3, #112	@ 0x70
 8006a6c:	d87b      	bhi.n	8006b66 <HAL_TIM_ConfigClockSource+0x170>
 8006a6e:	2b60      	cmp	r3, #96	@ 0x60
 8006a70:	d050      	beq.n	8006b14 <HAL_TIM_ConfigClockSource+0x11e>
 8006a72:	2b60      	cmp	r3, #96	@ 0x60
 8006a74:	d877      	bhi.n	8006b66 <HAL_TIM_ConfigClockSource+0x170>
 8006a76:	2b50      	cmp	r3, #80	@ 0x50
 8006a78:	d03c      	beq.n	8006af4 <HAL_TIM_ConfigClockSource+0xfe>
 8006a7a:	2b50      	cmp	r3, #80	@ 0x50
 8006a7c:	d873      	bhi.n	8006b66 <HAL_TIM_ConfigClockSource+0x170>
 8006a7e:	2b40      	cmp	r3, #64	@ 0x40
 8006a80:	d058      	beq.n	8006b34 <HAL_TIM_ConfigClockSource+0x13e>
 8006a82:	2b40      	cmp	r3, #64	@ 0x40
 8006a84:	d86f      	bhi.n	8006b66 <HAL_TIM_ConfigClockSource+0x170>
 8006a86:	2b30      	cmp	r3, #48	@ 0x30
 8006a88:	d064      	beq.n	8006b54 <HAL_TIM_ConfigClockSource+0x15e>
 8006a8a:	2b30      	cmp	r3, #48	@ 0x30
 8006a8c:	d86b      	bhi.n	8006b66 <HAL_TIM_ConfigClockSource+0x170>
 8006a8e:	2b20      	cmp	r3, #32
 8006a90:	d060      	beq.n	8006b54 <HAL_TIM_ConfigClockSource+0x15e>
 8006a92:	2b20      	cmp	r3, #32
 8006a94:	d867      	bhi.n	8006b66 <HAL_TIM_ConfigClockSource+0x170>
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d05c      	beq.n	8006b54 <HAL_TIM_ConfigClockSource+0x15e>
 8006a9a:	2b10      	cmp	r3, #16
 8006a9c:	d05a      	beq.n	8006b54 <HAL_TIM_ConfigClockSource+0x15e>
 8006a9e:	e062      	b.n	8006b66 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ab0:	f000 f978 	bl	8006da4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006ac2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	609a      	str	r2, [r3, #8]
      break;
 8006acc:	e04f      	b.n	8006b6e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ade:	f000 f961 	bl	8006da4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	689a      	ldr	r2, [r3, #8]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006af0:	609a      	str	r2, [r3, #8]
      break;
 8006af2:	e03c      	b.n	8006b6e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b00:	461a      	mov	r2, r3
 8006b02:	f000 f8d3 	bl	8006cac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2150      	movs	r1, #80	@ 0x50
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 f92c 	bl	8006d6a <TIM_ITRx_SetConfig>
      break;
 8006b12:	e02c      	b.n	8006b6e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b20:	461a      	mov	r2, r3
 8006b22:	f000 f8f2 	bl	8006d0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2160      	movs	r1, #96	@ 0x60
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f000 f91c 	bl	8006d6a <TIM_ITRx_SetConfig>
      break;
 8006b32:	e01c      	b.n	8006b6e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b40:	461a      	mov	r2, r3
 8006b42:	f000 f8b3 	bl	8006cac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2140      	movs	r1, #64	@ 0x40
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 f90c 	bl	8006d6a <TIM_ITRx_SetConfig>
      break;
 8006b52:	e00c      	b.n	8006b6e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	4610      	mov	r0, r2
 8006b60:	f000 f903 	bl	8006d6a <TIM_ITRx_SetConfig>
      break;
 8006b64:	e003      	b.n	8006b6e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	73fb      	strb	r3, [r7, #15]
      break;
 8006b6a:	e000      	b.n	8006b6e <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006b6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a2d      	ldr	r2, [pc, #180]	@ (8006ca0 <TIM_Base_SetConfig+0xc8>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d003      	beq.n	8006bf8 <TIM_Base_SetConfig+0x20>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bf6:	d108      	bne.n	8006c0a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a24      	ldr	r2, [pc, #144]	@ (8006ca0 <TIM_Base_SetConfig+0xc8>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d00b      	beq.n	8006c2a <TIM_Base_SetConfig+0x52>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c18:	d007      	beq.n	8006c2a <TIM_Base_SetConfig+0x52>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a21      	ldr	r2, [pc, #132]	@ (8006ca4 <TIM_Base_SetConfig+0xcc>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d003      	beq.n	8006c2a <TIM_Base_SetConfig+0x52>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a20      	ldr	r2, [pc, #128]	@ (8006ca8 <TIM_Base_SetConfig+0xd0>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d108      	bne.n	8006c3c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	689a      	ldr	r2, [r3, #8]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a10      	ldr	r2, [pc, #64]	@ (8006ca0 <TIM_Base_SetConfig+0xc8>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d007      	beq.n	8006c72 <TIM_Base_SetConfig+0x9a>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a0f      	ldr	r2, [pc, #60]	@ (8006ca4 <TIM_Base_SetConfig+0xcc>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d003      	beq.n	8006c72 <TIM_Base_SetConfig+0x9a>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a0e      	ldr	r2, [pc, #56]	@ (8006ca8 <TIM_Base_SetConfig+0xd0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d103      	bne.n	8006c7a <TIM_Base_SetConfig+0xa2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	691a      	ldr	r2, [r3, #16]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f043 0204 	orr.w	r2, r3, #4
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	601a      	str	r2, [r3, #0]
}
 8006c92:	bf00      	nop
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	40012c00 	.word	0x40012c00
 8006ca4:	40014400 	.word	0x40014400
 8006ca8:	40014800 	.word	0x40014800

08006cac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	f023 0201 	bic.w	r2, r3, #1
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	011b      	lsls	r3, r3, #4
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f023 030a 	bic.w	r3, r3, #10
 8006ce8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	621a      	str	r2, [r3, #32]
}
 8006cfe:	bf00      	nop
 8006d00:	371c      	adds	r7, #28
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b087      	sub	sp, #28
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	60f8      	str	r0, [r7, #12]
 8006d12:	60b9      	str	r1, [r7, #8]
 8006d14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6a1b      	ldr	r3, [r3, #32]
 8006d20:	f023 0210 	bic.w	r2, r3, #16
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	031b      	lsls	r3, r3, #12
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	011b      	lsls	r3, r3, #4
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	621a      	str	r2, [r3, #32]
}
 8006d5e:	bf00      	nop
 8006d60:	371c      	adds	r7, #28
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b085      	sub	sp, #20
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006d80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	f043 0307 	orr.w	r3, r3, #7
 8006d90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	609a      	str	r2, [r3, #8]
}
 8006d98:	bf00      	nop
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
 8006db0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006dbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	021a      	lsls	r2, r3, #8
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	609a      	str	r2, [r3, #8]
}
 8006dd8:	bf00      	nop
 8006dda:	371c      	adds	r7, #28
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d101      	bne.n	8006dfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006df8:	2302      	movs	r3, #2
 8006dfa:	e04a      	b.n	8006e92 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a1f      	ldr	r2, [pc, #124]	@ (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d108      	bne.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006e2c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a12      	ldr	r2, [pc, #72]	@ (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d004      	beq.n	8006e66 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e64:	d10c      	bne.n	8006e80 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3714      	adds	r7, #20
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	40012c00 	.word	0x40012c00

08006ea4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <aci_gap_set_non_discoverable>:
 */

#include "auto/ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b088      	sub	sp, #32
 8006ee4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006eea:	f107 0308 	add.w	r3, r7, #8
 8006eee:	2218      	movs	r2, #24
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f001 f92d 	bl	8008152 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006ef8:	233f      	movs	r3, #63	@ 0x3f
 8006efa:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006efc:	2381      	movs	r3, #129	@ 0x81
 8006efe:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006f00:	1dfb      	adds	r3, r7, #7
 8006f02:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006f04:	2301      	movs	r3, #1
 8006f06:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006f08:	f107 0308 	add.w	r3, r7, #8
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f001 fba8 	bl	8008664 <hci_send_req>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	da01      	bge.n	8006f1e <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006f1a:	23ff      	movs	r3, #255	@ 0xff
 8006f1c:	e000      	b.n	8006f20 <aci_gap_set_non_discoverable+0x40>
  return status;
 8006f1e:	79fb      	ldrb	r3, [r7, #7]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3720      	adds	r7, #32
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8006f28:	b5b0      	push	{r4, r5, r7, lr}
 8006f2a:	b0ce      	sub	sp, #312	@ 0x138
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	4605      	mov	r5, r0
 8006f30:	460c      	mov	r4, r1
 8006f32:	4610      	mov	r0, r2
 8006f34:	4619      	mov	r1, r3
 8006f36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f3a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8006f3e:	462a      	mov	r2, r5
 8006f40:	701a      	strb	r2, [r3, #0]
 8006f42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f46:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006f4a:	4622      	mov	r2, r4
 8006f4c:	801a      	strh	r2, [r3, #0]
 8006f4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f52:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8006f56:	4602      	mov	r2, r0
 8006f58:	801a      	strh	r2, [r3, #0]
 8006f5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f5e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8006f62:	460a      	mov	r2, r1
 8006f64:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8006f66:	f107 0310 	add.w	r3, r7, #16
 8006f6a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006f6e:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8006f72:	3308      	adds	r3, #8
 8006f74:	f107 0210 	add.w	r2, r7, #16
 8006f78:	4413      	add	r3, r2
 8006f7a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8006f7e:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8006f82:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8006f86:	4413      	add	r3, r2
 8006f88:	3309      	adds	r3, #9
 8006f8a:	f107 0210 	add.w	r2, r7, #16
 8006f8e:	4413      	add	r3, r2
 8006f90:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006f94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f98:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8006fa6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006faa:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006fae:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8006fb2:	7812      	ldrb	r2, [r2, #0]
 8006fb4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006fb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006fba:	3301      	adds	r3, #1
 8006fbc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8006fc0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006fc4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006fc8:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8006fcc:	8812      	ldrh	r2, [r2, #0]
 8006fce:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8006fd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006fd6:	3302      	adds	r3, #2
 8006fd8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006fdc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006fe0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006fe4:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8006fe8:	8812      	ldrh	r2, [r2, #0]
 8006fea:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8006fee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006ff2:	3302      	adds	r3, #2
 8006ff4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8006ff8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006ffc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007000:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8007004:	7812      	ldrb	r2, [r2, #0]
 8007006:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007008:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800700c:	3301      	adds	r3, #1
 800700e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8007012:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007016:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800701a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800701c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007020:	3301      	adds	r3, #1
 8007022:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8007026:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800702a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800702e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8007030:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007034:	3301      	adds	r3, #1
 8007036:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800703a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800703e:	3308      	adds	r3, #8
 8007040:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8007044:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8007048:	4618      	mov	r0, r3
 800704a:	f001 f872 	bl	8008132 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800704e:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8007052:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007056:	4413      	add	r3, r2
 8007058:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800705c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007060:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8007064:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007066:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800706a:	3301      	adds	r3, #1
 800706c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8007070:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007074:	3301      	adds	r3, #1
 8007076:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800707a:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800707e:	4618      	mov	r0, r3
 8007080:	f001 f857 	bl	8008132 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8007084:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8007088:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800708c:	4413      	add	r3, r2
 800708e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8007092:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007096:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800709a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800709c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80070a0:	3302      	adds	r3, #2
 80070a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 80070a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80070aa:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 80070ae:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80070b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80070b4:	3302      	adds	r3, #2
 80070b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80070ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80070be:	2218      	movs	r2, #24
 80070c0:	2100      	movs	r1, #0
 80070c2:	4618      	mov	r0, r3
 80070c4:	f001 f845 	bl	8008152 <Osal_MemSet>
  rq.ogf = 0x3f;
 80070c8:	233f      	movs	r3, #63	@ 0x3f
 80070ca:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 80070ce:	2383      	movs	r3, #131	@ 0x83
 80070d0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80070d4:	f107 0310 	add.w	r3, r7, #16
 80070d8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80070dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80070e0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80070e4:	f107 030f 	add.w	r3, r7, #15
 80070e8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80070ec:	2301      	movs	r3, #1
 80070ee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80070f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80070f6:	2100      	movs	r1, #0
 80070f8:	4618      	mov	r0, r3
 80070fa:	f001 fab3 	bl	8008664 <hci_send_req>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	da01      	bge.n	8007108 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8007104:	23ff      	movs	r3, #255	@ 0xff
 8007106:	e004      	b.n	8007112 <aci_gap_set_discoverable+0x1ea>
  return status;
 8007108:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800710c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007110:	781b      	ldrb	r3, [r3, #0]
}
 8007112:	4618      	mov	r0, r3
 8007114:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8007118:	46bd      	mov	sp, r7
 800711a:	bdb0      	pop	{r4, r5, r7, pc}

0800711c <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b0cc      	sub	sp, #304	@ 0x130
 8007120:	af00      	add	r7, sp, #0
 8007122:	4602      	mov	r2, r0
 8007124:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007128:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800712c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800712e:	f107 0310 	add.w	r3, r7, #16
 8007132:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007136:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800713a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800713e:	2200      	movs	r2, #0
 8007140:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007142:	2300      	movs	r3, #0
 8007144:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8007148:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800714c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007150:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007154:	7812      	ldrb	r2, [r2, #0]
 8007156:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007158:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800715c:	3301      	adds	r3, #1
 800715e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007162:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007166:	2218      	movs	r2, #24
 8007168:	2100      	movs	r1, #0
 800716a:	4618      	mov	r0, r3
 800716c:	f000 fff1 	bl	8008152 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007170:	233f      	movs	r3, #63	@ 0x3f
 8007172:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8007176:	2385      	movs	r3, #133	@ 0x85
 8007178:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800717c:	f107 0310 	add.w	r3, r7, #16
 8007180:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007184:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007188:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800718c:	f107 030f 	add.w	r3, r7, #15
 8007190:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007194:	2301      	movs	r3, #1
 8007196:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800719a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800719e:	2100      	movs	r1, #0
 80071a0:	4618      	mov	r0, r3
 80071a2:	f001 fa5f 	bl	8008664 <hci_send_req>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	da01      	bge.n	80071b0 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80071ac:	23ff      	movs	r3, #255	@ 0xff
 80071ae:	e004      	b.n	80071ba <aci_gap_set_io_capability+0x9e>
  return status;
 80071b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80071b4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80071b8:	781b      	ldrb	r3, [r3, #0]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80071c4:	b5b0      	push	{r4, r5, r7, lr}
 80071c6:	b0cc      	sub	sp, #304	@ 0x130
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	4605      	mov	r5, r0
 80071cc:	460c      	mov	r4, r1
 80071ce:	4610      	mov	r0, r2
 80071d0:	4619      	mov	r1, r3
 80071d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80071d6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80071da:	462a      	mov	r2, r5
 80071dc:	701a      	strb	r2, [r3, #0]
 80071de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80071e2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80071e6:	4622      	mov	r2, r4
 80071e8:	701a      	strb	r2, [r3, #0]
 80071ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80071ee:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80071f2:	4602      	mov	r2, r0
 80071f4:	701a      	strb	r2, [r3, #0]
 80071f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80071fa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071fe:	460a      	mov	r2, r1
 8007200:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007202:	f107 0310 	add.w	r3, r7, #16
 8007206:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800720a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800720e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007212:	2200      	movs	r2, #0
 8007214:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007216:	2300      	movs	r3, #0
 8007218:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800721c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007220:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007224:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007228:	7812      	ldrb	r2, [r2, #0]
 800722a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800722c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007230:	3301      	adds	r3, #1
 8007232:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8007236:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800723a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800723e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007242:	7812      	ldrb	r2, [r2, #0]
 8007244:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007246:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800724a:	3301      	adds	r3, #1
 800724c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8007250:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007254:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007258:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800725c:	7812      	ldrb	r2, [r2, #0]
 800725e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007260:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007264:	3301      	adds	r3, #1
 8007266:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800726a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800726e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007272:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8007276:	7812      	ldrb	r2, [r2, #0]
 8007278:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800727a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800727e:	3301      	adds	r3, #1
 8007280:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8007284:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007288:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800728c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800728e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007292:	3301      	adds	r3, #1
 8007294:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8007298:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800729c:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 80072a0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80072a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80072a6:	3301      	adds	r3, #1
 80072a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80072ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80072b0:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80072b4:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80072b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80072ba:	3301      	adds	r3, #1
 80072bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80072c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80072c4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80072c8:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80072cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80072d0:	3304      	adds	r3, #4
 80072d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80072d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80072da:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 80072de:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80072e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80072e4:	3301      	adds	r3, #1
 80072e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80072ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80072ee:	2218      	movs	r2, #24
 80072f0:	2100      	movs	r1, #0
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 ff2d 	bl	8008152 <Osal_MemSet>
  rq.ogf = 0x3f;
 80072f8:	233f      	movs	r3, #63	@ 0x3f
 80072fa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 80072fe:	2386      	movs	r3, #134	@ 0x86
 8007300:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007304:	f107 0310 	add.w	r3, r7, #16
 8007308:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800730c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007310:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007314:	f107 030f 	add.w	r3, r7, #15
 8007318:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800731c:	2301      	movs	r3, #1
 800731e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007322:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007326:	2100      	movs	r1, #0
 8007328:	4618      	mov	r0, r3
 800732a:	f001 f99b 	bl	8008664 <hci_send_req>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	da01      	bge.n	8007338 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8007334:	23ff      	movs	r3, #255	@ 0xff
 8007336:	e004      	b.n	8007342 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8007338:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800733c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007340:	781b      	ldrb	r3, [r3, #0]
}
 8007342:	4618      	mov	r0, r3
 8007344:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007348:	46bd      	mov	sp, r7
 800734a:	bdb0      	pop	{r4, r5, r7, pc}

0800734c <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b0cc      	sub	sp, #304	@ 0x130
 8007350:	af00      	add	r7, sp, #0
 8007352:	4602      	mov	r2, r0
 8007354:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007358:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800735c:	6019      	str	r1, [r3, #0]
 800735e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007362:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007366:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8007368:	f107 0310 	add.w	r3, r7, #16
 800736c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007370:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007374:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007378:	2200      	movs	r2, #0
 800737a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800737c:	2300      	movs	r3, #0
 800737e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007382:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007386:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800738a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800738e:	8812      	ldrh	r2, [r2, #0]
 8007390:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007392:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007396:	3302      	adds	r3, #2
 8007398:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800739c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80073a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80073a4:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80073a8:	6812      	ldr	r2, [r2, #0]
 80073aa:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80073ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80073b2:	3304      	adds	r3, #4
 80073b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80073b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80073bc:	2218      	movs	r2, #24
 80073be:	2100      	movs	r1, #0
 80073c0:	4618      	mov	r0, r3
 80073c2:	f000 fec6 	bl	8008152 <Osal_MemSet>
  rq.ogf = 0x3f;
 80073c6:	233f      	movs	r3, #63	@ 0x3f
 80073c8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 80073cc:	2388      	movs	r3, #136	@ 0x88
 80073ce:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80073d2:	f107 0310 	add.w	r3, r7, #16
 80073d6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80073da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80073de:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80073e2:	f107 030f 	add.w	r3, r7, #15
 80073e6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80073ea:	2301      	movs	r3, #1
 80073ec:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80073f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80073f4:	2100      	movs	r1, #0
 80073f6:	4618      	mov	r0, r3
 80073f8:	f001 f934 	bl	8008664 <hci_send_req>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	da01      	bge.n	8007406 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8007402:	23ff      	movs	r3, #255	@ 0xff
 8007404:	e004      	b.n	8007410 <aci_gap_pass_key_resp+0xc4>
  return status;
 8007406:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800740a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800740e:	781b      	ldrb	r3, [r3, #0]
}
 8007410:	4618      	mov	r0, r3
 8007412:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800741a:	b590      	push	{r4, r7, lr}
 800741c:	b0cd      	sub	sp, #308	@ 0x134
 800741e:	af00      	add	r7, sp, #0
 8007420:	4604      	mov	r4, r0
 8007422:	4608      	mov	r0, r1
 8007424:	4611      	mov	r1, r2
 8007426:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800742a:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800742e:	6013      	str	r3, [r2, #0]
 8007430:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007434:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007438:	4622      	mov	r2, r4
 800743a:	701a      	strb	r2, [r3, #0]
 800743c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007440:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007444:	4602      	mov	r2, r0
 8007446:	701a      	strb	r2, [r3, #0]
 8007448:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800744c:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8007450:	460a      	mov	r2, r1
 8007452:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8007454:	f107 0310 	add.w	r3, r7, #16
 8007458:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800745c:	f107 0308 	add.w	r3, r7, #8
 8007460:	2207      	movs	r2, #7
 8007462:	2100      	movs	r1, #0
 8007464:	4618      	mov	r0, r3
 8007466:	f000 fe74 	bl	8008152 <Osal_MemSet>
  int index_input = 0;
 800746a:	2300      	movs	r3, #0
 800746c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8007470:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007474:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007478:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800747c:	7812      	ldrb	r2, [r2, #0]
 800747e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007480:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007484:	3301      	adds	r3, #1
 8007486:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800748a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800748e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007492:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007496:	7812      	ldrb	r2, [r2, #0]
 8007498:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800749a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800749e:	3301      	adds	r3, #1
 80074a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 80074a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80074a8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80074ac:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80074b0:	7812      	ldrb	r2, [r2, #0]
 80074b2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80074b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80074b8:	3301      	adds	r3, #1
 80074ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80074be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80074c2:	2218      	movs	r2, #24
 80074c4:	2100      	movs	r1, #0
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 fe43 	bl	8008152 <Osal_MemSet>
  rq.ogf = 0x3f;
 80074cc:	233f      	movs	r3, #63	@ 0x3f
 80074ce:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 80074d2:	238a      	movs	r3, #138	@ 0x8a
 80074d4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80074d8:	f107 0310 	add.w	r3, r7, #16
 80074dc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80074e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80074e4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80074e8:	f107 0308 	add.w	r3, r7, #8
 80074ec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80074f0:	2307      	movs	r3, #7
 80074f2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80074f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80074fa:	2100      	movs	r1, #0
 80074fc:	4618      	mov	r0, r3
 80074fe:	f001 f8b1 	bl	8008664 <hci_send_req>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	da01      	bge.n	800750c <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8007508:	23ff      	movs	r3, #255	@ 0xff
 800750a:	e02e      	b.n	800756a <aci_gap_init+0x150>
  if ( resp.Status )
 800750c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007510:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d005      	beq.n	8007526 <aci_gap_init+0x10c>
    return resp.Status;
 800751a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800751e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	e021      	b.n	800756a <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8007526:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800752a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800752e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007532:	b29a      	uxth	r2, r3
 8007534:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007538:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8007540:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007544:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007548:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800754c:	b29a      	uxth	r2, r3
 800754e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007552:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8007554:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007558:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800755c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007560:	b29a      	uxth	r2, r3
 8007562:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007566:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8007570:	46bd      	mov	sp, r7
 8007572:	bd90      	pop	{r4, r7, pc}

08007574 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b0cc      	sub	sp, #304	@ 0x130
 8007578:	af00      	add	r7, sp, #0
 800757a:	4602      	mov	r2, r0
 800757c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007580:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007584:	6019      	str	r1, [r3, #0]
 8007586:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800758a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800758e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8007590:	f107 0310 	add.w	r3, r7, #16
 8007594:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007598:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800759c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80075a0:	2200      	movs	r2, #0
 80075a2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80075a4:	2300      	movs	r3, #0
 80075a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 80075aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80075ae:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80075b2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80075b6:	7812      	ldrb	r2, [r2, #0]
 80075b8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80075ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80075be:	3301      	adds	r3, #1
 80075c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80075c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80075c8:	1c58      	adds	r0, r3, #1
 80075ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80075ce:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80075d2:	781a      	ldrb	r2, [r3, #0]
 80075d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80075d8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80075dc:	6819      	ldr	r1, [r3, #0]
 80075de:	f000 fda8 	bl	8008132 <Osal_MemCpy>
  index_input += AdvDataLen;
 80075e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80075e6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80075f0:	4413      	add	r3, r2
 80075f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80075f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80075fa:	2218      	movs	r2, #24
 80075fc:	2100      	movs	r1, #0
 80075fe:	4618      	mov	r0, r3
 8007600:	f000 fda7 	bl	8008152 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007604:	233f      	movs	r3, #63	@ 0x3f
 8007606:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800760a:	238e      	movs	r3, #142	@ 0x8e
 800760c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007610:	f107 0310 	add.w	r3, r7, #16
 8007614:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007618:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800761c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007620:	f107 030f 	add.w	r3, r7, #15
 8007624:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007628:	2301      	movs	r3, #1
 800762a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800762e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007632:	2100      	movs	r1, #0
 8007634:	4618      	mov	r0, r3
 8007636:	f001 f815 	bl	8008664 <hci_send_req>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	da01      	bge.n	8007644 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8007640:	23ff      	movs	r3, #255	@ 0xff
 8007642:	e004      	b.n	800764e <aci_gap_update_adv_data+0xda>
  return status;
 8007644:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007648:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800764c:	781b      	ldrb	r3, [r3, #0]
}
 800764e:	4618      	mov	r0, r3
 8007650:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b088      	sub	sp, #32
 800765c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800765e:	2300      	movs	r3, #0
 8007660:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007662:	f107 0308 	add.w	r3, r7, #8
 8007666:	2218      	movs	r2, #24
 8007668:	2100      	movs	r1, #0
 800766a:	4618      	mov	r0, r3
 800766c:	f000 fd71 	bl	8008152 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007670:	233f      	movs	r3, #63	@ 0x3f
 8007672:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8007674:	2392      	movs	r3, #146	@ 0x92
 8007676:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007678:	1dfb      	adds	r3, r7, #7
 800767a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800767c:	2301      	movs	r3, #1
 800767e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007680:	f107 0308 	add.w	r3, r7, #8
 8007684:	2100      	movs	r1, #0
 8007686:	4618      	mov	r0, r3
 8007688:	f000 ffec 	bl	8008664 <hci_send_req>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	da01      	bge.n	8007696 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007692:	23ff      	movs	r3, #255	@ 0xff
 8007694:	e000      	b.n	8007698 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8007696:	79fb      	ldrb	r3, [r7, #7]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3720      	adds	r7, #32
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b0cc      	sub	sp, #304	@ 0x130
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	4602      	mov	r2, r0
 80076a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80076ac:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80076b0:	801a      	strh	r2, [r3, #0]
 80076b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80076b6:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80076ba:	460a      	mov	r2, r1
 80076bc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80076be:	f107 0310 	add.w	r3, r7, #16
 80076c2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80076c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80076ca:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80076ce:	2200      	movs	r2, #0
 80076d0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80076d2:	2300      	movs	r3, #0
 80076d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80076d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80076dc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80076e0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80076e4:	8812      	ldrh	r2, [r2, #0]
 80076e6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80076e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80076ec:	3302      	adds	r3, #2
 80076ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80076f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80076f6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80076fa:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80076fe:	7812      	ldrb	r2, [r2, #0]
 8007700:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007702:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007706:	3301      	adds	r3, #1
 8007708:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800770c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007710:	2218      	movs	r2, #24
 8007712:	2100      	movs	r1, #0
 8007714:	4618      	mov	r0, r3
 8007716:	f000 fd1c 	bl	8008152 <Osal_MemSet>
  rq.ogf = 0x3f;
 800771a:	233f      	movs	r3, #63	@ 0x3f
 800771c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8007720:	23a5      	movs	r3, #165	@ 0xa5
 8007722:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007726:	f107 0310 	add.w	r3, r7, #16
 800772a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800772e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007732:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007736:	f107 030f 	add.w	r3, r7, #15
 800773a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800773e:	2301      	movs	r3, #1
 8007740:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007744:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007748:	2100      	movs	r1, #0
 800774a:	4618      	mov	r0, r3
 800774c:	f000 ff8a 	bl	8008664 <hci_send_req>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	da01      	bge.n	800775a <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8007756:	23ff      	movs	r3, #255	@ 0xff
 8007758:	e004      	b.n	8007764 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800775a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800775e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007762:	781b      	ldrb	r3, [r3, #0]
}
 8007764:	4618      	mov	r0, r3
 8007766:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <aci_gatt_init>:
 */

#include "auto/ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b088      	sub	sp, #32
 8007772:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007774:	2300      	movs	r3, #0
 8007776:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007778:	f107 0308 	add.w	r3, r7, #8
 800777c:	2218      	movs	r2, #24
 800777e:	2100      	movs	r1, #0
 8007780:	4618      	mov	r0, r3
 8007782:	f000 fce6 	bl	8008152 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007786:	233f      	movs	r3, #63	@ 0x3f
 8007788:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800778a:	f240 1301 	movw	r3, #257	@ 0x101
 800778e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007790:	1dfb      	adds	r3, r7, #7
 8007792:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007794:	2301      	movs	r3, #1
 8007796:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007798:	f107 0308 	add.w	r3, r7, #8
 800779c:	2100      	movs	r1, #0
 800779e:	4618      	mov	r0, r3
 80077a0:	f000 ff60 	bl	8008664 <hci_send_req>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	da01      	bge.n	80077ae <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80077aa:	23ff      	movs	r3, #255	@ 0xff
 80077ac:	e000      	b.n	80077b0 <aci_gatt_init+0x42>
  return status;
 80077ae:	79fb      	ldrb	r3, [r7, #7]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3720      	adds	r7, #32
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80077b8:	b590      	push	{r4, r7, lr}
 80077ba:	b0cf      	sub	sp, #316	@ 0x13c
 80077bc:	af00      	add	r7, sp, #0
 80077be:	4604      	mov	r4, r0
 80077c0:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 80077c4:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 80077c8:	6001      	str	r1, [r0, #0]
 80077ca:	4610      	mov	r0, r2
 80077cc:	4619      	mov	r1, r3
 80077ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077d2:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80077d6:	4622      	mov	r2, r4
 80077d8:	701a      	strb	r2, [r3, #0]
 80077da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077de:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80077e2:	4602      	mov	r2, r0
 80077e4:	701a      	strb	r2, [r3, #0]
 80077e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077ea:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80077ee:	460a      	mov	r2, r1
 80077f0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80077f2:	f107 0310 	add.w	r3, r7, #16
 80077f6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80077fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077fe:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d00a      	beq.n	800781e <aci_gatt_add_service+0x66>
 8007808:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800780c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	2b02      	cmp	r3, #2
 8007814:	d101      	bne.n	800781a <aci_gatt_add_service+0x62>
 8007816:	2311      	movs	r3, #17
 8007818:	e002      	b.n	8007820 <aci_gatt_add_service+0x68>
 800781a:	2301      	movs	r3, #1
 800781c:	e000      	b.n	8007820 <aci_gatt_add_service+0x68>
 800781e:	2303      	movs	r3, #3
 8007820:	f107 0210 	add.w	r2, r7, #16
 8007824:	4413      	add	r3, r2
 8007826:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800782a:	f107 030c 	add.w	r3, r7, #12
 800782e:	2203      	movs	r2, #3
 8007830:	2100      	movs	r1, #0
 8007832:	4618      	mov	r0, r3
 8007834:	f000 fc8d 	bl	8008152 <Osal_MemSet>
  int index_input = 0;
 8007838:	2300      	movs	r3, #0
 800783a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800783e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007842:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007846:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800784a:	7812      	ldrb	r2, [r2, #0]
 800784c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800784e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007852:	3301      	adds	r3, #1
 8007854:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8007858:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800785c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d002      	beq.n	800786c <aci_gatt_add_service+0xb4>
 8007866:	2b02      	cmp	r3, #2
 8007868:	d004      	beq.n	8007874 <aci_gatt_add_service+0xbc>
 800786a:	e007      	b.n	800787c <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800786c:	2302      	movs	r3, #2
 800786e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8007872:	e005      	b.n	8007880 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8007874:	2310      	movs	r3, #16
 8007876:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800787a:	e001      	b.n	8007880 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800787c:	2397      	movs	r3, #151	@ 0x97
 800787e:	e06c      	b.n	800795a <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8007880:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007884:	1c58      	adds	r0, r3, #1
 8007886:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800788a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800788e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007892:	6819      	ldr	r1, [r3, #0]
 8007894:	f000 fc4d 	bl	8008132 <Osal_MemCpy>
    index_input += size;
 8007898:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800789c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80078a0:	4413      	add	r3, r2
 80078a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 80078a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80078aa:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80078ae:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80078b2:	7812      	ldrb	r2, [r2, #0]
 80078b4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80078b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80078ba:	3301      	adds	r3, #1
 80078bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80078c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80078c4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80078c8:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80078cc:	7812      	ldrb	r2, [r2, #0]
 80078ce:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80078d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80078d4:	3301      	adds	r3, #1
 80078d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80078da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80078de:	2218      	movs	r2, #24
 80078e0:	2100      	movs	r1, #0
 80078e2:	4618      	mov	r0, r3
 80078e4:	f000 fc35 	bl	8008152 <Osal_MemSet>
  rq.ogf = 0x3f;
 80078e8:	233f      	movs	r3, #63	@ 0x3f
 80078ea:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 80078ee:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80078f2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80078f6:	f107 0310 	add.w	r3, r7, #16
 80078fa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80078fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007902:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8007906:	f107 030c 	add.w	r3, r7, #12
 800790a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800790e:	2303      	movs	r3, #3
 8007910:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007914:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007918:	2100      	movs	r1, #0
 800791a:	4618      	mov	r0, r3
 800791c:	f000 fea2 	bl	8008664 <hci_send_req>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	da01      	bge.n	800792a <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8007926:	23ff      	movs	r3, #255	@ 0xff
 8007928:	e017      	b.n	800795a <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800792a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800792e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d005      	beq.n	8007944 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8007938:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800793c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	e00a      	b.n	800795a <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8007944:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007948:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800794c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007950:	b29a      	uxth	r2, r3
 8007952:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8007956:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8007960:	46bd      	mov	sp, r7
 8007962:	bd90      	pop	{r4, r7, pc}

08007964 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8007964:	b590      	push	{r4, r7, lr}
 8007966:	b0d1      	sub	sp, #324	@ 0x144
 8007968:	af00      	add	r7, sp, #0
 800796a:	4604      	mov	r4, r0
 800796c:	4608      	mov	r0, r1
 800796e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8007972:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8007976:	600a      	str	r2, [r1, #0]
 8007978:	4619      	mov	r1, r3
 800797a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800797e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8007982:	4622      	mov	r2, r4
 8007984:	801a      	strh	r2, [r3, #0]
 8007986:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800798a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800798e:	4602      	mov	r2, r0
 8007990:	701a      	strb	r2, [r3, #0]
 8007992:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007996:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800799a:	460a      	mov	r2, r1
 800799c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800799e:	f107 0318 	add.w	r3, r7, #24
 80079a2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80079a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80079aa:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d00a      	beq.n	80079ca <aci_gatt_add_char+0x66>
 80079b4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80079b8:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d101      	bne.n	80079c6 <aci_gatt_add_char+0x62>
 80079c2:	2313      	movs	r3, #19
 80079c4:	e002      	b.n	80079cc <aci_gatt_add_char+0x68>
 80079c6:	2303      	movs	r3, #3
 80079c8:	e000      	b.n	80079cc <aci_gatt_add_char+0x68>
 80079ca:	2305      	movs	r3, #5
 80079cc:	f107 0218 	add.w	r2, r7, #24
 80079d0:	4413      	add	r3, r2
 80079d2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80079d6:	f107 0314 	add.w	r3, r7, #20
 80079da:	2203      	movs	r2, #3
 80079dc:	2100      	movs	r1, #0
 80079de:	4618      	mov	r0, r3
 80079e0:	f000 fbb7 	bl	8008152 <Osal_MemSet>
  int index_input = 0;
 80079e4:	2300      	movs	r3, #0
 80079e6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 80079ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80079ee:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80079f2:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80079f6:	8812      	ldrh	r2, [r2, #0]
 80079f8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80079fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80079fe:	3302      	adds	r3, #2
 8007a00:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8007a04:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8007a08:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8007a0c:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8007a10:	7812      	ldrb	r2, [r2, #0]
 8007a12:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007a14:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007a18:	3301      	adds	r3, #1
 8007a1a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8007a1e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007a22:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d002      	beq.n	8007a32 <aci_gatt_add_char+0xce>
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d004      	beq.n	8007a3a <aci_gatt_add_char+0xd6>
 8007a30:	e007      	b.n	8007a42 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8007a32:	2302      	movs	r3, #2
 8007a34:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8007a38:	e005      	b.n	8007a46 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8007a3a:	2310      	movs	r3, #16
 8007a3c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8007a40:	e001      	b.n	8007a46 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8007a42:	2397      	movs	r3, #151	@ 0x97
 8007a44:	e091      	b.n	8007b6a <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8007a46:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8007a4a:	1cd8      	adds	r0, r3, #3
 8007a4c:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8007a50:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007a54:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007a58:	6819      	ldr	r1, [r3, #0]
 8007a5a:	f000 fb6a 	bl	8008132 <Osal_MemCpy>
    index_input += size;
 8007a5e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8007a62:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007a66:	4413      	add	r3, r2
 8007a68:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8007a6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007a70:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8007a74:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8007a78:	8812      	ldrh	r2, [r2, #0]
 8007a7a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007a7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007a80:	3302      	adds	r3, #2
 8007a82:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8007a86:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007a8a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8007a8e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8007a90:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007a94:	3301      	adds	r3, #1
 8007a96:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8007a9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007a9e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8007aa2:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8007aa4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8007aae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007ab2:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8007ab6:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8007ab8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007abc:	3301      	adds	r3, #1
 8007abe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8007ac2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007ac6:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8007aca:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8007acc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8007ad6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007ada:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8007ade:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8007ae0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007aea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007aee:	2218      	movs	r2, #24
 8007af0:	2100      	movs	r1, #0
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 fb2d 	bl	8008152 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007af8:	233f      	movs	r3, #63	@ 0x3f
 8007afa:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8007afe:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8007b02:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8007b06:	f107 0318 	add.w	r3, r7, #24
 8007b0a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8007b0e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007b12:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8007b16:	f107 0314 	add.w	r3, r7, #20
 8007b1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8007b1e:	2303      	movs	r3, #3
 8007b20:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007b24:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007b28:	2100      	movs	r1, #0
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f000 fd9a 	bl	8008664 <hci_send_req>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	da01      	bge.n	8007b3a <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8007b36:	23ff      	movs	r3, #255	@ 0xff
 8007b38:	e017      	b.n	8007b6a <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8007b3a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007b3e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d005      	beq.n	8007b54 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8007b48:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007b4c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	e00a      	b.n	8007b6a <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8007b54:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007b58:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b5c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8007b66:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd90      	pop	{r4, r7, pc}

08007b74 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8007b74:	b5b0      	push	{r4, r5, r7, lr}
 8007b76:	b0cc      	sub	sp, #304	@ 0x130
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	4605      	mov	r5, r0
 8007b7c:	460c      	mov	r4, r1
 8007b7e:	4610      	mov	r0, r2
 8007b80:	4619      	mov	r1, r3
 8007b82:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007b86:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007b8a:	462a      	mov	r2, r5
 8007b8c:	801a      	strh	r2, [r3, #0]
 8007b8e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007b92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b96:	4622      	mov	r2, r4
 8007b98:	801a      	strh	r2, [r3, #0]
 8007b9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007b9e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	701a      	strb	r2, [r3, #0]
 8007ba6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007baa:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8007bae:	460a      	mov	r2, r1
 8007bb0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8007bb2:	f107 0310 	add.w	r3, r7, #16
 8007bb6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007bba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007bbe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8007bcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007bd0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007bd4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007bd8:	8812      	ldrh	r2, [r2, #0]
 8007bda:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007bdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007be0:	3302      	adds	r3, #2
 8007be2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8007be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007bea:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007bee:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8007bf2:	8812      	ldrh	r2, [r2, #0]
 8007bf4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007bf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007bfa:	3302      	adds	r3, #2
 8007bfc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8007c00:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007c04:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007c08:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8007c0c:	7812      	ldrb	r2, [r2, #0]
 8007c0e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007c10:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007c14:	3301      	adds	r3, #1
 8007c16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8007c1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007c1e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007c22:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8007c26:	7812      	ldrb	r2, [r2, #0]
 8007c28:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007c2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007c2e:	3301      	adds	r3, #1
 8007c30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8007c34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007c38:	1d98      	adds	r0, r3, #6
 8007c3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007c3e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	461a      	mov	r2, r3
 8007c46:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8007c4a:	f000 fa72 	bl	8008132 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8007c4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007c52:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007c5c:	4413      	add	r3, r2
 8007c5e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007c66:	2218      	movs	r2, #24
 8007c68:	2100      	movs	r1, #0
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 fa71 	bl	8008152 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007c70:	233f      	movs	r3, #63	@ 0x3f
 8007c72:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8007c76:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8007c7a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007c7e:	f107 0310 	add.w	r3, r7, #16
 8007c82:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007c86:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007c8a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007c8e:	f107 030f 	add.w	r3, r7, #15
 8007c92:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007c96:	2301      	movs	r3, #1
 8007c98:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007c9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 fcde 	bl	8008664 <hci_send_req>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	da01      	bge.n	8007cb2 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8007cae:	23ff      	movs	r3, #255	@ 0xff
 8007cb0:	e004      	b.n	8007cbc <aci_gatt_update_char_value+0x148>
  return status;
 8007cb2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007cb6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007cba:	781b      	ldrb	r3, [r3, #0]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bdb0      	pop	{r4, r5, r7, pc}

08007cc6 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b0cc      	sub	sp, #304	@ 0x130
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	4602      	mov	r2, r0
 8007cce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007cd2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007cd6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8007cd8:	f107 0310 	add.w	r3, r7, #16
 8007cdc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007ce0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007ce4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007ce8:	2200      	movs	r2, #0
 8007cea:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007cec:	2300      	movs	r3, #0
 8007cee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007cf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007cf6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007cfa:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007cfe:	8812      	ldrh	r2, [r2, #0]
 8007d00:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007d02:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007d06:	3302      	adds	r3, #2
 8007d08:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007d10:	2218      	movs	r2, #24
 8007d12:	2100      	movs	r1, #0
 8007d14:	4618      	mov	r0, r3
 8007d16:	f000 fa1c 	bl	8008152 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007d1a:	233f      	movs	r3, #63	@ 0x3f
 8007d1c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8007d20:	f240 1325 	movw	r3, #293	@ 0x125
 8007d24:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007d28:	f107 0310 	add.w	r3, r7, #16
 8007d2c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007d30:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007d34:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007d38:	f107 030f 	add.w	r3, r7, #15
 8007d3c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007d40:	2301      	movs	r3, #1
 8007d42:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007d46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f000 fc89 	bl	8008664 <hci_send_req>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	da01      	bge.n	8007d5c <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8007d58:	23ff      	movs	r3, #255	@ 0xff
 8007d5a:	e004      	b.n	8007d66 <aci_gatt_confirm_indication+0xa0>
  return status;
 8007d5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007d60:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007d64:	781b      	ldrb	r3, [r3, #0]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <aci_hal_write_config_data>:
#include "auto/ble_hal_aci.h"

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b0cc      	sub	sp, #304	@ 0x130
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007d7a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007d7e:	601a      	str	r2, [r3, #0]
 8007d80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007d84:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007d88:	4602      	mov	r2, r0
 8007d8a:	701a      	strb	r2, [r3, #0]
 8007d8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007d90:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007d94:	460a      	mov	r2, r1
 8007d96:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8007d98:	f107 0310 	add.w	r3, r7, #16
 8007d9c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007da0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007da4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007da8:	2200      	movs	r2, #0
 8007daa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007dac:	2300      	movs	r3, #0
 8007dae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8007db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007db6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007dba:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007dbe:	7812      	ldrb	r2, [r2, #0]
 8007dc0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007dc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8007dcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007dd0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007dd4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007dd8:	7812      	ldrb	r2, [r2, #0]
 8007dda:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007ddc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007de0:	3301      	adds	r3, #1
 8007de2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007de6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007dea:	1c98      	adds	r0, r3, #2
 8007dec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007df0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007df4:	781a      	ldrb	r2, [r3, #0]
 8007df6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007dfa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007dfe:	6819      	ldr	r1, [r3, #0]
 8007e00:	f000 f997 	bl	8008132 <Osal_MemCpy>
  index_input += Length;
 8007e04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007e08:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007e12:	4413      	add	r3, r2
 8007e14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007e18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007e1c:	2218      	movs	r2, #24
 8007e1e:	2100      	movs	r1, #0
 8007e20:	4618      	mov	r0, r3
 8007e22:	f000 f996 	bl	8008152 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007e26:	233f      	movs	r3, #63	@ 0x3f
 8007e28:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8007e2c:	230c      	movs	r3, #12
 8007e2e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007e32:	f107 0310 	add.w	r3, r7, #16
 8007e36:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007e3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007e3e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007e42:	f107 030f 	add.w	r3, r7, #15
 8007e46:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e50:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007e54:	2100      	movs	r1, #0
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 fc04 	bl	8008664 <hci_send_req>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	da01      	bge.n	8007e66 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8007e62:	23ff      	movs	r3, #255	@ 0xff
 8007e64:	e004      	b.n	8007e70 <aci_hal_write_config_data+0x100>
  return status;
 8007e66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007e6a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007e6e:	781b      	ldrb	r3, [r3, #0]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b0cc      	sub	sp, #304	@ 0x130
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	4602      	mov	r2, r0
 8007e82:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007e86:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007e8a:	701a      	strb	r2, [r3, #0]
 8007e8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007e90:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007e94:	460a      	mov	r2, r1
 8007e96:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007e98:	f107 0310 	add.w	r3, r7, #16
 8007e9c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007ea0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007ea4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8007eb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007eb6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007eba:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007ebe:	7812      	ldrb	r2, [r2, #0]
 8007ec0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007ec2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8007ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007ed0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007ed4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007ed8:	7812      	ldrb	r2, [r2, #0]
 8007eda:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007edc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ee6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007eea:	2218      	movs	r2, #24
 8007eec:	2100      	movs	r1, #0
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 f92f 	bl	8008152 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007ef4:	233f      	movs	r3, #63	@ 0x3f
 8007ef6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8007efa:	230f      	movs	r3, #15
 8007efc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007f00:	f107 0310 	add.w	r3, r7, #16
 8007f04:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007f08:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007f0c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007f10:	f107 030f 	add.w	r3, r7, #15
 8007f14:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007f22:	2100      	movs	r1, #0
 8007f24:	4618      	mov	r0, r3
 8007f26:	f000 fb9d 	bl	8008664 <hci_send_req>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	da01      	bge.n	8007f34 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8007f30:	23ff      	movs	r3, #255	@ 0xff
 8007f32:	e004      	b.n	8007f3e <aci_hal_set_tx_power_level+0xc4>
  return status;
 8007f34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007f38:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007f3c:	781b      	ldrb	r3, [r3, #0]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b0cc      	sub	sp, #304	@ 0x130
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	4602      	mov	r2, r0
 8007f50:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007f54:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007f58:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8007f5a:	f107 0310 	add.w	r3, r7, #16
 8007f5e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007f62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007f66:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8007f74:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007f78:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007f7c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007f80:	8812      	ldrh	r2, [r2, #0]
 8007f82:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007f84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007f88:	3302      	adds	r3, #2
 8007f8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007f92:	2218      	movs	r2, #24
 8007f94:	2100      	movs	r1, #0
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 f8db 	bl	8008152 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007f9c:	233f      	movs	r3, #63	@ 0x3f
 8007f9e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8007fa2:	2318      	movs	r3, #24
 8007fa4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007fa8:	f107 0310 	add.w	r3, r7, #16
 8007fac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007fb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007fb4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007fb8:	f107 030f 	add.w	r3, r7, #15
 8007fbc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007fc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007fca:	2100      	movs	r1, #0
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f000 fb49 	bl	8008664 <hci_send_req>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	da01      	bge.n	8007fdc <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8007fd8:	23ff      	movs	r3, #255	@ 0xff
 8007fda:	e004      	b.n	8007fe6 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8007fdc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007fe0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007fe4:	781b      	ldrb	r3, [r3, #0]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b088      	sub	sp, #32
 8007ff4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ffa:	f107 0308 	add.w	r3, r7, #8
 8007ffe:	2218      	movs	r2, #24
 8008000:	2100      	movs	r1, #0
 8008002:	4618      	mov	r0, r3
 8008004:	f000 f8a5 	bl	8008152 <Osal_MemSet>
  rq.ogf = 0x03;
 8008008:	2303      	movs	r3, #3
 800800a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800800c:	2303      	movs	r3, #3
 800800e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008010:	1dfb      	adds	r3, r7, #7
 8008012:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008014:	2301      	movs	r3, #1
 8008016:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008018:	f107 0308 	add.w	r3, r7, #8
 800801c:	2100      	movs	r1, #0
 800801e:	4618      	mov	r0, r3
 8008020:	f000 fb20 	bl	8008664 <hci_send_req>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	da01      	bge.n	800802e <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800802a:	23ff      	movs	r3, #255	@ 0xff
 800802c:	e000      	b.n	8008030 <hci_reset+0x40>
  return status;
 800802e:	79fb      	ldrb	r3, [r7, #7]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3720      	adds	r7, #32
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8008038:	b590      	push	{r4, r7, lr}
 800803a:	b0cd      	sub	sp, #308	@ 0x134
 800803c:	af00      	add	r7, sp, #0
 800803e:	4604      	mov	r4, r0
 8008040:	4608      	mov	r0, r1
 8008042:	4611      	mov	r1, r2
 8008044:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008048:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800804c:	4622      	mov	r2, r4
 800804e:	701a      	strb	r2, [r3, #0]
 8008050:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008054:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008058:	4602      	mov	r2, r0
 800805a:	701a      	strb	r2, [r3, #0]
 800805c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008060:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8008064:	460a      	mov	r2, r1
 8008066:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8008068:	f107 0310 	add.w	r3, r7, #16
 800806c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008070:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008074:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008078:	2200      	movs	r2, #0
 800807a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800807c:	2300      	movs	r3, #0
 800807e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8008082:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008086:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800808a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800808e:	7812      	ldrb	r2, [r2, #0]
 8008090:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008092:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008096:	3301      	adds	r3, #1
 8008098:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800809c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80080a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80080a4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80080a8:	7812      	ldrb	r2, [r2, #0]
 80080aa:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80080ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80080b0:	3301      	adds	r3, #1
 80080b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 80080b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80080ba:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80080be:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80080c2:	7812      	ldrb	r2, [r2, #0]
 80080c4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80080c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80080ca:	3301      	adds	r3, #1
 80080cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80080d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80080d4:	2218      	movs	r2, #24
 80080d6:	2100      	movs	r1, #0
 80080d8:	4618      	mov	r0, r3
 80080da:	f000 f83a 	bl	8008152 <Osal_MemSet>
  rq.ogf = 0x08;
 80080de:	2308      	movs	r3, #8
 80080e0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 80080e4:	2331      	movs	r3, #49	@ 0x31
 80080e6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80080ea:	f107 0310 	add.w	r3, r7, #16
 80080ee:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80080f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80080f6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80080fa:	f107 030f 	add.w	r3, r7, #15
 80080fe:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008102:	2301      	movs	r3, #1
 8008104:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008108:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800810c:	2100      	movs	r1, #0
 800810e:	4618      	mov	r0, r3
 8008110:	f000 faa8 	bl	8008664 <hci_send_req>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	da01      	bge.n	800811e <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800811a:	23ff      	movs	r3, #255	@ 0xff
 800811c:	e004      	b.n	8008128 <hci_le_set_default_phy+0xf0>
  return status;
 800811e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008122:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008126:	781b      	ldrb	r3, [r3, #0]
}
 8008128:	4618      	mov	r0, r3
 800812a:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800812e:	46bd      	mov	sp, r7
 8008130:	bd90      	pop	{r4, r7, pc}

08008132 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b084      	sub	sp, #16
 8008136:	af00      	add	r7, sp, #0
 8008138:	60f8      	str	r0, [r7, #12]
 800813a:	60b9      	str	r1, [r7, #8]
 800813c:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	68b9      	ldr	r1, [r7, #8]
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f002 fbd2 	bl	800a8ec <memcpy>
 8008148:	4603      	mov	r3, r0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b084      	sub	sp, #16
 8008156:	af00      	add	r7, sp, #0
 8008158:	60f8      	str	r0, [r7, #12]
 800815a:	60b9      	str	r1, [r7, #8]
 800815c:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	68b9      	ldr	r1, [r7, #8]
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f002 fb95 	bl	800a892 <memset>
 8008168:	4603      	mov	r3, r0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8008172:	b480      	push	{r7}
 8008174:	af00      	add	r7, sp, #0
  return;
 8008176:	bf00      	nop
}
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8008180:	b480      	push	{r7}
 8008182:	af00      	add	r7, sp, #0
  return;
 8008184:	bf00      	nop
}
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr

0800818e <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800818e:	b480      	push	{r7}
 8008190:	af00      	add	r7, sp, #0
  return;
 8008192:	bf00      	nop
}
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800819c:	b480      	push	{r7}
 800819e:	af00      	add	r7, sp, #0
  return;
 80081a0:	bf00      	nop
}
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80081aa:	b480      	push	{r7}
 80081ac:	af00      	add	r7, sp, #0
  return;
 80081ae:	bf00      	nop
}
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80081b8:	b480      	push	{r7}
 80081ba:	af00      	add	r7, sp, #0
  return;
 80081bc:	bf00      	nop
}
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80081c6:	b480      	push	{r7}
 80081c8:	af00      	add	r7, sp, #0
  return;
 80081ca:	bf00      	nop
}
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80081d4:	b480      	push	{r7}
 80081d6:	af00      	add	r7, sp, #0
  return;
 80081d8:	bf00      	nop
}
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80081e2:	b480      	push	{r7}
 80081e4:	af00      	add	r7, sp, #0
  return;
 80081e6:	bf00      	nop
}
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80081f0:	b480      	push	{r7}
 80081f2:	af00      	add	r7, sp, #0
  return;
 80081f4:	bf00      	nop
}
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80081fe:	b480      	push	{r7}
 8008200:	af00      	add	r7, sp, #0
  return;
 8008202:	bf00      	nop
}
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800820c:	b480      	push	{r7}
 800820e:	af00      	add	r7, sp, #0
  return;
 8008210:	bf00      	nop
}
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr

0800821a <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800821a:	b480      	push	{r7}
 800821c:	af00      	add	r7, sp, #0
  return;
 800821e:	bf00      	nop
}
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8008228:	b480      	push	{r7}
 800822a:	af00      	add	r7, sp, #0
  return;
 800822c:	bf00      	nop
}
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8008236:	b480      	push	{r7}
 8008238:	af00      	add	r7, sp, #0
  return;
 800823a:	bf00      	nop
}
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8008244:	b480      	push	{r7}
 8008246:	af00      	add	r7, sp, #0
  return;
 8008248:	bf00      	nop
}
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr

08008252 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8008252:	b480      	push	{r7}
 8008254:	af00      	add	r7, sp, #0
  return;
 8008256:	bf00      	nop
}
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8008260:	b580      	push	{r7, lr}
 8008262:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8008264:	4b04      	ldr	r3, [pc, #16]	@ (8008278 <SVCCTL_Init+0x18>)
 8008266:	2200      	movs	r2, #0
 8008268:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800826a:	4b04      	ldr	r3, [pc, #16]	@ (800827c <SVCCTL_Init+0x1c>)
 800826c:	2200      	movs	r2, #0
 800826e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8008270:	f000 f806 	bl	8008280 <SVCCTL_SvcInit>

  return;
 8008274:	bf00      	nop
}
 8008276:	bd80      	pop	{r7, pc}
 8008278:	200000b4 	.word	0x200000b4
 800827c:	200000d4 	.word	0x200000d4

08008280 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	af00      	add	r7, sp, #0
  BAS_Init();
 8008284:	f7ff ff75 	bl	8008172 <BAS_Init>

  BLS_Init();
 8008288:	f7ff ff7a 	bl	8008180 <BLS_Init>

  CRS_STM_Init();
 800828c:	f7ff ff7f 	bl	800818e <CRS_STM_Init>

  DIS_Init();
 8008290:	f7ff ff84 	bl	800819c <DIS_Init>

  EDS_STM_Init();
 8008294:	f7ff ff89 	bl	80081aa <EDS_STM_Init>

  HIDS_Init();
 8008298:	f7ff ff8e 	bl	80081b8 <HIDS_Init>

  HRS_Init();
 800829c:	f7ff ff93 	bl	80081c6 <HRS_Init>

  HTS_Init();
 80082a0:	f7ff ff98 	bl	80081d4 <HTS_Init>

  IAS_Init();
 80082a4:	f7ff ff9d 	bl	80081e2 <IAS_Init>

  LLS_Init();
 80082a8:	f7ff ffa2 	bl	80081f0 <LLS_Init>

  TPS_Init();
 80082ac:	f7ff ffa7 	bl	80081fe <TPS_Init>

  MOTENV_STM_Init();
 80082b0:	f7ff ffac 	bl	800820c <MOTENV_STM_Init>

  P2PS_STM_Init();
 80082b4:	f7ff ffb1 	bl	800821a <P2PS_STM_Init>

  ZDD_STM_Init();
 80082b8:	f7ff ffb6 	bl	8008228 <ZDD_STM_Init>

  OTAS_STM_Init();
 80082bc:	f7ff ffbb 	bl	8008236 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80082c0:	f7ff ffc7 	bl	8008252 <BVOPUS_STM_Init>

  MESH_Init();
 80082c4:	f7ff ffbe 	bl	8008244 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80082c8:	f001 fc26 	bl	8009b18 <SVCCTL_InitCustomSvc>
  
  return;
 80082cc:	bf00      	nop
}
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80082d8:	4b09      	ldr	r3, [pc, #36]	@ (8008300 <SVCCTL_RegisterSvcHandler+0x30>)
 80082da:	7f1b      	ldrb	r3, [r3, #28]
 80082dc:	4619      	mov	r1, r3
 80082de:	4a08      	ldr	r2, [pc, #32]	@ (8008300 <SVCCTL_RegisterSvcHandler+0x30>)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80082e6:	4b06      	ldr	r3, [pc, #24]	@ (8008300 <SVCCTL_RegisterSvcHandler+0x30>)
 80082e8:	7f1b      	ldrb	r3, [r3, #28]
 80082ea:	3301      	adds	r3, #1
 80082ec:	b2da      	uxtb	r2, r3
 80082ee:	4b04      	ldr	r3, [pc, #16]	@ (8008300 <SVCCTL_RegisterSvcHandler+0x30>)
 80082f0:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80082f2:	bf00      	nop
}
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	200000b4 	.word	0x200000b4

08008304 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b086      	sub	sp, #24
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	3301      	adds	r3, #1
 8008310:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8008312:	2300      	movs	r3, #0
 8008314:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	2bff      	cmp	r3, #255	@ 0xff
 800831c:	d125      	bne.n	800836a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	3302      	adds	r3, #2
 8008322:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	881b      	ldrh	r3, [r3, #0]
 8008328:	b29b      	uxth	r3, r3
 800832a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800832e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008332:	d118      	bne.n	8008366 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008334:	2300      	movs	r3, #0
 8008336:	757b      	strb	r3, [r7, #21]
 8008338:	e00d      	b.n	8008356 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800833a:	7d7b      	ldrb	r3, [r7, #21]
 800833c:	4a1a      	ldr	r2, [pc, #104]	@ (80083a8 <SVCCTL_UserEvtRx+0xa4>)
 800833e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	4798      	blx	r3
 8008346:	4603      	mov	r3, r0
 8008348:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800834a:	7dfb      	ldrb	r3, [r7, #23]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d108      	bne.n	8008362 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008350:	7d7b      	ldrb	r3, [r7, #21]
 8008352:	3301      	adds	r3, #1
 8008354:	757b      	strb	r3, [r7, #21]
 8008356:	4b14      	ldr	r3, [pc, #80]	@ (80083a8 <SVCCTL_UserEvtRx+0xa4>)
 8008358:	7f1b      	ldrb	r3, [r3, #28]
 800835a:	7d7a      	ldrb	r2, [r7, #21]
 800835c:	429a      	cmp	r2, r3
 800835e:	d3ec      	bcc.n	800833a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8008360:	e002      	b.n	8008368 <SVCCTL_UserEvtRx+0x64>
              break;
 8008362:	bf00      	nop
          break;
 8008364:	e000      	b.n	8008368 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8008366:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8008368:	e000      	b.n	800836c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800836a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800836c:	7dfb      	ldrb	r3, [r7, #23]
 800836e:	2b02      	cmp	r3, #2
 8008370:	d00f      	beq.n	8008392 <SVCCTL_UserEvtRx+0x8e>
 8008372:	2b02      	cmp	r3, #2
 8008374:	dc10      	bgt.n	8008398 <SVCCTL_UserEvtRx+0x94>
 8008376:	2b00      	cmp	r3, #0
 8008378:	d002      	beq.n	8008380 <SVCCTL_UserEvtRx+0x7c>
 800837a:	2b01      	cmp	r3, #1
 800837c:	d006      	beq.n	800838c <SVCCTL_UserEvtRx+0x88>
 800837e:	e00b      	b.n	8008398 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 ff9f 	bl	80092c4 <SVCCTL_App_Notification>
 8008386:	4603      	mov	r3, r0
 8008388:	75bb      	strb	r3, [r7, #22]
      break;
 800838a:	e008      	b.n	800839e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800838c:	2301      	movs	r3, #1
 800838e:	75bb      	strb	r3, [r7, #22]
      break;
 8008390:	e005      	b.n	800839e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8008392:	2300      	movs	r3, #0
 8008394:	75bb      	strb	r3, [r7, #22]
      break;
 8008396:	e002      	b.n	800839e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008398:	2301      	movs	r3, #1
 800839a:	75bb      	strb	r3, [r7, #22]
      break;
 800839c:	bf00      	nop
  }

  return (return_status);
 800839e:	7dbb      	ldrb	r3, [r7, #22]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3718      	adds	r7, #24
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	200000b4 	.word	0x200000b4

080083ac <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b088      	sub	sp, #32
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80083b4:	f107 030c 	add.w	r3, r7, #12
 80083b8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	212f      	movs	r1, #47	@ 0x2f
 80083c4:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 80083c8:	f000 fae8 	bl	800899c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	330b      	adds	r3, #11
 80083d0:	78db      	ldrb	r3, [r3, #3]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3720      	adds	r7, #32
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b088      	sub	sp, #32
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80083e2:	f107 030c 	add.w	r3, r7, #12
 80083e6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	210f      	movs	r1, #15
 80083f2:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 80083f6:	f000 fad1 	bl	800899c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	330b      	adds	r3, #11
 80083fe:	78db      	ldrb	r3, [r3, #3]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3720      	adds	r7, #32
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b088      	sub	sp, #32
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008410:	f107 030c 	add.w	r3, r7, #12
 8008414:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	2110      	movs	r1, #16
 800841c:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8008420:	f000 fabc 	bl	800899c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	330b      	adds	r3, #11
 8008428:	78db      	ldrb	r3, [r3, #3]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3720      	adds	r7, #32
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
	...

08008434 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8008434:	b480      	push	{r7}
 8008436:	b08b      	sub	sp, #44	@ 0x2c
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800843c:	2300      	movs	r3, #0
 800843e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8008440:	2300      	movs	r3, #0
 8008442:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8008444:	2300      	movs	r3, #0
 8008446:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8008448:	2300      	movs	r3, #0
 800844a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800844c:	2300      	movs	r3, #0
 800844e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8008450:	2300      	movs	r3, #0
 8008452:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8008454:	2300      	movs	r3, #0
 8008456:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8008458:	2300      	movs	r3, #0
 800845a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800845c:	4b4a      	ldr	r3, [pc, #296]	@ (8008588 <SHCI_GetWirelessFwInfo+0x154>)
 800845e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008460:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008464:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800846e:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a44      	ldr	r2, [pc, #272]	@ (800858c <SHCI_GetWirelessFwInfo+0x158>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d10f      	bne.n	80084a0 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	695b      	ldr	r3, [r3, #20]
 8008484:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	699b      	ldr	r3, [r3, #24]
 800848a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	69db      	ldr	r3, [r3, #28]
 8008490:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	617b      	str	r3, [r7, #20]
 800849e:	e01a      	b.n	80084d6 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80084a8:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80084ac:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	695b      	ldr	r3, [r3, #20]
 80084bc:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80084d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d8:	0e1b      	lsrs	r3, r3, #24
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80084e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e2:	0c1b      	lsrs	r3, r3, #16
 80084e4:	b2da      	uxtb	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80084ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ec:	0a1b      	lsrs	r3, r3, #8
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80084f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f6:	091b      	lsrs	r3, r3, #4
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	f003 030f 	and.w	r3, r3, #15
 80084fe:	b2da      	uxtb	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8008504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008506:	b2db      	uxtb	r3, r3
 8008508:	f003 030f 	and.w	r3, r3, #15
 800850c:	b2da      	uxtb	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8008512:	6a3b      	ldr	r3, [r7, #32]
 8008514:	0e1b      	lsrs	r3, r3, #24
 8008516:	b2da      	uxtb	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800851c:	6a3b      	ldr	r3, [r7, #32]
 800851e:	0c1b      	lsrs	r3, r3, #16
 8008520:	b2da      	uxtb	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8008526:	6a3b      	ldr	r3, [r7, #32]
 8008528:	0a1b      	lsrs	r3, r3, #8
 800852a:	b2da      	uxtb	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008530:	6a3b      	ldr	r3, [r7, #32]
 8008532:	b2da      	uxtb	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	b2da      	uxtb	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	0e1b      	lsrs	r3, r3, #24
 8008544:	b2da      	uxtb	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	0c1b      	lsrs	r3, r3, #16
 800854e:	b2da      	uxtb	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	0a1b      	lsrs	r3, r3, #8
 8008558:	b2da      	uxtb	r2, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	0e1b      	lsrs	r3, r3, #24
 8008562:	b2da      	uxtb	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	0c1b      	lsrs	r3, r3, #16
 800856c:	b2da      	uxtb	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	b2da      	uxtb	r2, r3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	372c      	adds	r7, #44	@ 0x2c
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr
 8008588:	58004000 	.word	0x58004000
 800858c:	a94656b9 	.word	0xa94656b9

08008590 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	4a08      	ldr	r2, [pc, #32]	@ (80085c0 <hci_init+0x30>)
 80085a0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80085a2:	4a08      	ldr	r2, [pc, #32]	@ (80085c4 <hci_init+0x34>)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80085a8:	4806      	ldr	r0, [pc, #24]	@ (80085c4 <hci_init+0x34>)
 80085aa:	f000 f979 	bl	80088a0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4618      	mov	r0, r3
 80085b4:	f000 f8da 	bl	800876c <TlInit>

  return;
 80085b8:	bf00      	nop
}
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	20000394 	.word	0x20000394
 80085c4:	2000036c 	.word	0x2000036c

080085c8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80085ce:	4822      	ldr	r0, [pc, #136]	@ (8008658 <hci_user_evt_proc+0x90>)
 80085d0:	f000 fd3e 	bl	8009050 <LST_is_empty>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d12b      	bne.n	8008632 <hci_user_evt_proc+0x6a>
 80085da:	4b20      	ldr	r3, [pc, #128]	@ (800865c <hci_user_evt_proc+0x94>)
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d027      	beq.n	8008632 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80085e2:	f107 030c 	add.w	r3, r7, #12
 80085e6:	4619      	mov	r1, r3
 80085e8:	481b      	ldr	r0, [pc, #108]	@ (8008658 <hci_user_evt_proc+0x90>)
 80085ea:	f000 fdc0 	bl	800916e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80085ee:	4b1c      	ldr	r3, [pc, #112]	@ (8008660 <hci_user_evt_proc+0x98>)
 80085f0:	69db      	ldr	r3, [r3, #28]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00c      	beq.n	8008610 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80085fa:	2301      	movs	r3, #1
 80085fc:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80085fe:	4b18      	ldr	r3, [pc, #96]	@ (8008660 <hci_user_evt_proc+0x98>)
 8008600:	69db      	ldr	r3, [r3, #28]
 8008602:	1d3a      	adds	r2, r7, #4
 8008604:	4610      	mov	r0, r2
 8008606:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008608:	793a      	ldrb	r2, [r7, #4]
 800860a:	4b14      	ldr	r3, [pc, #80]	@ (800865c <hci_user_evt_proc+0x94>)
 800860c:	701a      	strb	r2, [r3, #0]
 800860e:	e002      	b.n	8008616 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008610:	4b12      	ldr	r3, [pc, #72]	@ (800865c <hci_user_evt_proc+0x94>)
 8008612:	2201      	movs	r2, #1
 8008614:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8008616:	4b11      	ldr	r3, [pc, #68]	@ (800865c <hci_user_evt_proc+0x94>)
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d004      	beq.n	8008628 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	4618      	mov	r0, r3
 8008622:	f000 fc11 	bl	8008e48 <TL_MM_EvtDone>
 8008626:	e004      	b.n	8008632 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	4619      	mov	r1, r3
 800862c:	480a      	ldr	r0, [pc, #40]	@ (8008658 <hci_user_evt_proc+0x90>)
 800862e:	f000 fd31 	bl	8009094 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008632:	4809      	ldr	r0, [pc, #36]	@ (8008658 <hci_user_evt_proc+0x90>)
 8008634:	f000 fd0c 	bl	8009050 <LST_is_empty>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d107      	bne.n	800864e <hci_user_evt_proc+0x86>
 800863e:	4b07      	ldr	r3, [pc, #28]	@ (800865c <hci_user_evt_proc+0x94>)
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d003      	beq.n	800864e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8008646:	4804      	ldr	r0, [pc, #16]	@ (8008658 <hci_user_evt_proc+0x90>)
 8008648:	f001 f878 	bl	800973c <hci_notify_asynch_evt>
  }


  return;
 800864c:	bf00      	nop
 800864e:	bf00      	nop
}
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	200000dc 	.word	0x200000dc
 800865c:	200000e8 	.word	0x200000e8
 8008660:	2000036c 	.word	0x2000036c

08008664 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b088      	sub	sp, #32
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	460b      	mov	r3, r1
 800866e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8008670:	2000      	movs	r0, #0
 8008672:	f000 f8d1 	bl	8008818 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8008676:	2300      	movs	r3, #0
 8008678:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	885b      	ldrh	r3, [r3, #2]
 800867e:	b21b      	sxth	r3, r3
 8008680:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008684:	b21a      	sxth	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	881b      	ldrh	r3, [r3, #0]
 800868a:	b21b      	sxth	r3, r3
 800868c:	029b      	lsls	r3, r3, #10
 800868e:	b21b      	sxth	r3, r3
 8008690:	4313      	orrs	r3, r2
 8008692:	b21b      	sxth	r3, r3
 8008694:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8008696:	4b33      	ldr	r3, [pc, #204]	@ (8008764 <hci_send_req+0x100>)
 8008698:	2201      	movs	r2, #1
 800869a:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	b2d9      	uxtb	r1, r3
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	689a      	ldr	r2, [r3, #8]
 80086a6:	8bbb      	ldrh	r3, [r7, #28]
 80086a8:	4618      	mov	r0, r3
 80086aa:	f000 f88f 	bl	80087cc <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80086ae:	e04e      	b.n	800874e <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80086b0:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80086b4:	f001 f859 	bl	800976a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80086b8:	e043      	b.n	8008742 <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80086ba:	f107 030c 	add.w	r3, r7, #12
 80086be:	4619      	mov	r1, r3
 80086c0:	4829      	ldr	r0, [pc, #164]	@ (8008768 <hci_send_req+0x104>)
 80086c2:	f000 fd54 	bl	800916e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	7a5b      	ldrb	r3, [r3, #9]
 80086ca:	2b0f      	cmp	r3, #15
 80086cc:	d114      	bne.n	80086f8 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	330b      	adds	r3, #11
 80086d2:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	885b      	ldrh	r3, [r3, #2]
 80086d8:	b29b      	uxth	r3, r3
 80086da:	8bba      	ldrh	r2, [r7, #28]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d104      	bne.n	80086ea <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	693a      	ldr	r2, [r7, #16]
 80086e6:	7812      	ldrb	r2, [r2, #0]
 80086e8:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	785b      	ldrb	r3, [r3, #1]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d027      	beq.n	8008742 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80086f2:	2301      	movs	r3, #1
 80086f4:	77fb      	strb	r3, [r7, #31]
 80086f6:	e024      	b.n	8008742 <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	330b      	adds	r3, #11
 80086fc:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008704:	b29b      	uxth	r3, r3
 8008706:	8bba      	ldrh	r2, [r7, #28]
 8008708:	429a      	cmp	r2, r3
 800870a:	d114      	bne.n	8008736 <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	7a9b      	ldrb	r3, [r3, #10]
 8008710:	3b03      	subs	r3, #3
 8008712:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	695a      	ldr	r2, [r3, #20]
 8008718:	7dfb      	ldrb	r3, [r7, #23]
 800871a:	429a      	cmp	r2, r3
 800871c:	bfa8      	it	ge
 800871e:	461a      	movge	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6918      	ldr	r0, [r3, #16]
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	1cd9      	adds	r1, r3, #3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	695b      	ldr	r3, [r3, #20]
 8008730:	461a      	mov	r2, r3
 8008732:	f002 f8db 	bl	800a8ec <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d001      	beq.n	8008742 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800873e:	2301      	movs	r3, #1
 8008740:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008742:	4809      	ldr	r0, [pc, #36]	@ (8008768 <hci_send_req+0x104>)
 8008744:	f000 fc84 	bl	8009050 <LST_is_empty>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d0b5      	beq.n	80086ba <hci_send_req+0x56>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800874e:	7ffb      	ldrb	r3, [r7, #31]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d0ad      	beq.n	80086b0 <hci_send_req+0x4c>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8008754:	2001      	movs	r0, #1
 8008756:	f000 f85f 	bl	8008818 <NotifyCmdStatus>

  return 0;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3720      	adds	r7, #32
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	20000398 	.word	0x20000398
 8008768:	2000038c 	.word	0x2000038c

0800876c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b086      	sub	sp, #24
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8008774:	480f      	ldr	r0, [pc, #60]	@ (80087b4 <TlInit+0x48>)
 8008776:	f000 fc5b 	bl	8009030 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800877a:	4a0f      	ldr	r2, [pc, #60]	@ (80087b8 <TlInit+0x4c>)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8008780:	480e      	ldr	r0, [pc, #56]	@ (80087bc <TlInit+0x50>)
 8008782:	f000 fc55 	bl	8009030 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008786:	4b0e      	ldr	r3, [pc, #56]	@ (80087c0 <TlInit+0x54>)
 8008788:	2201      	movs	r2, #1
 800878a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800878c:	4b0d      	ldr	r3, [pc, #52]	@ (80087c4 <TlInit+0x58>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00a      	beq.n	80087aa <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008798:	4b0b      	ldr	r3, [pc, #44]	@ (80087c8 <TlInit+0x5c>)
 800879a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800879c:	4b09      	ldr	r3, [pc, #36]	@ (80087c4 <TlInit+0x58>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f107 0208 	add.w	r2, r7, #8
 80087a4:	4610      	mov	r0, r2
 80087a6:	4798      	blx	r3
  }

  return;
 80087a8:	bf00      	nop
 80087aa:	bf00      	nop
}
 80087ac:	3718      	adds	r7, #24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	2000038c 	.word	0x2000038c
 80087b8:	200000e4 	.word	0x200000e4
 80087bc:	200000dc 	.word	0x200000dc
 80087c0:	200000e8 	.word	0x200000e8
 80087c4:	2000036c 	.word	0x2000036c
 80087c8:	08008859 	.word	0x08008859

080087cc <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	4603      	mov	r3, r0
 80087d4:	603a      	str	r2, [r7, #0]
 80087d6:	80fb      	strh	r3, [r7, #6]
 80087d8:	460b      	mov	r3, r1
 80087da:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80087dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008810 <SendCmd+0x44>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	88fa      	ldrh	r2, [r7, #6]
 80087e2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80087e6:	4b0a      	ldr	r3, [pc, #40]	@ (8008810 <SendCmd+0x44>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	797a      	ldrb	r2, [r7, #5]
 80087ec:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80087ee:	4b08      	ldr	r3, [pc, #32]	@ (8008810 <SendCmd+0x44>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	330c      	adds	r3, #12
 80087f4:	797a      	ldrb	r2, [r7, #5]
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	4618      	mov	r0, r3
 80087fa:	f002 f877 	bl	800a8ec <memcpy>

  hciContext.io.Send(0,0);
 80087fe:	4b05      	ldr	r3, [pc, #20]	@ (8008814 <SendCmd+0x48>)
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	2100      	movs	r1, #0
 8008804:	2000      	movs	r0, #0
 8008806:	4798      	blx	r3

  return;
 8008808:	bf00      	nop
}
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	200000e4 	.word	0x200000e4
 8008814:	2000036c 	.word	0x2000036c

08008818 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	4603      	mov	r3, r0
 8008820:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8008822:	79fb      	ldrb	r3, [r7, #7]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d108      	bne.n	800883a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008828:	4b0a      	ldr	r3, [pc, #40]	@ (8008854 <NotifyCmdStatus+0x3c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00d      	beq.n	800884c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8008830:	4b08      	ldr	r3, [pc, #32]	@ (8008854 <NotifyCmdStatus+0x3c>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2000      	movs	r0, #0
 8008836:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8008838:	e008      	b.n	800884c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800883a:	4b06      	ldr	r3, [pc, #24]	@ (8008854 <NotifyCmdStatus+0x3c>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d004      	beq.n	800884c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8008842:	4b04      	ldr	r3, [pc, #16]	@ (8008854 <NotifyCmdStatus+0x3c>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2001      	movs	r0, #1
 8008848:	4798      	blx	r3
  return;
 800884a:	bf00      	nop
 800884c:	bf00      	nop
}
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	20000394 	.word	0x20000394

08008858 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	7a5b      	ldrb	r3, [r3, #9]
 8008864:	2b0f      	cmp	r3, #15
 8008866:	d003      	beq.n	8008870 <TlEvtReceived+0x18>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	7a5b      	ldrb	r3, [r3, #9]
 800886c:	2b0e      	cmp	r3, #14
 800886e:	d107      	bne.n	8008880 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8008870:	6879      	ldr	r1, [r7, #4]
 8008872:	4809      	ldr	r0, [pc, #36]	@ (8008898 <TlEvtReceived+0x40>)
 8008874:	f000 fc34 	bl	80090e0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8008878:	2000      	movs	r0, #0
 800887a:	f000 ff6b 	bl	8009754 <hci_cmd_resp_release>
 800887e:	e006      	b.n	800888e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8008880:	6879      	ldr	r1, [r7, #4]
 8008882:	4806      	ldr	r0, [pc, #24]	@ (800889c <TlEvtReceived+0x44>)
 8008884:	f000 fc2c 	bl	80090e0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008888:	4804      	ldr	r0, [pc, #16]	@ (800889c <TlEvtReceived+0x44>)
 800888a:	f000 ff57 	bl	800973c <hci_notify_asynch_evt>
  }

  return;
 800888e:	bf00      	nop
}
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	2000038c 	.word	0x2000038c
 800889c:	200000dc 	.word	0x200000dc

080088a0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a05      	ldr	r2, [pc, #20]	@ (80088c0 <hci_register_io_bus+0x20>)
 80088ac:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a04      	ldr	r2, [pc, #16]	@ (80088c4 <hci_register_io_bus+0x24>)
 80088b2:	611a      	str	r2, [r3, #16]

  return;
 80088b4:	bf00      	nop
}
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr
 80088c0:	08008bb9 	.word	0x08008bb9
 80088c4:	08008c21 	.word	0x08008c21

080088c8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	4a08      	ldr	r2, [pc, #32]	@ (80088f8 <shci_init+0x30>)
 80088d8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80088da:	4a08      	ldr	r2, [pc, #32]	@ (80088fc <shci_init+0x34>)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80088e0:	4806      	ldr	r0, [pc, #24]	@ (80088fc <shci_init+0x34>)
 80088e2:	f000 f915 	bl	8008b10 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 f898 	bl	8008a20 <TlInit>

  return;
 80088f0:	bf00      	nop
}
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	200003bc 	.word	0x200003bc
 80088fc:	2000039c 	.word	0x2000039c

08008900 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008906:	4822      	ldr	r0, [pc, #136]	@ (8008990 <shci_user_evt_proc+0x90>)
 8008908:	f000 fba2 	bl	8009050 <LST_is_empty>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d12b      	bne.n	800896a <shci_user_evt_proc+0x6a>
 8008912:	4b20      	ldr	r3, [pc, #128]	@ (8008994 <shci_user_evt_proc+0x94>)
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d027      	beq.n	800896a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800891a:	f107 030c 	add.w	r3, r7, #12
 800891e:	4619      	mov	r1, r3
 8008920:	481b      	ldr	r0, [pc, #108]	@ (8008990 <shci_user_evt_proc+0x90>)
 8008922:	f000 fc24 	bl	800916e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8008926:	4b1c      	ldr	r3, [pc, #112]	@ (8008998 <shci_user_evt_proc+0x98>)
 8008928:	69db      	ldr	r3, [r3, #28]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00c      	beq.n	8008948 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8008932:	2301      	movs	r3, #1
 8008934:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008936:	4b18      	ldr	r3, [pc, #96]	@ (8008998 <shci_user_evt_proc+0x98>)
 8008938:	69db      	ldr	r3, [r3, #28]
 800893a:	1d3a      	adds	r2, r7, #4
 800893c:	4610      	mov	r0, r2
 800893e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8008940:	793a      	ldrb	r2, [r7, #4]
 8008942:	4b14      	ldr	r3, [pc, #80]	@ (8008994 <shci_user_evt_proc+0x94>)
 8008944:	701a      	strb	r2, [r3, #0]
 8008946:	e002      	b.n	800894e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008948:	4b12      	ldr	r3, [pc, #72]	@ (8008994 <shci_user_evt_proc+0x94>)
 800894a:	2201      	movs	r2, #1
 800894c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800894e:	4b11      	ldr	r3, [pc, #68]	@ (8008994 <shci_user_evt_proc+0x94>)
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d004      	beq.n	8008960 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	4618      	mov	r0, r3
 800895a:	f000 fa75 	bl	8008e48 <TL_MM_EvtDone>
 800895e:	e004      	b.n	800896a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	4619      	mov	r1, r3
 8008964:	480a      	ldr	r0, [pc, #40]	@ (8008990 <shci_user_evt_proc+0x90>)
 8008966:	f000 fb95 	bl	8009094 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800896a:	4809      	ldr	r0, [pc, #36]	@ (8008990 <shci_user_evt_proc+0x90>)
 800896c:	f000 fb70 	bl	8009050 <LST_is_empty>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d107      	bne.n	8008986 <shci_user_evt_proc+0x86>
 8008976:	4b07      	ldr	r3, [pc, #28]	@ (8008994 <shci_user_evt_proc+0x94>)
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d003      	beq.n	8008986 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800897e:	4804      	ldr	r0, [pc, #16]	@ (8008990 <shci_user_evt_proc+0x90>)
 8008980:	f7f7 fe14 	bl	80005ac <shci_notify_asynch_evt>
  }


  return;
 8008984:	bf00      	nop
 8008986:	bf00      	nop
}
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	200000ec 	.word	0x200000ec
 8008994:	200000fc 	.word	0x200000fc
 8008998:	2000039c 	.word	0x2000039c

0800899c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60ba      	str	r2, [r7, #8]
 80089a4:	607b      	str	r3, [r7, #4]
 80089a6:	4603      	mov	r3, r0
 80089a8:	81fb      	strh	r3, [r7, #14]
 80089aa:	460b      	mov	r3, r1
 80089ac:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80089ae:	2000      	movs	r0, #0
 80089b0:	f000 f868 	bl	8008a84 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80089b4:	4b17      	ldr	r3, [pc, #92]	@ (8008a14 <shci_send+0x78>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	89fa      	ldrh	r2, [r7, #14]
 80089ba:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80089be:	4b15      	ldr	r3, [pc, #84]	@ (8008a14 <shci_send+0x78>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	7b7a      	ldrb	r2, [r7, #13]
 80089c4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80089c6:	4b13      	ldr	r3, [pc, #76]	@ (8008a14 <shci_send+0x78>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	330c      	adds	r3, #12
 80089cc:	7b7a      	ldrb	r2, [r7, #13]
 80089ce:	68b9      	ldr	r1, [r7, #8]
 80089d0:	4618      	mov	r0, r3
 80089d2:	f001 ff8b 	bl	800a8ec <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 80089d6:	4b10      	ldr	r3, [pc, #64]	@ (8008a18 <shci_send+0x7c>)
 80089d8:	2201      	movs	r2, #1
 80089da:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 80089dc:	4b0f      	ldr	r3, [pc, #60]	@ (8008a1c <shci_send+0x80>)
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	2100      	movs	r1, #0
 80089e2:	2000      	movs	r0, #0
 80089e4:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80089e6:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80089ea:	f7f7 fdf6 	bl	80005da <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f103 0008 	add.w	r0, r3, #8
 80089f4:	4b07      	ldr	r3, [pc, #28]	@ (8008a14 <shci_send+0x78>)
 80089f6:	6819      	ldr	r1, [r3, #0]
 80089f8:	4b06      	ldr	r3, [pc, #24]	@ (8008a14 <shci_send+0x78>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	789b      	ldrb	r3, [r3, #2]
 80089fe:	3303      	adds	r3, #3
 8008a00:	461a      	mov	r2, r3
 8008a02:	f001 ff73 	bl	800a8ec <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008a06:	2001      	movs	r0, #1
 8008a08:	f000 f83c 	bl	8008a84 <Cmd_SetStatus>

  return;
 8008a0c:	bf00      	nop
}
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	200000f8 	.word	0x200000f8
 8008a18:	200003c0 	.word	0x200003c0
 8008a1c:	2000039c 	.word	0x2000039c

08008a20 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b086      	sub	sp, #24
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8008a28:	4a10      	ldr	r2, [pc, #64]	@ (8008a6c <TlInit+0x4c>)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8008a2e:	4810      	ldr	r0, [pc, #64]	@ (8008a70 <TlInit+0x50>)
 8008a30:	f000 fafe 	bl	8009030 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008a34:	2001      	movs	r0, #1
 8008a36:	f000 f825 	bl	8008a84 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8008a74 <TlInit+0x54>)
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8008a40:	4b0d      	ldr	r3, [pc, #52]	@ (8008a78 <TlInit+0x58>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00c      	beq.n	8008a62 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8008a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8008a7c <TlInit+0x5c>)
 8008a4e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8008a50:	4b0b      	ldr	r3, [pc, #44]	@ (8008a80 <TlInit+0x60>)
 8008a52:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8008a54:	4b08      	ldr	r3, [pc, #32]	@ (8008a78 <TlInit+0x58>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f107 020c 	add.w	r2, r7, #12
 8008a5c:	4610      	mov	r0, r2
 8008a5e:	4798      	blx	r3
  }

  return;
 8008a60:	bf00      	nop
 8008a62:	bf00      	nop
}
 8008a64:	3718      	adds	r7, #24
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	200000f8 	.word	0x200000f8
 8008a70:	200000ec 	.word	0x200000ec
 8008a74:	200000fc 	.word	0x200000fc
 8008a78:	2000039c 	.word	0x2000039c
 8008a7c:	08008ad5 	.word	0x08008ad5
 8008a80:	08008aed 	.word	0x08008aed

08008a84 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8008a8e:	79fb      	ldrb	r3, [r7, #7]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d10b      	bne.n	8008aac <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8008a94:	4b0d      	ldr	r3, [pc, #52]	@ (8008acc <Cmd_SetStatus+0x48>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d003      	beq.n	8008aa4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8008a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8008acc <Cmd_SetStatus+0x48>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8008aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8008ad0 <Cmd_SetStatus+0x4c>)
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8008aaa:	e00b      	b.n	8008ac4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8008aac:	4b08      	ldr	r3, [pc, #32]	@ (8008ad0 <Cmd_SetStatus+0x4c>)
 8008aae:	2201      	movs	r2, #1
 8008ab0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8008ab2:	4b06      	ldr	r3, [pc, #24]	@ (8008acc <Cmd_SetStatus+0x48>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d004      	beq.n	8008ac4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8008aba:	4b04      	ldr	r3, [pc, #16]	@ (8008acc <Cmd_SetStatus+0x48>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2001      	movs	r0, #1
 8008ac0:	4798      	blx	r3
  return;
 8008ac2:	bf00      	nop
 8008ac4:	bf00      	nop
}
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	200003bc 	.word	0x200003bc
 8008ad0:	200000f4 	.word	0x200000f4

08008ad4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8008adc:	2000      	movs	r0, #0
 8008ade:	f7f7 fd71 	bl	80005c4 <shci_cmd_resp_release>

  return;
 8008ae2:	bf00      	nop
}
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
	...

08008aec <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8008af4:	6879      	ldr	r1, [r7, #4]
 8008af6:	4805      	ldr	r0, [pc, #20]	@ (8008b0c <TlUserEvtReceived+0x20>)
 8008af8:	f000 faf2 	bl	80090e0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008afc:	4803      	ldr	r0, [pc, #12]	@ (8008b0c <TlUserEvtReceived+0x20>)
 8008afe:	f7f7 fd55 	bl	80005ac <shci_notify_asynch_evt>

  return;
 8008b02:	bf00      	nop
}
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	200000ec 	.word	0x200000ec

08008b10 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a05      	ldr	r2, [pc, #20]	@ (8008b30 <shci_register_io_bus+0x20>)
 8008b1c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a04      	ldr	r2, [pc, #16]	@ (8008b34 <shci_register_io_bus+0x24>)
 8008b22:	611a      	str	r2, [r3, #16]

  return;
 8008b24:	bf00      	nop
}
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr
 8008b30:	08008cd5 	.word	0x08008cd5
 8008b34:	08008d29 	.word	0x08008d29

08008b38 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8008b3c:	f001 fa4c 	bl	8009fd8 <HW_IPCC_Enable>

  return;
 8008b40:	bf00      	nop
}
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <TL_Init>:


void TL_Init( void )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8008b48:	4b10      	ldr	r3, [pc, #64]	@ (8008b8c <TL_Init+0x48>)
 8008b4a:	4a11      	ldr	r2, [pc, #68]	@ (8008b90 <TL_Init+0x4c>)
 8008b4c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8008b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8008b8c <TL_Init+0x48>)
 8008b50:	4a10      	ldr	r2, [pc, #64]	@ (8008b94 <TL_Init+0x50>)
 8008b52:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8008b54:	4b0d      	ldr	r3, [pc, #52]	@ (8008b8c <TL_Init+0x48>)
 8008b56:	4a10      	ldr	r2, [pc, #64]	@ (8008b98 <TL_Init+0x54>)
 8008b58:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8008b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8008b8c <TL_Init+0x48>)
 8008b5c:	4a0f      	ldr	r2, [pc, #60]	@ (8008b9c <TL_Init+0x58>)
 8008b5e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8008b60:	4b0a      	ldr	r3, [pc, #40]	@ (8008b8c <TL_Init+0x48>)
 8008b62:	4a0f      	ldr	r2, [pc, #60]	@ (8008ba0 <TL_Init+0x5c>)
 8008b64:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8008b66:	4b09      	ldr	r3, [pc, #36]	@ (8008b8c <TL_Init+0x48>)
 8008b68:	4a0e      	ldr	r2, [pc, #56]	@ (8008ba4 <TL_Init+0x60>)
 8008b6a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8008b6c:	4b07      	ldr	r3, [pc, #28]	@ (8008b8c <TL_Init+0x48>)
 8008b6e:	4a0e      	ldr	r2, [pc, #56]	@ (8008ba8 <TL_Init+0x64>)
 8008b70:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8008b72:	4b06      	ldr	r3, [pc, #24]	@ (8008b8c <TL_Init+0x48>)
 8008b74:	4a0d      	ldr	r2, [pc, #52]	@ (8008bac <TL_Init+0x68>)
 8008b76:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8008b78:	4b04      	ldr	r3, [pc, #16]	@ (8008b8c <TL_Init+0x48>)
 8008b7a:	4a0d      	ldr	r2, [pc, #52]	@ (8008bb0 <TL_Init+0x6c>)
 8008b7c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8008b7e:	4b03      	ldr	r3, [pc, #12]	@ (8008b8c <TL_Init+0x48>)
 8008b80:	4a0c      	ldr	r2, [pc, #48]	@ (8008bb4 <TL_Init+0x70>)
 8008b82:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8008b84:	f001 fa3c 	bl	800a000 <HW_IPCC_Init>

  return;
 8008b88:	bf00      	nop
}
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	20030000 	.word	0x20030000
 8008b90:	20030028 	.word	0x20030028
 8008b94:	20030048 	.word	0x20030048
 8008b98:	20030058 	.word	0x20030058
 8008b9c:	20030068 	.word	0x20030068
 8008ba0:	20030070 	.word	0x20030070
 8008ba4:	20030078 	.word	0x20030078
 8008ba8:	20030080 	.word	0x20030080
 8008bac:	2003009c 	.word	0x2003009c
 8008bb0:	200300a0 	.word	0x200300a0
 8008bb4:	200300ac 	.word	0x200300ac

08008bb8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8008bc4:	4811      	ldr	r0, [pc, #68]	@ (8008c0c <TL_BLE_Init+0x54>)
 8008bc6:	f000 fa33 	bl	8009030 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8008bca:	4b11      	ldr	r3, [pc, #68]	@ (8008c10 <TL_BLE_Init+0x58>)
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	689a      	ldr	r2, [r3, #8]
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	68da      	ldr	r2, [r3, #12]
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	4a0c      	ldr	r2, [pc, #48]	@ (8008c14 <TL_BLE_Init+0x5c>)
 8008be4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	4a08      	ldr	r2, [pc, #32]	@ (8008c0c <TL_BLE_Init+0x54>)
 8008bea:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8008bec:	f001 fa1e 	bl	800a02c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a08      	ldr	r2, [pc, #32]	@ (8008c18 <TL_BLE_Init+0x60>)
 8008bf6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	4a07      	ldr	r2, [pc, #28]	@ (8008c1c <TL_BLE_Init+0x64>)
 8008bfe:	6013      	str	r3, [r2, #0]

  return 0;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	200300c8 	.word	0x200300c8
 8008c10:	20030000 	.word	0x20030000
 8008c14:	20030a58 	.word	0x20030a58
 8008c18:	200003cc 	.word	0x200003cc
 8008c1c:	200003d0 	.word	0x200003d0

08008c20 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008c2c:	4b09      	ldr	r3, [pc, #36]	@ (8008c54 <TL_BLE_SendCmd+0x34>)
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2201      	movs	r2, #1
 8008c34:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8008c36:	4b07      	ldr	r3, [pc, #28]	@ (8008c54 <TL_BLE_SendCmd+0x34>)
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	2001      	movs	r0, #1
 8008c40:	f000 f970 	bl	8008f24 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8008c44:	f001 fa0c 	bl	800a060 <HW_IPCC_BLE_SendCmd>

  return 0;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3708      	adds	r7, #8
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	20030000 	.word	0x20030000

08008c58 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8008c5e:	e01c      	b.n	8008c9a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8008c60:	1d3b      	adds	r3, r7, #4
 8008c62:	4619      	mov	r1, r3
 8008c64:	4812      	ldr	r0, [pc, #72]	@ (8008cb0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008c66:	f000 fa82 	bl	800916e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	7a5b      	ldrb	r3, [r3, #9]
 8008c6e:	2b0f      	cmp	r3, #15
 8008c70:	d003      	beq.n	8008c7a <HW_IPCC_BLE_RxEvtNot+0x22>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	7a5b      	ldrb	r3, [r3, #9]
 8008c76:	2b0e      	cmp	r3, #14
 8008c78:	d105      	bne.n	8008c86 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	2002      	movs	r0, #2
 8008c80:	f000 f950 	bl	8008f24 <OutputDbgTrace>
 8008c84:	e004      	b.n	8008c90 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4619      	mov	r1, r3
 8008c8a:	2005      	movs	r0, #5
 8008c8c:	f000 f94a 	bl	8008f24 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008c90:	4b08      	ldr	r3, [pc, #32]	@ (8008cb4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	4610      	mov	r0, r2
 8008c98:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8008c9a:	4805      	ldr	r0, [pc, #20]	@ (8008cb0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008c9c:	f000 f9d8 	bl	8009050 <LST_is_empty>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d0dc      	beq.n	8008c60 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008ca6:	bf00      	nop
}
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	200300c8 	.word	0x200300c8
 8008cb4:	200003cc 	.word	0x200003cc

08008cb8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_ACL_DATA_RSP, (uint8_t*)NULL);
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	2004      	movs	r0, #4
 8008cc0:	f000 f930 	bl	8008f24 <OutputDbgTrace>
  
  BLE_IoBusAclDataTxAck( );
 8008cc4:	4b02      	ldr	r3, [pc, #8]	@ (8008cd0 <HW_IPCC_BLE_AclDataAckNot+0x18>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4798      	blx	r3
       
  return;
 8008cca:	bf00      	nop
}
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	200003d0 	.word	0x200003d0

08008cd4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008ce0:	480d      	ldr	r0, [pc, #52]	@ (8008d18 <TL_SYS_Init+0x44>)
 8008ce2:	f000 f9a5 	bl	8009030 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8008ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8008d1c <TL_SYS_Init+0x48>)
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	689a      	ldr	r2, [r3, #8]
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	4a08      	ldr	r2, [pc, #32]	@ (8008d18 <TL_SYS_Init+0x44>)
 8008cf8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8008cfa:	f001 f9e3 	bl	800a0c4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a07      	ldr	r2, [pc, #28]	@ (8008d20 <TL_SYS_Init+0x4c>)
 8008d04:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	4a06      	ldr	r2, [pc, #24]	@ (8008d24 <TL_SYS_Init+0x50>)
 8008d0c:	6013      	str	r3, [r2, #0]

  return 0;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	200300d0 	.word	0x200300d0
 8008d1c:	20030000 	.word	0x20030000
 8008d20:	200003d4 	.word	0x200003d4
 8008d24:	200003d8 	.word	0x200003d8

08008d28 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	460b      	mov	r3, r1
 8008d32:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008d34:	4b09      	ldr	r3, [pc, #36]	@ (8008d5c <TL_SYS_SendCmd+0x34>)
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2210      	movs	r2, #16
 8008d3c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8008d3e:	4b07      	ldr	r3, [pc, #28]	@ (8008d5c <TL_SYS_SendCmd+0x34>)
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4619      	mov	r1, r3
 8008d46:	2006      	movs	r0, #6
 8008d48:	f000 f8ec 	bl	8008f24 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008d4c:	f001 f9d4 	bl	800a0f8 <HW_IPCC_SYS_SendCmd>

  return 0;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3708      	adds	r7, #8
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	20030000 	.word	0x20030000

08008d60 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008d64:	4b07      	ldr	r3, [pc, #28]	@ (8008d84 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	2007      	movs	r0, #7
 8008d6e:	f000 f8d9 	bl	8008f24 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008d72:	4b05      	ldr	r3, [pc, #20]	@ (8008d88 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a03      	ldr	r2, [pc, #12]	@ (8008d84 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008d78:	68d2      	ldr	r2, [r2, #12]
 8008d7a:	6812      	ldr	r2, [r2, #0]
 8008d7c:	4610      	mov	r0, r2
 8008d7e:	4798      	blx	r3

  return;
 8008d80:	bf00      	nop
}
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	20030000 	.word	0x20030000
 8008d88:	200003d4 	.word	0x200003d4

08008d8c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008d92:	e00e      	b.n	8008db2 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8008d94:	1d3b      	adds	r3, r7, #4
 8008d96:	4619      	mov	r1, r3
 8008d98:	480b      	ldr	r0, [pc, #44]	@ (8008dc8 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008d9a:	f000 f9e8 	bl	800916e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4619      	mov	r1, r3
 8008da2:	2008      	movs	r0, #8
 8008da4:	f000 f8be 	bl	8008f24 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008da8:	4b08      	ldr	r3, [pc, #32]	@ (8008dcc <HW_IPCC_SYS_EvtNot+0x40>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	4610      	mov	r0, r2
 8008db0:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008db2:	4805      	ldr	r0, [pc, #20]	@ (8008dc8 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008db4:	f000 f94c 	bl	8009050 <LST_is_empty>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d0ea      	beq.n	8008d94 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8008dbe:	bf00      	nop
}
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	200300d0 	.word	0x200300d0
 8008dcc:	200003d8 	.word	0x200003d8

08008dd0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008dd8:	4817      	ldr	r0, [pc, #92]	@ (8008e38 <TL_MM_Init+0x68>)
 8008dda:	f000 f929 	bl	8009030 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008dde:	4817      	ldr	r0, [pc, #92]	@ (8008e3c <TL_MM_Init+0x6c>)
 8008de0:	f000 f926 	bl	8009030 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008de4:	4b16      	ldr	r3, [pc, #88]	@ (8008e40 <TL_MM_Init+0x70>)
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	4a16      	ldr	r2, [pc, #88]	@ (8008e44 <TL_MM_Init+0x74>)
 8008dea:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008dec:	4b15      	ldr	r3, [pc, #84]	@ (8008e44 <TL_MM_Init+0x74>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	6892      	ldr	r2, [r2, #8]
 8008df4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8008df6:	4b13      	ldr	r3, [pc, #76]	@ (8008e44 <TL_MM_Init+0x74>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	68d2      	ldr	r2, [r2, #12]
 8008dfe:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008e00:	4b10      	ldr	r3, [pc, #64]	@ (8008e44 <TL_MM_Init+0x74>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a0c      	ldr	r2, [pc, #48]	@ (8008e38 <TL_MM_Init+0x68>)
 8008e06:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008e08:	4b0e      	ldr	r3, [pc, #56]	@ (8008e44 <TL_MM_Init+0x74>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	6812      	ldr	r2, [r2, #0]
 8008e10:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8008e12:	4b0c      	ldr	r3, [pc, #48]	@ (8008e44 <TL_MM_Init+0x74>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	6852      	ldr	r2, [r2, #4]
 8008e1a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8008e1c:	4b09      	ldr	r3, [pc, #36]	@ (8008e44 <TL_MM_Init+0x74>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	6912      	ldr	r2, [r2, #16]
 8008e24:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8008e26:	4b07      	ldr	r3, [pc, #28]	@ (8008e44 <TL_MM_Init+0x74>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	6952      	ldr	r2, [r2, #20]
 8008e2e:	619a      	str	r2, [r3, #24]

  return;
 8008e30:	bf00      	nop
}
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	200300b8 	.word	0x200300b8
 8008e3c:	200003c4 	.word	0x200003c4
 8008e40:	20030000 	.word	0x20030000
 8008e44:	200003dc 	.word	0x200003dc

08008e48 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008e50:	6879      	ldr	r1, [r7, #4]
 8008e52:	4807      	ldr	r0, [pc, #28]	@ (8008e70 <TL_MM_EvtDone+0x28>)
 8008e54:	f000 f944 	bl	80090e0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8008e58:	6879      	ldr	r1, [r7, #4]
 8008e5a:	2000      	movs	r0, #0
 8008e5c:	f000 f862 	bl	8008f24 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008e60:	4804      	ldr	r0, [pc, #16]	@ (8008e74 <TL_MM_EvtDone+0x2c>)
 8008e62:	f001 f98f 	bl	800a184 <HW_IPCC_MM_SendFreeBuf>

  return;
 8008e66:	bf00      	nop
}
 8008e68:	3708      	adds	r7, #8
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	200003c4 	.word	0x200003c4
 8008e74:	08008e79 	.word	0x08008e79

08008e78 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008e7e:	e00c      	b.n	8008e9a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008e80:	1d3b      	adds	r3, r7, #4
 8008e82:	4619      	mov	r1, r3
 8008e84:	480a      	ldr	r0, [pc, #40]	@ (8008eb0 <SendFreeBuf+0x38>)
 8008e86:	f000 f972 	bl	800916e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8008e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8008eb4 <SendFreeBuf+0x3c>)
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	4611      	mov	r1, r2
 8008e94:	4618      	mov	r0, r3
 8008e96:	f000 f923 	bl	80090e0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008e9a:	4805      	ldr	r0, [pc, #20]	@ (8008eb0 <SendFreeBuf+0x38>)
 8008e9c:	f000 f8d8 	bl	8009050 <LST_is_empty>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d0ec      	beq.n	8008e80 <SendFreeBuf+0x8>
  }

  return;
 8008ea6:	bf00      	nop
}
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	200003c4 	.word	0x200003c4
 8008eb4:	20030000 	.word	0x20030000

08008eb8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008ebc:	4805      	ldr	r0, [pc, #20]	@ (8008ed4 <TL_TRACES_Init+0x1c>)
 8008ebe:	f000 f8b7 	bl	8009030 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8008ec2:	4b05      	ldr	r3, [pc, #20]	@ (8008ed8 <TL_TRACES_Init+0x20>)
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	4a03      	ldr	r2, [pc, #12]	@ (8008ed4 <TL_TRACES_Init+0x1c>)
 8008ec8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8008eca:	f001 f9ad 	bl	800a228 <HW_IPCC_TRACES_Init>

  return;
 8008ece:	bf00      	nop
}
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	200300c0 	.word	0x200300c0
 8008ed8:	20030000 	.word	0x20030000

08008edc <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008ee2:	e008      	b.n	8008ef6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8008ee4:	1d3b      	adds	r3, r7, #4
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	4808      	ldr	r0, [pc, #32]	@ (8008f0c <HW_IPCC_TRACES_EvtNot+0x30>)
 8008eea:	f000 f940 	bl	800916e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f000 f80d 	bl	8008f10 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008ef6:	4805      	ldr	r0, [pc, #20]	@ (8008f0c <HW_IPCC_TRACES_EvtNot+0x30>)
 8008ef8:	f000 f8aa 	bl	8009050 <LST_is_empty>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d0f0      	beq.n	8008ee4 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8008f02:	bf00      	nop
}
 8008f04:	3708      	adds	r7, #8
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	200300c0 	.word	0x200300c0

08008f10 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8008f18:	bf00      	nop
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <OutputDbgTrace>:

/******************************************************************************
* DEBUG INFORMATION
******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b087      	sub	sp, #28
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	6039      	str	r1, [r7, #0]
 8008f2e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_AclDataPacket_t *p_acldata_packet; 
  TL_EvtSerial_t *p_cmd_rsp_packet;
  
  switch(packet_type)
 8008f30:	79fb      	ldrb	r3, [r7, #7]
 8008f32:	2b08      	cmp	r3, #8
 8008f34:	d84c      	bhi.n	8008fd0 <OutputDbgTrace+0xac>
 8008f36:	a201      	add	r2, pc, #4	@ (adr r2, 8008f3c <OutputDbgTrace+0x18>)
 8008f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3c:	08008f61 	.word	0x08008f61
 8008f40:	08008f85 	.word	0x08008f85
 8008f44:	08008f91 	.word	0x08008f91
 8008f48:	08008f8b 	.word	0x08008f8b
 8008f4c:	08008fd1 	.word	0x08008fd1
 8008f50:	08008fa5 	.word	0x08008fa5
 8008f54:	08008fb1 	.word	0x08008fb1
 8008f58:	08008fb7 	.word	0x08008fb7
 8008f5c:	08008fc5 	.word	0x08008fc5
  {
  case TL_MB_MM_RELEASE_BUFFER:
    p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	617b      	str	r3, [r7, #20]
    switch(p_evt_packet->evtserial.evt.evtcode)
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	7a5b      	ldrb	r3, [r3, #9]
 8008f68:	2bff      	cmp	r3, #255	@ 0xff
 8008f6a:	d005      	beq.n	8008f78 <OutputDbgTrace+0x54>
 8008f6c:	2bff      	cmp	r3, #255	@ 0xff
 8008f6e:	dc05      	bgt.n	8008f7c <OutputDbgTrace+0x58>
 8008f70:	2b0e      	cmp	r3, #14
 8008f72:	d005      	beq.n	8008f80 <OutputDbgTrace+0x5c>
 8008f74:	2b0f      	cmp	r3, #15
      break;
      
    default:
      TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
      TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
      break;
 8008f76:	e001      	b.n	8008f7c <OutputDbgTrace+0x58>
      break;
 8008f78:	bf00      	nop
 8008f7a:	e02a      	b.n	8008fd2 <OutputDbgTrace+0xae>
      break;
 8008f7c:	bf00      	nop
 8008f7e:	e028      	b.n	8008fd2 <OutputDbgTrace+0xae>
      break;
 8008f80:	bf00      	nop
    }
    
    TL_MM_DBG_MSG("\r\n");
    break;
 8008f82:	e026      	b.n	8008fd2 <OutputDbgTrace+0xae>
    
  case TL_MB_BLE_CMD:
    p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	60fb      	str	r3, [r7, #12]
      TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
    }
    TL_HCI_CMD_DBG_MSG("\r\n");
    
    TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
    break;
 8008f88:	e023      	b.n	8008fd2 <OutputDbgTrace+0xae>
    
  case TL_MB_ACL_DATA:
    (void)p_acldata_packet;
    p_acldata_packet = (TL_AclDataPacket_t*)buffer;
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	60bb      	str	r3, [r7, #8]
    TL_HCI_CMD_DBG_MSG(" payload:");
    TL_HCI_CMD_DBG_BUF(p_acldata_packet->AclDataSerial.acl_data, p_acldata_packet->AclDataSerial.length, "");
  }*/
    TL_HCI_CMD_DBG_MSG("\r\n");
    /*TL_HCI_CMD_DBG_RAW(&p_acldata_packet->AclDataSerial, p_acldata_packet->AclDataSerial.length+TL_CMD_HDR_SIZE);*/
    break;
 8008f8e:	e020      	b.n	8008fd2 <OutputDbgTrace+0xae>
    TL_HCI_CMD_DBG_MSG(" ACL Data Tx Ack received")
      TL_HCI_CMD_DBG_MSG("\r\n");
    break;
    
  case TL_MB_BLE_CMD_RSP:
    p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	617b      	str	r3, [r7, #20]
    switch(p_evt_packet->evtserial.evt.evtcode)
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	7a5b      	ldrb	r3, [r3, #9]
 8008f98:	2b0e      	cmp	r3, #14
 8008f9a:	d001      	beq.n	8008fa0 <OutputDbgTrace+0x7c>
 8008f9c:	2b0f      	cmp	r3, #15
      }
      break;
      
    default:
      TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
      break;
 8008f9e:	e000      	b.n	8008fa2 <OutputDbgTrace+0x7e>
      break;
 8008fa0:	bf00      	nop
    }
    
    TL_HCI_CMD_DBG_MSG("\r\n");
    
    TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
    break;
 8008fa2:	e016      	b.n	8008fd2 <OutputDbgTrace+0xae>
    
  case TL_MB_BLE_ASYNCH_EVT:
    p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	617b      	str	r3, [r7, #20]
    if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	7a5b      	ldrb	r3, [r3, #9]
 8008fac:	2bff      	cmp	r3, #255	@ 0xff
    }
    
    TL_HCI_EVT_DBG_MSG("\r\n");
    
    TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
    break;
 8008fae:	e010      	b.n	8008fd2 <OutputDbgTrace+0xae>
    
  case TL_MB_SYS_CMD:
    p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	60fb      	str	r3, [r7, #12]
      TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
    }
    TL_SHCI_CMD_DBG_MSG("\r\n");
    
    TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
    break;
 8008fb4:	e00d      	b.n	8008fd2 <OutputDbgTrace+0xae>
    
  case TL_MB_SYS_CMD_RSP:
    p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	613b      	str	r3, [r7, #16]
    switch(p_cmd_rsp_packet->evt.evtcode)
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	785b      	ldrb	r3, [r3, #1]
 8008fbe:	2b0e      	cmp	r3, #14
      }
      break;
      
    default:
      TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
      break;
 8008fc0:	bf00      	nop
    }
    
    TL_SHCI_CMD_DBG_MSG("\r\n");
    
    TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
    break;
 8008fc2:	e006      	b.n	8008fd2 <OutputDbgTrace+0xae>
    
  case  TL_MB_SYS_ASYNCH_EVT:
    p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	617b      	str	r3, [r7, #20]
    if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	7a5b      	ldrb	r3, [r3, #9]
 8008fcc:	2bff      	cmp	r3, #255	@ 0xff
    }
    
    TL_SHCI_EVT_DBG_MSG("\r\n");
    
    TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
    break;
 8008fce:	e000      	b.n	8008fd2 <OutputDbgTrace+0xae>
    
  default:
    break;
 8008fd0:	bf00      	nop
  }
  
  return;
 8008fd2:	bf00      	nop
}
 8008fd4:	371c      	adds	r7, #28
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop

08008fe0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8008fea:	4b0f      	ldr	r3, [pc, #60]	@ (8009028 <OTP_Read+0x48>)
 8008fec:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008fee:	e002      	b.n	8008ff6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	3b08      	subs	r3, #8
 8008ff4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	3307      	adds	r3, #7
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	79fa      	ldrb	r2, [r7, #7]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d003      	beq.n	800900a <OTP_Read+0x2a>
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	4a09      	ldr	r2, [pc, #36]	@ (800902c <OTP_Read+0x4c>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d1f2      	bne.n	8008ff0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	3307      	adds	r3, #7
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	79fa      	ldrb	r2, [r7, #7]
 8009012:	429a      	cmp	r2, r3
 8009014:	d001      	beq.n	800901a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8009016:	2300      	movs	r3, #0
 8009018:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800901a:	68fb      	ldr	r3, [r7, #12]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3714      	adds	r7, #20
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr
 8009028:	1fff73f8 	.word	0x1fff73f8
 800902c:	1fff7000 	.word	0x1fff7000

08009030 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	605a      	str	r2, [r3, #4]
}
 8009044:	bf00      	nop
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8009050:	b480      	push	{r7}
 8009052:	b087      	sub	sp, #28
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009058:	f3ef 8310 	mrs	r3, PRIMASK
 800905c:	60fb      	str	r3, [r7, #12]
  return(result);
 800905e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009060:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009062:	b672      	cpsid	i
}
 8009064:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	429a      	cmp	r2, r3
 800906e:	d102      	bne.n	8009076 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8009070:	2301      	movs	r3, #1
 8009072:	75fb      	strb	r3, [r7, #23]
 8009074:	e001      	b.n	800907a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8009076:	2300      	movs	r3, #0
 8009078:	75fb      	strb	r3, [r7, #23]
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	f383 8810 	msr	PRIMASK, r3
}
 8009084:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8009086:	7dfb      	ldrb	r3, [r7, #23]
}
 8009088:	4618      	mov	r0, r3
 800908a:	371c      	adds	r7, #28
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8009094:	b480      	push	{r7}
 8009096:	b087      	sub	sp, #28
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800909e:	f3ef 8310 	mrs	r3, PRIMASK
 80090a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80090a4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80090a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80090a8:	b672      	cpsid	i
}
 80090aa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	683a      	ldr	r2, [r7, #0]
 80090be:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	683a      	ldr	r2, [r7, #0]
 80090c6:	605a      	str	r2, [r3, #4]
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	f383 8810 	msr	PRIMASK, r3
}
 80090d2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80090d4:	bf00      	nop
 80090d6:	371c      	adds	r7, #28
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b087      	sub	sp, #28
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090ea:	f3ef 8310 	mrs	r3, PRIMASK
 80090ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80090f0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80090f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80090f4:	b672      	cpsid	i
}
 80090f6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	685a      	ldr	r2, [r3, #4]
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	683a      	ldr	r2, [r7, #0]
 800910a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	683a      	ldr	r2, [r7, #0]
 8009112:	601a      	str	r2, [r3, #0]
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	f383 8810 	msr	PRIMASK, r3
}
 800911e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009120:	bf00      	nop
 8009122:	371c      	adds	r7, #28
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800912c:	b480      	push	{r7}
 800912e:	b087      	sub	sp, #28
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009134:	f3ef 8310 	mrs	r3, PRIMASK
 8009138:	60fb      	str	r3, [r7, #12]
  return(result);
 800913a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800913c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800913e:	b672      	cpsid	i
}
 8009140:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	6812      	ldr	r2, [r2, #0]
 800914a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	6852      	ldr	r2, [r2, #4]
 8009154:	605a      	str	r2, [r3, #4]
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	f383 8810 	msr	PRIMASK, r3
}
 8009160:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009162:	bf00      	nop
 8009164:	371c      	adds	r7, #28
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b086      	sub	sp, #24
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
 8009176:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009178:	f3ef 8310 	mrs	r3, PRIMASK
 800917c:	60fb      	str	r3, [r7, #12]
  return(result);
 800917e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009180:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009182:	b672      	cpsid	i
}
 8009184:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4618      	mov	r0, r3
 8009194:	f7ff ffca 	bl	800912c <LST_remove_node>
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	f383 8810 	msr	PRIMASK, r3
}
 80091a2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80091a4:	bf00      	nop
 80091a6:	3718      	adds	r7, #24
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80091ac:	b480      	push	{r7}
 80091ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80091b0:	4b03      	ldr	r3, [pc, #12]	@ (80091c0 <LL_FLASH_GetUDN+0x14>)
 80091b2:	681b      	ldr	r3, [r3, #0]
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	1fff7580 	.word	0x1fff7580

080091c4 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80091c4:	b480      	push	{r7}
 80091c6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80091c8:	4b03      	ldr	r3, [pc, #12]	@ (80091d8 <LL_FLASH_GetDeviceID+0x14>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	b2db      	uxtb	r3, r3
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr
 80091d8:	1fff7584 	.word	0x1fff7584

080091dc <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80091dc:	b480      	push	{r7}
 80091de:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80091e0:	4b03      	ldr	r3, [pc, #12]	@ (80091f0 <LL_FLASH_GetSTCompanyID+0x14>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	0a1b      	lsrs	r3, r3, #8
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr
 80091f0:	1fff7584 	.word	0x1fff7584

080091f4 <APP_BLE_Init>:
extern RTC_HandleTypeDef hrtc;
/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80091f4:	b5b0      	push	{r4, r5, r7, lr}
 80091f6:	b090      	sub	sp, #64	@ 0x40
 80091f8:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80091fa:	2392      	movs	r3, #146	@ 0x92
 80091fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_MY_TASK, UTIL_SEQ_RFU, myTask);
 8009200:	4a2b      	ldr	r2, [pc, #172]	@ (80092b0 <APP_BLE_Init+0xbc>)
 8009202:	2100      	movs	r1, #0
 8009204:	2004      	movs	r0, #4
 8009206:	f001 f9f9 	bl	800a5fc <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 800920a:	2100      	movs	r1, #0
 800920c:	2004      	movs	r0, #4
 800920e:	f001 fa17 	bl	800a640 <UTIL_SEQ_SetTask>

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8009212:	4b28      	ldr	r3, [pc, #160]	@ (80092b4 <APP_BLE_Init+0xc0>)
 8009214:	463c      	mov	r4, r7
 8009216:	461d      	mov	r5, r3
 8009218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800921a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800921c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800921e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009224:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009228:	c403      	stmia	r4!, {r0, r1}
 800922a:	8022      	strh	r2, [r4, #0]
 800922c:	3402      	adds	r4, #2
 800922e:	0c13      	lsrs	r3, r2, #16
 8009230:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8009232:	f000 f92b 	bl	800948c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8009236:	2101      	movs	r1, #1
 8009238:	2002      	movs	r0, #2
 800923a:	f001 f82d 	bl	800a298 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800923e:	4a1e      	ldr	r2, [pc, #120]	@ (80092b8 <APP_BLE_Init+0xc4>)
 8009240:	2100      	movs	r1, #0
 8009242:	2002      	movs	r0, #2
 8009244:	f001 f9da 	bl	800a5fc <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8009248:	463b      	mov	r3, r7
 800924a:	4618      	mov	r0, r3
 800924c:	f7ff f8ae 	bl	80083ac <SHCI_C2_BLE_Init>
 8009250:	4603      	mov	r3, r0
 8009252:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8009256:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800925a:	2b00      	cmp	r3, #0
 800925c:	d001      	beq.n	8009262 <APP_BLE_Init+0x6e>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800925e:	f7f8 f9a5 	bl	80015ac <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8009262:	f000 f929 	bl	80094b8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8009266:	f7fe fffb 	bl	8008260 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800926a:	4b14      	ldr	r3, [pc, #80]	@ (80092bc <APP_BLE_Init+0xc8>)
 800926c:	2200      	movs	r2, #0
 800926e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8009272:	4b12      	ldr	r3, [pc, #72]	@ (80092bc <APP_BLE_Init+0xc8>)
 8009274:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009278:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800927a:	4a11      	ldr	r2, [pc, #68]	@ (80092c0 <APP_BLE_Init+0xcc>)
 800927c:	2100      	movs	r1, #0
 800927e:	2001      	movs	r0, #1
 8009280:	f001 f9bc 	bl	800a5fc <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8009284:	2006      	movs	r0, #6
 8009286:	f7fe fe5f 	bl	8007f48 <aci_hal_set_radio_activity_mask>
 800928a:	4603      	mov	r3, r0
 800928c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8009290:	f000 fb74 	bl	800997c <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8009294:	4b09      	ldr	r3, [pc, #36]	@ (80092bc <APP_BLE_Init+0xc8>)
 8009296:	2200      	movs	r2, #0
 8009298:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800929a:	4b08      	ldr	r3, [pc, #32]	@ (80092bc <APP_BLE_Init+0xc8>)
 800929c:	2200      	movs	r2, #0
 800929e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 80092a0:	2001      	movs	r0, #1
 80092a2:	f000 f9bd 	bl	8009620 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 80092a6:	bf00      	nop
}
 80092a8:	3740      	adds	r7, #64	@ 0x40
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bdb0      	pop	{r4, r5, r7, pc}
 80092ae:	bf00      	nop
 80092b0:	080097f1 	.word	0x080097f1
 80092b4:	0800a970 	.word	0x0800a970
 80092b8:	080085c9 	.word	0x080085c9
 80092bc:	200003e8 	.word	0x200003e8
 80092c0:	08009709 	.word	0x08009709

080092c4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b08c      	sub	sp, #48	@ 0x30
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 80092cc:	2392      	movs	r3, #146	@ 0x92
 80092ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	3301      	adds	r3, #1
 80092d6:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 80092d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	2bff      	cmp	r3, #255	@ 0xff
 80092de:	d062      	beq.n	80093a6 <SVCCTL_App_Notification+0xe2>
 80092e0:	2bff      	cmp	r3, #255	@ 0xff
 80092e2:	f300 80c3 	bgt.w	800946c <SVCCTL_App_Notification+0x1a8>
 80092e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80092e8:	d02e      	beq.n	8009348 <SVCCTL_App_Notification+0x84>
 80092ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80092ec:	f300 80be 	bgt.w	800946c <SVCCTL_App_Notification+0x1a8>
 80092f0:	2b05      	cmp	r3, #5
 80092f2:	d002      	beq.n	80092fa <SVCCTL_App_Notification+0x36>
 80092f4:	2b10      	cmp	r3, #16
 80092f6:	d023      	beq.n	8009340 <SVCCTL_App_Notification+0x7c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80092f8:	e0b8      	b.n	800946c <SVCCTL_App_Notification+0x1a8>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 80092fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092fc:	3302      	adds	r3, #2
 80092fe:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009306:	b29a      	uxth	r2, r3
 8009308:	4b5c      	ldr	r3, [pc, #368]	@ (800947c <SVCCTL_App_Notification+0x1b8>)
 800930a:	8adb      	ldrh	r3, [r3, #22]
 800930c:	429a      	cmp	r2, r3
 800930e:	d106      	bne.n	800931e <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8009310:	4b5a      	ldr	r3, [pc, #360]	@ (800947c <SVCCTL_App_Notification+0x1b8>)
 8009312:	2200      	movs	r2, #0
 8009314:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009316:	4b59      	ldr	r3, [pc, #356]	@ (800947c <SVCCTL_App_Notification+0x1b8>)
 8009318:	2200      	movs	r2, #0
 800931a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800931e:	2001      	movs	r0, #1
 8009320:	f000 f97e 	bl	8009620 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8009324:	4b56      	ldr	r3, [pc, #344]	@ (8009480 <SVCCTL_App_Notification+0x1bc>)
 8009326:	2201      	movs	r2, #1
 8009328:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800932a:	4b54      	ldr	r3, [pc, #336]	@ (800947c <SVCCTL_App_Notification+0x1b8>)
 800932c:	8ada      	ldrh	r2, [r3, #22]
 800932e:	4b54      	ldr	r3, [pc, #336]	@ (8009480 <SVCCTL_App_Notification+0x1bc>)
 8009330:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8009332:	4853      	ldr	r0, [pc, #332]	@ (8009480 <SVCCTL_App_Notification+0x1bc>)
 8009334:	f000 fb0e 	bl	8009954 <Custom_APP_Notification>
      connection_status = 0;
 8009338:	4b52      	ldr	r3, [pc, #328]	@ (8009484 <SVCCTL_App_Notification+0x1c0>)
 800933a:	2200      	movs	r2, #0
 800933c:	701a      	strb	r2, [r3, #0]
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800933e:	e098      	b.n	8009472 <SVCCTL_App_Notification+0x1ae>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 8009340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009342:	3302      	adds	r3, #2
 8009344:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 8009346:	e094      	b.n	8009472 <SVCCTL_App_Notification+0x1ae>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8009348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800934a:	3302      	adds	r3, #2
 800934c:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d001      	beq.n	800935a <SVCCTL_App_Notification+0x96>
 8009356:	2b03      	cmp	r3, #3
          break;
 8009358:	e024      	b.n	80093a4 <SVCCTL_App_Notification+0xe0>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800935a:	69bb      	ldr	r3, [r7, #24]
 800935c:	3301      	adds	r3, #1
 800935e:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8009360:	4b46      	ldr	r3, [pc, #280]	@ (800947c <SVCCTL_App_Notification+0x1b8>)
 8009362:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009366:	2b04      	cmp	r3, #4
 8009368:	d104      	bne.n	8009374 <SVCCTL_App_Notification+0xb0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800936a:	4b44      	ldr	r3, [pc, #272]	@ (800947c <SVCCTL_App_Notification+0x1b8>)
 800936c:	2206      	movs	r2, #6
 800936e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8009372:	e003      	b.n	800937c <SVCCTL_App_Notification+0xb8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8009374:	4b41      	ldr	r3, [pc, #260]	@ (800947c <SVCCTL_App_Notification+0x1b8>)
 8009376:	2205      	movs	r2, #5
 8009378:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009382:	b29a      	uxth	r2, r3
 8009384:	4b3d      	ldr	r3, [pc, #244]	@ (800947c <SVCCTL_App_Notification+0x1b8>)
 8009386:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8009388:	4b3d      	ldr	r3, [pc, #244]	@ (8009480 <SVCCTL_App_Notification+0x1bc>)
 800938a:	2200      	movs	r2, #0
 800938c:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800938e:	4b3b      	ldr	r3, [pc, #236]	@ (800947c <SVCCTL_App_Notification+0x1b8>)
 8009390:	8ada      	ldrh	r2, [r3, #22]
 8009392:	4b3b      	ldr	r3, [pc, #236]	@ (8009480 <SVCCTL_App_Notification+0x1bc>)
 8009394:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8009396:	483a      	ldr	r0, [pc, #232]	@ (8009480 <SVCCTL_App_Notification+0x1bc>)
 8009398:	f000 fadc 	bl	8009954 <Custom_APP_Notification>
          connection_status = 1;
 800939c:	4b39      	ldr	r3, [pc, #228]	@ (8009484 <SVCCTL_App_Notification+0x1c0>)
 800939e:	2201      	movs	r2, #1
 80093a0:	701a      	strb	r2, [r3, #0]
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80093a2:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80093a4:	e065      	b.n	8009472 <SVCCTL_App_Notification+0x1ae>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80093a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a8:	3302      	adds	r3, #2
 80093aa:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 80093ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ae:	881b      	ldrh	r3, [r3, #0]
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d048      	beq.n	800944c <SVCCTL_App_Notification+0x188>
 80093ba:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80093be:	4293      	cmp	r3, r2
 80093c0:	dc56      	bgt.n	8009470 <SVCCTL_App_Notification+0x1ac>
 80093c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093c6:	d04b      	beq.n	8009460 <SVCCTL_App_Notification+0x19c>
 80093c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093cc:	dc50      	bgt.n	8009470 <SVCCTL_App_Notification+0x1ac>
 80093ce:	f240 420a 	movw	r2, #1034	@ 0x40a
 80093d2:	4293      	cmp	r3, r2
 80093d4:	dc4c      	bgt.n	8009470 <SVCCTL_App_Notification+0x1ac>
 80093d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093da:	dc04      	bgt.n	80093e6 <SVCCTL_App_Notification+0x122>
 80093dc:	2b04      	cmp	r3, #4
 80093de:	d041      	beq.n	8009464 <SVCCTL_App_Notification+0x1a0>
 80093e0:	2b06      	cmp	r3, #6
 80093e2:	d039      	beq.n	8009458 <SVCCTL_App_Notification+0x194>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80093e4:	e044      	b.n	8009470 <SVCCTL_App_Notification+0x1ac>
      switch (p_blecore_evt->ecode)
 80093e6:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 80093ea:	2b09      	cmp	r3, #9
 80093ec:	d840      	bhi.n	8009470 <SVCCTL_App_Notification+0x1ac>
 80093ee:	a201      	add	r2, pc, #4	@ (adr r2, 80093f4 <SVCCTL_App_Notification+0x130>)
 80093f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f4:	08009445 	.word	0x08009445
 80093f8:	0800941d 	.word	0x0800941d
 80093fc:	08009471 	.word	0x08009471
 8009400:	08009471 	.word	0x08009471
 8009404:	08009471 	.word	0x08009471
 8009408:	08009471 	.word	0x08009471
 800940c:	08009469 	.word	0x08009469
 8009410:	08009471 	.word	0x08009471
 8009414:	08009431 	.word	0x08009431
 8009418:	08009469 	.word	0x08009469
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800941c:	4b17      	ldr	r3, [pc, #92]	@ (800947c <SVCCTL_App_Notification+0x1b8>)
 800941e:	8adb      	ldrh	r3, [r3, #22]
 8009420:	4919      	ldr	r1, [pc, #100]	@ (8009488 <SVCCTL_App_Notification+0x1c4>)
 8009422:	4618      	mov	r0, r3
 8009424:	f7fd ff92 	bl	800734c <aci_gap_pass_key_resp>
 8009428:	4603      	mov	r3, r0
 800942a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 800942e:	e01c      	b.n	800946a <SVCCTL_App_Notification+0x1a6>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8009430:	4b12      	ldr	r3, [pc, #72]	@ (800947c <SVCCTL_App_Notification+0x1b8>)
 8009432:	8adb      	ldrh	r3, [r3, #22]
 8009434:	2101      	movs	r1, #1
 8009436:	4618      	mov	r0, r3
 8009438:	f7fe f932 	bl	80076a0 <aci_gap_numeric_comparison_value_confirm_yesno>
 800943c:	4603      	mov	r3, r0
 800943e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8009442:	e012      	b.n	800946a <SVCCTL_App_Notification+0x1a6>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8009444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009446:	3302      	adds	r3, #2
 8009448:	623b      	str	r3, [r7, #32]
          break;
 800944a:	e00e      	b.n	800946a <SVCCTL_App_Notification+0x1a6>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800944c:	4b0b      	ldr	r3, [pc, #44]	@ (800947c <SVCCTL_App_Notification+0x1b8>)
 800944e:	8adb      	ldrh	r3, [r3, #22]
 8009450:	4618      	mov	r0, r3
 8009452:	f7fe fc38 	bl	8007cc6 <aci_gatt_confirm_indication>
        break;
 8009456:	e008      	b.n	800946a <SVCCTL_App_Notification+0x1a6>
	      p_warning_event = (aci_hal_warning_event_rp0 *)p_blecore_evt->data;
 8009458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800945a:	3302      	adds	r3, #2
 800945c:	61fb      	str	r3, [r7, #28]
          break;
 800945e:	e004      	b.n	800946a <SVCCTL_App_Notification+0x1a6>
          break;
 8009460:	bf00      	nop
 8009462:	e005      	b.n	8009470 <SVCCTL_App_Notification+0x1ac>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8009464:	bf00      	nop
 8009466:	e003      	b.n	8009470 <SVCCTL_App_Notification+0x1ac>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8009468:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800946a:	e001      	b.n	8009470 <SVCCTL_App_Notification+0x1ac>
      break;
 800946c:	bf00      	nop
 800946e:	e000      	b.n	8009472 <SVCCTL_App_Notification+0x1ae>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009470:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8009472:	2301      	movs	r3, #1
}
 8009474:	4618      	mov	r0, r3
 8009476:	3730      	adds	r7, #48	@ 0x30
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}
 800947c:	200003e8 	.word	0x200003e8
 8009480:	2000046c 	.word	0x2000046c
 8009484:	20000470 	.word	0x20000470
 8009488:	0001b207 	.word	0x0001b207

0800948c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8009492:	4b06      	ldr	r3, [pc, #24]	@ (80094ac <Ble_Tl_Init+0x20>)
 8009494:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8009496:	4b06      	ldr	r3, [pc, #24]	@ (80094b0 <Ble_Tl_Init+0x24>)
 8009498:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800949a:	463b      	mov	r3, r7
 800949c:	4619      	mov	r1, r3
 800949e:	4805      	ldr	r0, [pc, #20]	@ (80094b4 <Ble_Tl_Init+0x28>)
 80094a0:	f7ff f876 	bl	8008590 <hci_init>

  return;
 80094a4:	bf00      	nop
}
 80094a6:	3708      	adds	r7, #8
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	200300d8 	.word	0x200300d8
 80094b0:	080097b9 	.word	0x080097b9
 80094b4:	08009781 	.word	0x08009781

080094b8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80094b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094ba:	b08d      	sub	sp, #52	@ 0x34
 80094bc:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80094be:	2300      	movs	r3, #0
 80094c0:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80094c2:	2392      	movs	r3, #146	@ 0x92
 80094c4:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80094c6:	f7fe fd93 	bl	8007ff0 <hci_reset>
 80094ca:	4603      	mov	r3, r0
 80094cc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 80094ce:	f000 f8d7 	bl	8009680 <BleGetBdAddress>
 80094d2:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, CONFIG_DATA_PUBLIC_ADDRESS_LEN, (uint8_t*) p_bd_addr);
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	2106      	movs	r1, #6
 80094d8:	2000      	movs	r0, #0
 80094da:	f7fe fc49 	bl	8007d70 <aci_hal_write_config_data>
 80094de:	4603      	mov	r3, r0
 80094e0:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80094e2:	4a4a      	ldr	r2, [pc, #296]	@ (800960c <Ble_Hci_Gap_Gatt_Init+0x154>)
 80094e4:	2110      	movs	r1, #16
 80094e6:	2018      	movs	r0, #24
 80094e8:	f7fe fc42 	bl	8007d70 <aci_hal_write_config_data>
 80094ec:	4603      	mov	r3, r0
 80094ee:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 80094f0:	4a47      	ldr	r2, [pc, #284]	@ (8009610 <Ble_Hci_Gap_Gatt_Init+0x158>)
 80094f2:	2110      	movs	r1, #16
 80094f4:	2008      	movs	r0, #8
 80094f6:	f7fe fc3b 	bl	8007d70 <aci_hal_write_config_data>
 80094fa:	4603      	mov	r3, r0
 80094fc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80094fe:	2118      	movs	r1, #24
 8009500:	2001      	movs	r0, #1
 8009502:	f7fe fcba 	bl	8007e7a <aci_hal_set_tx_power_level>
 8009506:	4603      	mov	r3, r0
 8009508:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800950a:	f7fe f930 	bl	800776e <aci_gatt_init>
 800950e:	4603      	mov	r3, r0
 8009510:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8009512:	2300      	movs	r3, #0
 8009514:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8009516:	7bfb      	ldrb	r3, [r7, #15]
 8009518:	f043 0301 	orr.w	r3, r3, #1
 800951c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800951e:	7bfb      	ldrb	r3, [r7, #15]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d01f      	beq.n	8009564 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8009524:	4b3b      	ldr	r3, [pc, #236]	@ (8009614 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8009526:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8009528:	1dba      	adds	r2, r7, #6
 800952a:	7bf8      	ldrb	r0, [r7, #15]
 800952c:	1cbb      	adds	r3, r7, #2
 800952e:	9301      	str	r3, [sp, #4]
 8009530:	1d3b      	adds	r3, r7, #4
 8009532:	9300      	str	r3, [sp, #0]
 8009534:	4613      	mov	r3, r2
 8009536:	2208      	movs	r2, #8
 8009538:	2100      	movs	r1, #0
 800953a:	f7fd ff6e 	bl	800741a <aci_gap_init>
 800953e:	4603      	mov	r3, r0
 8009540:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8009542:	88fc      	ldrh	r4, [r7, #6]
 8009544:	88bd      	ldrh	r5, [r7, #4]
 8009546:	68b8      	ldr	r0, [r7, #8]
 8009548:	f7f6 fe1a 	bl	8000180 <strlen>
 800954c:	4603      	mov	r3, r0
 800954e:	b2da      	uxtb	r2, r3
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	4613      	mov	r3, r2
 8009556:	2200      	movs	r2, #0
 8009558:	4629      	mov	r1, r5
 800955a:	4620      	mov	r0, r4
 800955c:	f7fe fb0a 	bl	8007b74 <aci_gatt_update_char_value>
 8009560:	4603      	mov	r3, r0
 8009562:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8009564:	88f8      	ldrh	r0, [r7, #6]
 8009566:	8879      	ldrh	r1, [r7, #2]
 8009568:	463b      	mov	r3, r7
 800956a:	9300      	str	r3, [sp, #0]
 800956c:	2302      	movs	r3, #2
 800956e:	2200      	movs	r2, #0
 8009570:	f7fe fb00 	bl	8007b74 <aci_gatt_update_char_value>
 8009574:	4603      	mov	r3, r0
 8009576:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8009578:	2202      	movs	r2, #2
 800957a:	2102      	movs	r1, #2
 800957c:	2000      	movs	r0, #0
 800957e:	f7fe fd5b 	bl	8008038 <hci_le_set_default_phy>
 8009582:	4603      	mov	r3, r0
 8009584:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8009586:	4b24      	ldr	r3, [pc, #144]	@ (8009618 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009588:	2201      	movs	r2, #1
 800958a:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800958c:	4b22      	ldr	r3, [pc, #136]	@ (8009618 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	4618      	mov	r0, r3
 8009592:	f7fd fdc3 	bl	800711c <aci_gap_set_io_capability>
 8009596:	4603      	mov	r3, r0
 8009598:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800959a:	4b1f      	ldr	r3, [pc, #124]	@ (8009618 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800959c:	2201      	movs	r2, #1
 800959e:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80095a0:	4b1d      	ldr	r3, [pc, #116]	@ (8009618 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80095a2:	2208      	movs	r2, #8
 80095a4:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80095a6:	4b1c      	ldr	r3, [pc, #112]	@ (8009618 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80095a8:	2210      	movs	r2, #16
 80095aa:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80095ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009618 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80095ae:	2200      	movs	r2, #0
 80095b0:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80095b2:	4b19      	ldr	r3, [pc, #100]	@ (8009618 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80095b4:	4a19      	ldr	r2, [pc, #100]	@ (800961c <Ble_Hci_Gap_Gatt_Init+0x164>)
 80095b6:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80095b8:	4b17      	ldr	r3, [pc, #92]	@ (8009618 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80095ba:	2200      	movs	r2, #0
 80095bc:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80095be:	4b16      	ldr	r3, [pc, #88]	@ (8009618 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80095c0:	789c      	ldrb	r4, [r3, #2]
 80095c2:	4b15      	ldr	r3, [pc, #84]	@ (8009618 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80095c4:	785d      	ldrb	r5, [r3, #1]
 80095c6:	4b14      	ldr	r3, [pc, #80]	@ (8009618 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80095c8:	791b      	ldrb	r3, [r3, #4]
 80095ca:	4a13      	ldr	r2, [pc, #76]	@ (8009618 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80095cc:	7952      	ldrb	r2, [r2, #5]
 80095ce:	4912      	ldr	r1, [pc, #72]	@ (8009618 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80095d0:	78c9      	ldrb	r1, [r1, #3]
 80095d2:	4811      	ldr	r0, [pc, #68]	@ (8009618 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80095d4:	6880      	ldr	r0, [r0, #8]
 80095d6:	2600      	movs	r6, #0
 80095d8:	9604      	str	r6, [sp, #16]
 80095da:	9003      	str	r0, [sp, #12]
 80095dc:	9102      	str	r1, [sp, #8]
 80095de:	9201      	str	r2, [sp, #4]
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	2300      	movs	r3, #0
 80095e4:	2201      	movs	r2, #1
 80095e6:	4629      	mov	r1, r5
 80095e8:	4620      	mov	r0, r4
 80095ea:	f7fd fdeb 	bl	80071c4 <aci_gap_set_authentication_requirement>
 80095ee:	4603      	mov	r3, r0
 80095f0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80095f2:	4b09      	ldr	r3, [pc, #36]	@ (8009618 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80095f4:	789b      	ldrb	r3, [r3, #2]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d003      	beq.n	8009602 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 80095fa:	f7fe f82d 	bl	8007658 <aci_gap_configure_filter_accept_list>
 80095fe:	4603      	mov	r3, r0
 8009600:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8009602:	bf00      	nop
 8009604:	371c      	adds	r7, #28
 8009606:	46bd      	mov	sp, r7
 8009608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800960a:	bf00      	nop
 800960c:	0800ab70 	.word	0x0800ab70
 8009610:	0800ab80 	.word	0x0800ab80
 8009614:	0800a9ac 	.word	0x0800a9ac
 8009618:	200003e8 	.word	0x200003e8
 800961c:	0001b207 	.word	0x0001b207

08009620 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b08c      	sub	sp, #48	@ 0x30
 8009624:	af08      	add	r7, sp, #32
 8009626:	4603      	mov	r3, r0
 8009628:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800962a:	2392      	movs	r3, #146	@ 0x92
 800962c:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800962e:	4a12      	ldr	r2, [pc, #72]	@ (8009678 <Adv_Request+0x58>)
 8009630:	79fb      	ldrb	r3, [r7, #7]
 8009632:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8009636:	2300      	movs	r3, #0
 8009638:	9306      	str	r3, [sp, #24]
 800963a:	2300      	movs	r3, #0
 800963c:	9305      	str	r3, [sp, #20]
 800963e:	2300      	movs	r3, #0
 8009640:	9304      	str	r3, [sp, #16]
 8009642:	2300      	movs	r3, #0
 8009644:	9303      	str	r3, [sp, #12]
 8009646:	2300      	movs	r3, #0
 8009648:	9302      	str	r3, [sp, #8]
 800964a:	2300      	movs	r3, #0
 800964c:	9301      	str	r3, [sp, #4]
 800964e:	2300      	movs	r3, #0
 8009650:	9300      	str	r3, [sp, #0]
 8009652:	2300      	movs	r3, #0
 8009654:	22a0      	movs	r2, #160	@ 0xa0
 8009656:	2180      	movs	r1, #128	@ 0x80
 8009658:	2000      	movs	r0, #0
 800965a:	f7fd fc65 	bl	8006f28 <aci_gap_set_discoverable>
 800965e:	4603      	mov	r3, r0
 8009660:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8009662:	4906      	ldr	r1, [pc, #24]	@ (800967c <Adv_Request+0x5c>)
 8009664:	200b      	movs	r0, #11
 8009666:	f7fd ff85 	bl	8007574 <aci_gap_update_adv_data>
 800966a:	4603      	mov	r3, r0
 800966c:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800966e:	bf00      	nop
}
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	200003e8 	.word	0x200003e8
 800967c:	20000020 	.word	0x20000020

08009680 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b086      	sub	sp, #24
 8009684:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8009686:	f7ff fd91 	bl	80091ac <LL_FLASH_GetUDN>
 800968a:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009692:	d023      	beq.n	80096dc <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8009694:	f7ff fda2 	bl	80091dc <LL_FLASH_GetSTCompanyID>
 8009698:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800969a:	f7ff fd93 	bl	80091c4 <LL_FLASH_GetDeviceID>
 800969e:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	b2da      	uxtb	r2, r3
 80096a4:	4b16      	ldr	r3, [pc, #88]	@ (8009700 <BleGetBdAddress+0x80>)
 80096a6:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	0a1b      	lsrs	r3, r3, #8
 80096ac:	b2da      	uxtb	r2, r3
 80096ae:	4b14      	ldr	r3, [pc, #80]	@ (8009700 <BleGetBdAddress+0x80>)
 80096b0:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	b2da      	uxtb	r2, r3
 80096b6:	4b12      	ldr	r3, [pc, #72]	@ (8009700 <BleGetBdAddress+0x80>)
 80096b8:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	b2da      	uxtb	r2, r3
 80096be:	4b10      	ldr	r3, [pc, #64]	@ (8009700 <BleGetBdAddress+0x80>)
 80096c0:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	0a1b      	lsrs	r3, r3, #8
 80096c6:	b2da      	uxtb	r2, r3
 80096c8:	4b0d      	ldr	r3, [pc, #52]	@ (8009700 <BleGetBdAddress+0x80>)
 80096ca:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	0c1b      	lsrs	r3, r3, #16
 80096d0:	b2da      	uxtb	r2, r3
 80096d2:	4b0b      	ldr	r3, [pc, #44]	@ (8009700 <BleGetBdAddress+0x80>)
 80096d4:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80096d6:	4b0a      	ldr	r3, [pc, #40]	@ (8009700 <BleGetBdAddress+0x80>)
 80096d8:	617b      	str	r3, [r7, #20]
 80096da:	e00b      	b.n	80096f4 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80096dc:	2000      	movs	r0, #0
 80096de:	f7ff fc7f 	bl	8008fe0 <OTP_Read>
 80096e2:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d002      	beq.n	80096f0 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	617b      	str	r3, [r7, #20]
 80096ee:	e001      	b.n	80096f4 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80096f0:	4b04      	ldr	r3, [pc, #16]	@ (8009704 <BleGetBdAddress+0x84>)
 80096f2:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80096f4:	697b      	ldr	r3, [r7, #20]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3718      	adds	r7, #24
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	200003e0 	.word	0x200003e0
 8009704:	0800ab68 	.word	0x0800ab68

08009708 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800970e:	4b0a      	ldr	r3, [pc, #40]	@ (8009738 <Adv_Cancel+0x30>)
 8009710:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009714:	2b05      	cmp	r3, #5
 8009716:	d00a      	beq.n	800972e <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009718:	2392      	movs	r3, #146	@ 0x92
 800971a:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800971c:	f7fd fbe0 	bl	8006ee0 <aci_gap_set_non_discoverable>
 8009720:	4603      	mov	r3, r0
 8009722:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009724:	4b04      	ldr	r3, [pc, #16]	@ (8009738 <Adv_Cancel+0x30>)
 8009726:	2200      	movs	r2, #0
 8009728:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800972c:	bf00      	nop
 800972e:	bf00      	nop
}
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	200003e8 	.word	0x200003e8

0800973c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8009744:	2100      	movs	r1, #0
 8009746:	2002      	movs	r0, #2
 8009748:	f000 ff7a 	bl	800a640 <UTIL_SEQ_SetTask>

  return;
 800974c:	bf00      	nop
}
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800975c:	2001      	movs	r0, #1
 800975e:	f000 ffdb 	bl	800a718 <UTIL_SEQ_SetEvt>

  return;
 8009762:	bf00      	nop
}
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b082      	sub	sp, #8
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8009772:	2001      	movs	r0, #1
 8009774:	f000 fff0 	bl	800a758 <UTIL_SEQ_WaitEvt>

  return;
 8009778:	bf00      	nop
}
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	3308      	adds	r3, #8
 8009792:	4618      	mov	r0, r3
 8009794:	f7fe fdb6 	bl	8008304 <SVCCTL_UserEvtRx>
 8009798:	4603      	mov	r3, r0
 800979a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800979c:	7afb      	ldrb	r3, [r7, #11]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d003      	beq.n	80097aa <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2201      	movs	r2, #1
 80097a6:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80097a8:	e003      	b.n	80097b2 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	701a      	strb	r2, [r3, #0]
  return;
 80097b0:	bf00      	nop
}
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	4603      	mov	r3, r0
 80097c0:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80097c2:	79fb      	ldrb	r3, [r7, #7]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d002      	beq.n	80097ce <BLE_StatusNot+0x16>
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d006      	beq.n	80097da <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80097cc:	e00b      	b.n	80097e6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80097ce:	231f      	movs	r3, #31
 80097d0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f000 ff60 	bl	800a698 <UTIL_SEQ_PauseTask>
      break;
 80097d8:	e005      	b.n	80097e6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80097da:	231f      	movs	r3, #31
 80097dc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80097de:	68f8      	ldr	r0, [r7, #12]
 80097e0:	f000 ff7a 	bl	800a6d8 <UTIL_SEQ_ResumeTask>
      break;
 80097e4:	bf00      	nop
  }

  return;
 80097e6:	bf00      	nop
}
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
	...

080097f0 <myTask>:
    return 0; // Success
}


void myTask(void)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0

	get_voltage();
 80097f6:	f7f7 fc37 	bl	8001068 <get_voltage>
	  	  UpdateCharData[0] = cell_mv[0]>>8;
 80097fa:	4b3f      	ldr	r3, [pc, #252]	@ (80098f8 <myTask+0x108>)
 80097fc:	881b      	ldrh	r3, [r3, #0]
 80097fe:	0a1b      	lsrs	r3, r3, #8
 8009800:	b29b      	uxth	r3, r3
 8009802:	b2da      	uxtb	r2, r3
 8009804:	4b3d      	ldr	r3, [pc, #244]	@ (80098fc <myTask+0x10c>)
 8009806:	701a      	strb	r2, [r3, #0]
		  UpdateCharData[1] = cell_mv[0];
 8009808:	4b3b      	ldr	r3, [pc, #236]	@ (80098f8 <myTask+0x108>)
 800980a:	881b      	ldrh	r3, [r3, #0]
 800980c:	b2da      	uxtb	r2, r3
 800980e:	4b3b      	ldr	r3, [pc, #236]	@ (80098fc <myTask+0x10c>)
 8009810:	705a      	strb	r2, [r3, #1]
		  UpdateCharData[2] = cell_mv[1]>>8;
 8009812:	4b39      	ldr	r3, [pc, #228]	@ (80098f8 <myTask+0x108>)
 8009814:	885b      	ldrh	r3, [r3, #2]
 8009816:	0a1b      	lsrs	r3, r3, #8
 8009818:	b29b      	uxth	r3, r3
 800981a:	b2da      	uxtb	r2, r3
 800981c:	4b37      	ldr	r3, [pc, #220]	@ (80098fc <myTask+0x10c>)
 800981e:	709a      	strb	r2, [r3, #2]
		  UpdateCharData[3] = cell_mv[1];
 8009820:	4b35      	ldr	r3, [pc, #212]	@ (80098f8 <myTask+0x108>)
 8009822:	885b      	ldrh	r3, [r3, #2]
 8009824:	b2da      	uxtb	r2, r3
 8009826:	4b35      	ldr	r3, [pc, #212]	@ (80098fc <myTask+0x10c>)
 8009828:	70da      	strb	r2, [r3, #3]
		  UpdateCharData[4] = cell_mv[2]>>8;
 800982a:	4b33      	ldr	r3, [pc, #204]	@ (80098f8 <myTask+0x108>)
 800982c:	889b      	ldrh	r3, [r3, #4]
 800982e:	0a1b      	lsrs	r3, r3, #8
 8009830:	b29b      	uxth	r3, r3
 8009832:	b2da      	uxtb	r2, r3
 8009834:	4b31      	ldr	r3, [pc, #196]	@ (80098fc <myTask+0x10c>)
 8009836:	711a      	strb	r2, [r3, #4]
		  UpdateCharData[5] = cell_mv[2];
 8009838:	4b2f      	ldr	r3, [pc, #188]	@ (80098f8 <myTask+0x108>)
 800983a:	889b      	ldrh	r3, [r3, #4]
 800983c:	b2da      	uxtb	r2, r3
 800983e:	4b2f      	ldr	r3, [pc, #188]	@ (80098fc <myTask+0x10c>)
 8009840:	715a      	strb	r2, [r3, #5]
		  UpdateCharData[6] = cell_mv[3]>>8;
 8009842:	4b2d      	ldr	r3, [pc, #180]	@ (80098f8 <myTask+0x108>)
 8009844:	88db      	ldrh	r3, [r3, #6]
 8009846:	0a1b      	lsrs	r3, r3, #8
 8009848:	b29b      	uxth	r3, r3
 800984a:	b2da      	uxtb	r2, r3
 800984c:	4b2b      	ldr	r3, [pc, #172]	@ (80098fc <myTask+0x10c>)
 800984e:	719a      	strb	r2, [r3, #6]
		  UpdateCharData[7] = cell_mv[3];
 8009850:	4b29      	ldr	r3, [pc, #164]	@ (80098f8 <myTask+0x108>)
 8009852:	88db      	ldrh	r3, [r3, #6]
 8009854:	b2da      	uxtb	r2, r3
 8009856:	4b29      	ldr	r3, [pc, #164]	@ (80098fc <myTask+0x10c>)
 8009858:	71da      	strb	r2, [r3, #7]
		  UpdateCharData[8] = cell_mv[4]>>8;
 800985a:	4b27      	ldr	r3, [pc, #156]	@ (80098f8 <myTask+0x108>)
 800985c:	891b      	ldrh	r3, [r3, #8]
 800985e:	0a1b      	lsrs	r3, r3, #8
 8009860:	b29b      	uxth	r3, r3
 8009862:	b2da      	uxtb	r2, r3
 8009864:	4b25      	ldr	r3, [pc, #148]	@ (80098fc <myTask+0x10c>)
 8009866:	721a      	strb	r2, [r3, #8]
		  UpdateCharData[9] = cell_mv[4];
 8009868:	4b23      	ldr	r3, [pc, #140]	@ (80098f8 <myTask+0x108>)
 800986a:	891b      	ldrh	r3, [r3, #8]
 800986c:	b2da      	uxtb	r2, r3
 800986e:	4b23      	ldr	r3, [pc, #140]	@ (80098fc <myTask+0x10c>)
 8009870:	725a      	strb	r2, [r3, #9]
		  UpdateCharData[10] = cell_mv[5]>>8;
 8009872:	4b21      	ldr	r3, [pc, #132]	@ (80098f8 <myTask+0x108>)
 8009874:	895b      	ldrh	r3, [r3, #10]
 8009876:	0a1b      	lsrs	r3, r3, #8
 8009878:	b29b      	uxth	r3, r3
 800987a:	b2da      	uxtb	r2, r3
 800987c:	4b1f      	ldr	r3, [pc, #124]	@ (80098fc <myTask+0x10c>)
 800987e:	729a      	strb	r2, [r3, #10]
		  UpdateCharData[11] = cell_mv[5];
 8009880:	4b1d      	ldr	r3, [pc, #116]	@ (80098f8 <myTask+0x108>)
 8009882:	895b      	ldrh	r3, [r3, #10]
 8009884:	b2da      	uxtb	r2, r3
 8009886:	4b1d      	ldr	r3, [pc, #116]	@ (80098fc <myTask+0x10c>)
 8009888:	72da      	strb	r2, [r3, #11]

		  uint32_t uid_word0 = HAL_GetUIDw2();
 800988a:	f7f8 f9e7 	bl	8001c5c <HAL_GetUIDw2>
 800988e:	6078      	str	r0, [r7, #4]

		  UpdateCharData[12] = uid_word0 >> 24;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	0e1b      	lsrs	r3, r3, #24
 8009894:	b2da      	uxtb	r2, r3
 8009896:	4b19      	ldr	r3, [pc, #100]	@ (80098fc <myTask+0x10c>)
 8009898:	731a      	strb	r2, [r3, #12]
		  UpdateCharData[13] = uid_word0 >> 16;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	0c1b      	lsrs	r3, r3, #16
 800989e:	b2da      	uxtb	r2, r3
 80098a0:	4b16      	ldr	r3, [pc, #88]	@ (80098fc <myTask+0x10c>)
 80098a2:	735a      	strb	r2, [r3, #13]
		  UpdateCharData[14] = uid_word0 >> 8;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	0a1b      	lsrs	r3, r3, #8
 80098a8:	b2da      	uxtb	r2, r3
 80098aa:	4b14      	ldr	r3, [pc, #80]	@ (80098fc <myTask+0x10c>)
 80098ac:	739a      	strb	r2, [r3, #14]
		  UpdateCharData[15] = uid_word0;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	b2da      	uxtb	r2, r3
 80098b2:	4b12      	ldr	r3, [pc, #72]	@ (80098fc <myTask+0x10c>)
 80098b4:	73da      	strb	r2, [r3, #15]
		  UpdateCharData[16] = update_state();
 80098b6:	f7f7 fd63 	bl	8001380 <update_state>
 80098ba:	4603      	mov	r3, r0
 80098bc:	b2da      	uxtb	r2, r3
 80098be:	4b0f      	ldr	r3, [pc, #60]	@ (80098fc <myTask+0x10c>)
 80098c0:	741a      	strb	r2, [r3, #16]
		  UpdateCharData[17] = last_net_mv>>8;
 80098c2:	4b0f      	ldr	r3, [pc, #60]	@ (8009900 <myTask+0x110>)
 80098c4:	881b      	ldrh	r3, [r3, #0]
 80098c6:	0a1b      	lsrs	r3, r3, #8
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	b2da      	uxtb	r2, r3
 80098cc:	4b0b      	ldr	r3, [pc, #44]	@ (80098fc <myTask+0x10c>)
 80098ce:	745a      	strb	r2, [r3, #17]
		  UpdateCharData[18] = last_net_mv;
 80098d0:	4b0b      	ldr	r3, [pc, #44]	@ (8009900 <myTask+0x110>)
 80098d2:	881b      	ldrh	r3, [r3, #0]
 80098d4:	b2da      	uxtb	r2, r3
 80098d6:	4b09      	ldr	r3, [pc, #36]	@ (80098fc <myTask+0x10c>)
 80098d8:	749a      	strb	r2, [r3, #18]

		  Custom_Mycharnotify_Update_Char();
 80098da:	f000 f857 	bl	800998c <Custom_Mycharnotify_Update_Char>
if(sleep_flag == 1){
 80098de:	4b09      	ldr	r3, [pc, #36]	@ (8009904 <myTask+0x114>)
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d003      	beq.n	80098ee <myTask+0xfe>
	      }
else
	      {UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);}
 80098e6:	2100      	movs	r1, #0
 80098e8:	2004      	movs	r0, #4
 80098ea:	f000 fea9 	bl	800a640 <UTIL_SEQ_SetTask>
}
 80098ee:	bf00      	nop
 80098f0:	3708      	adds	r7, #8
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	20000328 	.word	0x20000328
 80098fc:	20000474 	.word	0x20000474
 8009900:	2000034c 	.word	0x2000034c
 8009904:	20000324 	.word	0x20000324

08009908 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	2b03      	cmp	r3, #3
 8009916:	d813      	bhi.n	8009940 <Custom_STM_App_Notification+0x38>
 8009918:	a201      	add	r2, pc, #4	@ (adr r2, 8009920 <Custom_STM_App_Notification+0x18>)
 800991a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991e:	bf00      	nop
 8009920:	08009941 	.word	0x08009941
 8009924:	08009931 	.word	0x08009931
 8009928:	08009939 	.word	0x08009939
 800992c:	08009941 	.word	0x08009941
      /* USER CODE END CUSTOM_STM_MYCHARWRITE_WRITE_EVT */
      break;

    case CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT */
    	notifyflag = 1;
 8009930:	4b07      	ldr	r3, [pc, #28]	@ (8009950 <Custom_STM_App_Notification+0x48>)
 8009932:	2201      	movs	r2, #1
 8009934:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT */
      break;
 8009936:	e004      	b.n	8009942 <Custom_STM_App_Notification+0x3a>

    case CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT */
    	notifyflag = 0;
 8009938:	4b05      	ldr	r3, [pc, #20]	@ (8009950 <Custom_STM_App_Notification+0x48>)
 800993a:	2200      	movs	r2, #0
 800993c:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT */
      break;
 800993e:	e000      	b.n	8009942 <Custom_STM_App_Notification+0x3a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8009940:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8009942:	bf00      	nop
}
 8009944:	370c      	adds	r7, #12
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop
 8009950:	20000674 	.word	0x20000674

08009954 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d002      	beq.n	800996a <Custom_APP_Notification+0x16>
 8009964:	2b01      	cmp	r3, #1
 8009966:	d002      	beq.n	800996e <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8009968:	e002      	b.n	8009970 <Custom_APP_Notification+0x1c>
      break;
 800996a:	bf00      	nop
 800996c:	e000      	b.n	8009970 <Custom_APP_Notification+0x1c>
      break;
 800996e:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8009970:	bf00      	nop
}
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800997c:	b480      	push	{r7}
 800997e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8009980:	bf00      	nop
}
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr
	...

0800998c <Custom_Mycharnotify_Update_Char>:
 *
 *************************************************************/

/* mySvc */
__USED void Custom_Mycharnotify_Update_Char(void) /* Property Read */
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8009992:	2300      	movs	r3, #0
 8009994:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Mycharnotify_UC_1*/
  updateflag = notifyflag;
 8009996:	4b07      	ldr	r3, [pc, #28]	@ (80099b4 <Custom_Mycharnotify_Update_Char+0x28>)
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END Mycharnotify_UC_1*/

  if (updateflag != 0)
 800999c:	79fb      	ldrb	r3, [r7, #7]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d004      	beq.n	80099ac <Custom_Mycharnotify_Update_Char+0x20>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_MYCHARNOTIFY, (uint8_t *)UpdateCharData);
 80099a2:	4905      	ldr	r1, [pc, #20]	@ (80099b8 <Custom_Mycharnotify_Update_Char+0x2c>)
 80099a4:	2001      	movs	r0, #1
 80099a6:	f000 f967 	bl	8009c78 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Mycharnotify_UC_Last*/

  /* USER CODE END Mycharnotify_UC_Last*/
  return;
 80099aa:	bf00      	nop
 80099ac:	bf00      	nop
}
 80099ae:	3708      	adds	r7, #8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	20000674 	.word	0x20000674
 80099b8:	20000474 	.word	0x20000474

080099bc <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b08c      	sub	sp, #48	@ 0x30
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80099c4:	2300      	movs	r3, #0
 80099c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	3301      	adds	r3, #1
 80099ce:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 80099d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	2bff      	cmp	r3, #255	@ 0xff
 80099d6:	f040 8094 	bne.w	8009b02 <Custom_STM_Event_Handler+0x146>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80099da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099dc:	3302      	adds	r3, #2
 80099de:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 80099e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e2:	881b      	ldrh	r3, [r3, #0]
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 80099ea:	2b1a      	cmp	r3, #26
 80099ec:	f200 8085 	bhi.w	8009afa <Custom_STM_Event_Handler+0x13e>
 80099f0:	a201      	add	r2, pc, #4	@ (adr r2, 80099f8 <Custom_STM_Event_Handler+0x3c>)
 80099f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f6:	bf00      	nop
 80099f8:	08009a65 	.word	0x08009a65
 80099fc:	08009afb 	.word	0x08009afb
 8009a00:	08009afb 	.word	0x08009afb
 8009a04:	08009afb 	.word	0x08009afb
 8009a08:	08009afb 	.word	0x08009afb
 8009a0c:	08009afb 	.word	0x08009afb
 8009a10:	08009afb 	.word	0x08009afb
 8009a14:	08009afb 	.word	0x08009afb
 8009a18:	08009afb 	.word	0x08009afb
 8009a1c:	08009afb 	.word	0x08009afb
 8009a20:	08009afb 	.word	0x08009afb
 8009a24:	08009afb 	.word	0x08009afb
 8009a28:	08009afb 	.word	0x08009afb
 8009a2c:	08009afb 	.word	0x08009afb
 8009a30:	08009afb 	.word	0x08009afb
 8009a34:	08009afb 	.word	0x08009afb
 8009a38:	08009afb 	.word	0x08009afb
 8009a3c:	08009afb 	.word	0x08009afb
 8009a40:	08009afb 	.word	0x08009afb
 8009a44:	08009afb 	.word	0x08009afb
 8009a48:	08009afb 	.word	0x08009afb
 8009a4c:	08009afb 	.word	0x08009afb
 8009a50:	08009afb 	.word	0x08009afb
 8009a54:	08009afb 	.word	0x08009afb
 8009a58:	08009afb 	.word	0x08009afb
 8009a5c:	08009afb 	.word	0x08009afb
 8009a60:	08009add 	.word	0x08009add
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8009a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a66:	3302      	adds	r3, #2
 8009a68:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	885b      	ldrh	r3, [r3, #2]
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	461a      	mov	r2, r3
 8009a72:	4b27      	ldr	r3, [pc, #156]	@ (8009b10 <Custom_STM_Event_Handler+0x154>)
 8009a74:	889b      	ldrh	r3, [r3, #4]
 8009a76:	3302      	adds	r3, #2
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d119      	bne.n	8009ab0 <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	7a1b      	ldrb	r3, [r3, #8]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d002      	beq.n	8009a90 <Custom_STM_Event_Handler+0xd4>
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d008      	beq.n	8009aa0 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 8009a8e:	e024      	b.n	8009ada <Custom_STM_Event_Handler+0x11e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT;
 8009a90:	2302      	movs	r3, #2
 8009a92:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8009a94:	f107 0308 	add.w	r3, r7, #8
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7ff ff35 	bl	8009908 <Custom_STM_App_Notification>
                break;
 8009a9e:	e01c      	b.n	8009ada <Custom_STM_Event_Handler+0x11e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8009aa4:	f107 0308 	add.w	r3, r7, #8
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7ff ff2d 	bl	8009908 <Custom_STM_App_Notification>
                break;
 8009aae:	e014      	b.n	8009ada <Custom_STM_Event_Handler+0x11e>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	885b      	ldrh	r3, [r3, #2]
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	4b15      	ldr	r3, [pc, #84]	@ (8009b10 <Custom_STM_Event_Handler+0x154>)
 8009aba:	885b      	ldrh	r3, [r3, #2]
 8009abc:	3301      	adds	r3, #1
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d11d      	bne.n	8009afe <Custom_STM_Event_Handler+0x142>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
        if(attribute_modified->Attr_Data[0] == 'A'){
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	7a1b      	ldrb	r3, [r3, #8]
 8009acc:	2b41      	cmp	r3, #65	@ 0x41
 8009ace:	d116      	bne.n	8009afe <Custom_STM_Event_Handler+0x142>
        		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_5);
 8009ad0:	2120      	movs	r1, #32
 8009ad2:	4810      	ldr	r0, [pc, #64]	@ (8009b14 <Custom_STM_Event_Handler+0x158>)
 8009ad4:	f7fa f836 	bl	8003b44 <HAL_GPIO_TogglePin>
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 8009ad8:	e011      	b.n	8009afe <Custom_STM_Event_Handler+0x142>
 8009ada:	e010      	b.n	8009afe <Custom_STM_Event_Handler+0x142>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8009adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ade:	3302      	adds	r3, #2
 8009ae0:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8009ae2:	2303      	movs	r3, #3
 8009ae4:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8009ae6:	6a3b      	ldr	r3, [r7, #32]
 8009ae8:	881b      	ldrh	r3, [r3, #0]
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 8009aee:	f107 0308 	add.w	r3, r7, #8
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7ff ff08 	bl	8009908 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8009af8:	e002      	b.n	8009b00 <Custom_STM_Event_Handler+0x144>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8009afa:	bf00      	nop
 8009afc:	e002      	b.n	8009b04 <Custom_STM_Event_Handler+0x148>
          break;
 8009afe:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009b00:	e000      	b.n	8009b04 <Custom_STM_Event_Handler+0x148>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8009b02:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8009b04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3730      	adds	r7, #48	@ 0x30
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	20000678 	.word	0x20000678
 8009b14:	48000400 	.word	0x48000400

08009b18 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b08c      	sub	sp, #48	@ 0x30
 8009b1c:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009b1e:	2392      	movs	r3, #146	@ 0x92
 8009b20:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8009b22:	484f      	ldr	r0, [pc, #316]	@ (8009c60 <SVCCTL_InitCustomSvc+0x148>)
 8009b24:	f7fe fbd4 	bl	80082d0 <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 8009b28:	2306      	movs	r3, #6
 8009b2a:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService1 */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService1 */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 8009b2c:	238f      	movs	r3, #143	@ 0x8f
 8009b2e:	713b      	strb	r3, [r7, #4]
 8009b30:	23e5      	movs	r3, #229	@ 0xe5
 8009b32:	717b      	strb	r3, [r7, #5]
 8009b34:	23b3      	movs	r3, #179	@ 0xb3
 8009b36:	71bb      	strb	r3, [r7, #6]
 8009b38:	23d5      	movs	r3, #213	@ 0xd5
 8009b3a:	71fb      	strb	r3, [r7, #7]
 8009b3c:	232e      	movs	r3, #46	@ 0x2e
 8009b3e:	723b      	strb	r3, [r7, #8]
 8009b40:	237f      	movs	r3, #127	@ 0x7f
 8009b42:	727b      	strb	r3, [r7, #9]
 8009b44:	234a      	movs	r3, #74	@ 0x4a
 8009b46:	72bb      	strb	r3, [r7, #10]
 8009b48:	2398      	movs	r3, #152	@ 0x98
 8009b4a:	72fb      	strb	r3, [r7, #11]
 8009b4c:	232a      	movs	r3, #42	@ 0x2a
 8009b4e:	733b      	strb	r3, [r7, #12]
 8009b50:	2348      	movs	r3, #72	@ 0x48
 8009b52:	737b      	strb	r3, [r7, #13]
 8009b54:	237a      	movs	r3, #122	@ 0x7a
 8009b56:	73bb      	strb	r3, [r7, #14]
 8009b58:	23cc      	movs	r3, #204	@ 0xcc
 8009b5a:	73fb      	strb	r3, [r7, #15]
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	743b      	strb	r3, [r7, #16]
 8009b60:	2300      	movs	r3, #0
 8009b62:	747b      	strb	r3, [r7, #17]
 8009b64:	2300      	movs	r3, #0
 8009b66:	74bb      	strb	r3, [r7, #18]
 8009b68:	2300      	movs	r3, #0
 8009b6a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8009b6c:	7dbb      	ldrb	r3, [r7, #22]
 8009b6e:	1d39      	adds	r1, r7, #4
 8009b70:	4a3c      	ldr	r2, [pc, #240]	@ (8009c64 <SVCCTL_InitCustomSvc+0x14c>)
 8009b72:	9200      	str	r2, [sp, #0]
 8009b74:	2201      	movs	r2, #1
 8009b76:	2002      	movs	r0, #2
 8009b78:	f7fd fe1e 	bl	80077b8 <aci_gatt_add_service>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 8009b80:	2319      	movs	r3, #25
 8009b82:	713b      	strb	r3, [r7, #4]
 8009b84:	23ed      	movs	r3, #237	@ 0xed
 8009b86:	717b      	strb	r3, [r7, #5]
 8009b88:	2382      	movs	r3, #130	@ 0x82
 8009b8a:	71bb      	strb	r3, [r7, #6]
 8009b8c:	23ae      	movs	r3, #174	@ 0xae
 8009b8e:	71fb      	strb	r3, [r7, #7]
 8009b90:	23ed      	movs	r3, #237	@ 0xed
 8009b92:	723b      	strb	r3, [r7, #8]
 8009b94:	2321      	movs	r3, #33	@ 0x21
 8009b96:	727b      	strb	r3, [r7, #9]
 8009b98:	234c      	movs	r3, #76	@ 0x4c
 8009b9a:	72bb      	strb	r3, [r7, #10]
 8009b9c:	239d      	movs	r3, #157	@ 0x9d
 8009b9e:	72fb      	strb	r3, [r7, #11]
 8009ba0:	2341      	movs	r3, #65	@ 0x41
 8009ba2:	733b      	strb	r3, [r7, #12]
 8009ba4:	2345      	movs	r3, #69	@ 0x45
 8009ba6:	737b      	strb	r3, [r7, #13]
 8009ba8:	2322      	movs	r3, #34	@ 0x22
 8009baa:	73bb      	strb	r3, [r7, #14]
 8009bac:	238e      	movs	r3, #142	@ 0x8e
 8009bae:	73fb      	strb	r3, [r7, #15]
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	743b      	strb	r3, [r7, #16]
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	747b      	strb	r3, [r7, #17]
 8009bb8:	2300      	movs	r3, #0
 8009bba:	74bb      	strb	r3, [r7, #18]
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 8009bc0:	4b28      	ldr	r3, [pc, #160]	@ (8009c64 <SVCCTL_InitCustomSvc+0x14c>)
 8009bc2:	8818      	ldrh	r0, [r3, #0]
 8009bc4:	4b28      	ldr	r3, [pc, #160]	@ (8009c68 <SVCCTL_InitCustomSvc+0x150>)
 8009bc6:	881b      	ldrh	r3, [r3, #0]
 8009bc8:	1d3a      	adds	r2, r7, #4
 8009bca:	4928      	ldr	r1, [pc, #160]	@ (8009c6c <SVCCTL_InitCustomSvc+0x154>)
 8009bcc:	9105      	str	r1, [sp, #20]
 8009bce:	2100      	movs	r1, #0
 8009bd0:	9104      	str	r1, [sp, #16]
 8009bd2:	2110      	movs	r1, #16
 8009bd4:	9103      	str	r1, [sp, #12]
 8009bd6:	2101      	movs	r1, #1
 8009bd8:	9102      	str	r1, [sp, #8]
 8009bda:	2100      	movs	r1, #0
 8009bdc:	9101      	str	r1, [sp, #4]
 8009bde:	2108      	movs	r1, #8
 8009be0:	9100      	str	r1, [sp, #0]
 8009be2:	2102      	movs	r1, #2
 8009be4:	f7fd febe 	bl	8007964 <aci_gatt_add_char>
 8009be8:	4603      	mov	r3, r0
 8009bea:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  myCharNotify
   */
  COPY_MYCHARNOTIFY_UUID(uuid.Char_UUID_128);
 8009bec:	2319      	movs	r3, #25
 8009bee:	713b      	strb	r3, [r7, #4]
 8009bf0:	23ed      	movs	r3, #237	@ 0xed
 8009bf2:	717b      	strb	r3, [r7, #5]
 8009bf4:	2382      	movs	r3, #130	@ 0x82
 8009bf6:	71bb      	strb	r3, [r7, #6]
 8009bf8:	23ae      	movs	r3, #174	@ 0xae
 8009bfa:	71fb      	strb	r3, [r7, #7]
 8009bfc:	23ed      	movs	r3, #237	@ 0xed
 8009bfe:	723b      	strb	r3, [r7, #8]
 8009c00:	2321      	movs	r3, #33	@ 0x21
 8009c02:	727b      	strb	r3, [r7, #9]
 8009c04:	234c      	movs	r3, #76	@ 0x4c
 8009c06:	72bb      	strb	r3, [r7, #10]
 8009c08:	239d      	movs	r3, #157	@ 0x9d
 8009c0a:	72fb      	strb	r3, [r7, #11]
 8009c0c:	2341      	movs	r3, #65	@ 0x41
 8009c0e:	733b      	strb	r3, [r7, #12]
 8009c10:	2345      	movs	r3, #69	@ 0x45
 8009c12:	737b      	strb	r3, [r7, #13]
 8009c14:	2322      	movs	r3, #34	@ 0x22
 8009c16:	73bb      	strb	r3, [r7, #14]
 8009c18:	238e      	movs	r3, #142	@ 0x8e
 8009c1a:	73fb      	strb	r3, [r7, #15]
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	743b      	strb	r3, [r7, #16]
 8009c20:	2300      	movs	r3, #0
 8009c22:	747b      	strb	r3, [r7, #17]
 8009c24:	2300      	movs	r3, #0
 8009c26:	74bb      	strb	r3, [r7, #18]
 8009c28:	2300      	movs	r3, #0
 8009c2a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 8009c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8009c64 <SVCCTL_InitCustomSvc+0x14c>)
 8009c2e:	8818      	ldrh	r0, [r3, #0]
 8009c30:	4b0f      	ldr	r3, [pc, #60]	@ (8009c70 <SVCCTL_InitCustomSvc+0x158>)
 8009c32:	881b      	ldrh	r3, [r3, #0]
 8009c34:	1d3a      	adds	r2, r7, #4
 8009c36:	490f      	ldr	r1, [pc, #60]	@ (8009c74 <SVCCTL_InitCustomSvc+0x15c>)
 8009c38:	9105      	str	r1, [sp, #20]
 8009c3a:	2100      	movs	r1, #0
 8009c3c:	9104      	str	r1, [sp, #16]
 8009c3e:	2110      	movs	r1, #16
 8009c40:	9103      	str	r1, [sp, #12]
 8009c42:	2101      	movs	r1, #1
 8009c44:	9102      	str	r1, [sp, #8]
 8009c46:	2100      	movs	r1, #0
 8009c48:	9101      	str	r1, [sp, #4]
 8009c4a:	2110      	movs	r1, #16
 8009c4c:	9100      	str	r1, [sp, #0]
 8009c4e:	2102      	movs	r1, #2
 8009c50:	f7fd fe88 	bl	8007964 <aci_gatt_add_char>
 8009c54:	4603      	mov	r3, r0
 8009c56:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8009c58:	bf00      	nop
}
 8009c5a:	3718      	adds	r7, #24
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	080099bd 	.word	0x080099bd
 8009c64:	20000678 	.word	0x20000678
 8009c68:	2000002c 	.word	0x2000002c
 8009c6c:	2000067a 	.word	0x2000067a
 8009c70:	2000002e 	.word	0x2000002e
 8009c74:	2000067c 	.word	0x2000067c

08009c78 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b086      	sub	sp, #24
 8009c7c:	af02      	add	r7, sp, #8
 8009c7e:	4603      	mov	r3, r0
 8009c80:	6039      	str	r1, [r7, #0]
 8009c82:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009c84:	2392      	movs	r3, #146	@ 0x92
 8009c86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8009c88:	79fb      	ldrb	r3, [r7, #7]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d002      	beq.n	8009c94 <Custom_STM_App_Update_Char+0x1c>
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d010      	beq.n	8009cb4 <Custom_STM_App_Update_Char+0x3c>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 8009c92:	e01f      	b.n	8009cd4 <Custom_STM_App_Update_Char+0x5c>
      ret = aci_gatt_update_char_value(CustomContext.CustomMysvcHdle,
 8009c94:	4b12      	ldr	r3, [pc, #72]	@ (8009ce0 <Custom_STM_App_Update_Char+0x68>)
 8009c96:	8818      	ldrh	r0, [r3, #0]
 8009c98:	4b11      	ldr	r3, [pc, #68]	@ (8009ce0 <Custom_STM_App_Update_Char+0x68>)
 8009c9a:	8859      	ldrh	r1, [r3, #2]
 8009c9c:	4b11      	ldr	r3, [pc, #68]	@ (8009ce4 <Custom_STM_App_Update_Char+0x6c>)
 8009c9e:	881b      	ldrh	r3, [r3, #0]
 8009ca0:	b2da      	uxtb	r2, r3
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	9300      	str	r3, [sp, #0]
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f7fd ff63 	bl	8007b74 <aci_gatt_update_char_value>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	73fb      	strb	r3, [r7, #15]
      break;
 8009cb2:	e00f      	b.n	8009cd4 <Custom_STM_App_Update_Char+0x5c>
      ret = aci_gatt_update_char_value(CustomContext.CustomMysvcHdle,
 8009cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8009ce0 <Custom_STM_App_Update_Char+0x68>)
 8009cb6:	8818      	ldrh	r0, [r3, #0]
 8009cb8:	4b09      	ldr	r3, [pc, #36]	@ (8009ce0 <Custom_STM_App_Update_Char+0x68>)
 8009cba:	8899      	ldrh	r1, [r3, #4]
 8009cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8009ce8 <Custom_STM_App_Update_Char+0x70>)
 8009cbe:	881b      	ldrh	r3, [r3, #0]
 8009cc0:	b2da      	uxtb	r2, r3
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	9300      	str	r3, [sp, #0]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f7fd ff53 	bl	8007b74 <aci_gatt_update_char_value>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8009cd2:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8009cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	20000678 	.word	0x20000678
 8009ce4:	2000002c 	.word	0x2000002c
 8009ce8:	2000002e 	.word	0x2000002e

08009cec <LL_PWR_EnableBootC2>:
{
 8009cec:	b480      	push	{r7}
 8009cee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8009cf0:	4b05      	ldr	r3, [pc, #20]	@ (8009d08 <LL_PWR_EnableBootC2+0x1c>)
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	4a04      	ldr	r2, [pc, #16]	@ (8009d08 <LL_PWR_EnableBootC2+0x1c>)
 8009cf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009cfa:	60d3      	str	r3, [r2, #12]
}
 8009cfc:	bf00      	nop
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr
 8009d06:	bf00      	nop
 8009d08:	58000400 	.word	0x58000400

08009d0c <LL_C2_EXTI_EnableEvent_32_63>:
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8009d14:	4b06      	ldr	r3, [pc, #24]	@ (8009d30 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009d16:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8009d1a:	4905      	ldr	r1, [pc, #20]	@ (8009d30 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8009d24:	bf00      	nop
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr
 8009d30:	58000800 	.word	0x58000800

08009d34 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009d3c:	4b05      	ldr	r3, [pc, #20]	@ (8009d54 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009d3e:	6a1a      	ldr	r2, [r3, #32]
 8009d40:	4904      	ldr	r1, [pc, #16]	@ (8009d54 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	620b      	str	r3, [r1, #32]
}
 8009d48:	bf00      	nop
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr
 8009d54:	58000800 	.word	0x58000800

08009d58 <LL_AHB3_GRP1_EnableClock>:
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8009d60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009d64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8009d70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009d74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4013      	ands	r3, r2
 8009d7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
}
 8009d7e:	bf00      	nop
 8009d80:	3714      	adds	r7, #20
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr

08009d8a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8009d8a:	b480      	push	{r7}
 8009d8c:	b085      	sub	sp, #20
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8009d92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009d96:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8009d9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4313      	orrs	r3, r2
 8009da2:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8009da6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009daa:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	4013      	ands	r3, r2
 8009db2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009db4:	68fb      	ldr	r3, [r7, #12]
}
 8009db6:	bf00      	nop
 8009db8:	3714      	adds	r7, #20
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr

08009dc2 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	b083      	sub	sp, #12
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	601a      	str	r2, [r3, #0]
}
 8009dd6:	bf00      	nop
 8009dd8:	370c      	adds	r7, #12
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr

08009de2 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8009de2:	b480      	push	{r7}
 8009de4:	b083      	sub	sp, #12
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f043 0201 	orr.w	r2, r3, #1
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	601a      	str	r2, [r3, #0]
}
 8009df6:	bf00      	nop
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr

08009e02 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009e02:	b480      	push	{r7}
 8009e04:	b083      	sub	sp, #12
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
 8009e0a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685a      	ldr	r2, [r3, #4]
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	041b      	lsls	r3, r3, #16
 8009e14:	43db      	mvns	r3, r3
 8009e16:	401a      	ands	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	605a      	str	r2, [r3, #4]
}
 8009e1c:	bf00      	nop
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	685a      	ldr	r2, [r3, #4]
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	041b      	lsls	r3, r3, #16
 8009e3a:	431a      	orrs	r2, r3
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	605a      	str	r2, [r3, #4]
}
 8009e40:	bf00      	nop
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	685a      	ldr	r2, [r3, #4]
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	43db      	mvns	r3, r3
 8009e5e:	401a      	ands	r2, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	605a      	str	r2, [r3, #4]
}
 8009e64:	bf00      	nop
 8009e66:	370c      	adds	r7, #12
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr

08009e70 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	683a      	ldr	r2, [r7, #0]
 8009e7e:	609a      	str	r2, [r3, #8]
}
 8009e80:	bf00      	nop
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	041a      	lsls	r2, r3, #16
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	609a      	str	r2, [r3, #8]
}
 8009e9e:	bf00      	nop
 8009ea0:	370c      	adds	r7, #12
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr

08009eaa <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8009eaa:	b480      	push	{r7}
 8009eac:	b083      	sub	sp, #12
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
 8009eb2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	68da      	ldr	r2, [r3, #12]
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	4013      	ands	r3, r2
 8009ebc:	683a      	ldr	r2, [r7, #0]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d101      	bne.n	8009ec6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e000      	b.n	8009ec8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	69da      	ldr	r2, [r3, #28]
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	4013      	ands	r3, r2
 8009ee6:	683a      	ldr	r2, [r7, #0]
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d101      	bne.n	8009ef0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8009eec:	2301      	movs	r3, #1
 8009eee:	e000      	b.n	8009ef2 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	370c      	adds	r7, #12
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr
	...

08009f00 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8009f04:	2102      	movs	r1, #2
 8009f06:	4818      	ldr	r0, [pc, #96]	@ (8009f68 <HW_IPCC_Rx_Handler+0x68>)
 8009f08:	f7ff ffe4 	bl	8009ed4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d008      	beq.n	8009f24 <HW_IPCC_Rx_Handler+0x24>
 8009f12:	4b15      	ldr	r3, [pc, #84]	@ (8009f68 <HW_IPCC_Rx_Handler+0x68>)
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	f003 0302 	and.w	r3, r3, #2
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d102      	bne.n	8009f24 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8009f1e:	f000 f925 	bl	800a16c <HW_IPCC_SYS_EvtHandler>
 8009f22:	e01e      	b.n	8009f62 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8009f24:	2101      	movs	r1, #1
 8009f26:	4810      	ldr	r0, [pc, #64]	@ (8009f68 <HW_IPCC_Rx_Handler+0x68>)
 8009f28:	f7ff ffd4 	bl	8009ed4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d008      	beq.n	8009f44 <HW_IPCC_Rx_Handler+0x44>
 8009f32:	4b0d      	ldr	r3, [pc, #52]	@ (8009f68 <HW_IPCC_Rx_Handler+0x68>)
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	f003 0301 	and.w	r3, r3, #1
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d102      	bne.n	8009f44 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8009f3e:	f000 f899 	bl	800a074 <HW_IPCC_BLE_EvtHandler>
 8009f42:	e00e      	b.n	8009f62 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8009f44:	2108      	movs	r1, #8
 8009f46:	4808      	ldr	r0, [pc, #32]	@ (8009f68 <HW_IPCC_Rx_Handler+0x68>)
 8009f48:	f7ff ffc4 	bl	8009ed4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d008      	beq.n	8009f64 <HW_IPCC_Rx_Handler+0x64>
 8009f52:	4b05      	ldr	r3, [pc, #20]	@ (8009f68 <HW_IPCC_Rx_Handler+0x68>)
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	f003 0308 	and.w	r3, r3, #8
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d102      	bne.n	8009f64 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8009f5e:	f000 f97d 	bl	800a25c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8009f62:	bf00      	nop
 8009f64:	bf00      	nop
}
 8009f66:	bd80      	pop	{r7, pc}
 8009f68:	58000c00 	.word	0x58000c00

08009f6c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8009f70:	2102      	movs	r1, #2
 8009f72:	4818      	ldr	r0, [pc, #96]	@ (8009fd4 <HW_IPCC_Tx_Handler+0x68>)
 8009f74:	f7ff ff99 	bl	8009eaa <LL_C1_IPCC_IsActiveFlag_CHx>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d108      	bne.n	8009f90 <HW_IPCC_Tx_Handler+0x24>
 8009f7e:	4b15      	ldr	r3, [pc, #84]	@ (8009fd4 <HW_IPCC_Tx_Handler+0x68>)
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d102      	bne.n	8009f90 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8009f8a:	f000 f8d3 	bl	800a134 <HW_IPCC_SYS_CmdEvtHandler>
 8009f8e:	e01e      	b.n	8009fce <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8009f90:	2108      	movs	r1, #8
 8009f92:	4810      	ldr	r0, [pc, #64]	@ (8009fd4 <HW_IPCC_Tx_Handler+0x68>)
 8009f94:	f7ff ff89 	bl	8009eaa <LL_C1_IPCC_IsActiveFlag_CHx>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d108      	bne.n	8009fb0 <HW_IPCC_Tx_Handler+0x44>
 8009f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8009fd4 <HW_IPCC_Tx_Handler+0x68>)
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d102      	bne.n	8009fb0 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8009faa:	f000 f919 	bl	800a1e0 <HW_IPCC_MM_FreeBufHandler>
 8009fae:	e00e      	b.n	8009fce <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8009fb0:	2120      	movs	r1, #32
 8009fb2:	4808      	ldr	r0, [pc, #32]	@ (8009fd4 <HW_IPCC_Tx_Handler+0x68>)
 8009fb4:	f7ff ff79 	bl	8009eaa <LL_C1_IPCC_IsActiveFlag_CHx>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d108      	bne.n	8009fd0 <HW_IPCC_Tx_Handler+0x64>
 8009fbe:	4b05      	ldr	r3, [pc, #20]	@ (8009fd4 <HW_IPCC_Tx_Handler+0x68>)
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d102      	bne.n	8009fd0 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8009fca:	f000 f85f 	bl	800a08c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8009fce:	bf00      	nop
 8009fd0:	bf00      	nop
}
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	58000c00 	.word	0x58000c00

08009fd8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8009fdc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009fe0:	f7ff fed3 	bl	8009d8a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8009fe4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009fe8:	f7ff fea4 	bl	8009d34 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8009fec:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009ff0:	f7ff fe8c 	bl	8009d0c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8009ff4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8009ff6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8009ff8:	f7ff fe78 	bl	8009cec <LL_PWR_EnableBootC2>

  return;
 8009ffc:	bf00      	nop
}
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800a000:	b580      	push	{r7, lr}
 800a002:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800a004:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a008:	f7ff fea6 	bl	8009d58 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800a00c:	4806      	ldr	r0, [pc, #24]	@ (800a028 <HW_IPCC_Init+0x28>)
 800a00e:	f7ff fee8 	bl	8009de2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800a012:	4805      	ldr	r0, [pc, #20]	@ (800a028 <HW_IPCC_Init+0x28>)
 800a014:	f7ff fed5 	bl	8009dc2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800a018:	202c      	movs	r0, #44	@ 0x2c
 800a01a:	f7f9 f9ee 	bl	80033fa <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800a01e:	202d      	movs	r0, #45	@ 0x2d
 800a020:	f7f9 f9eb 	bl	80033fa <HAL_NVIC_EnableIRQ>

  return;
 800a024:	bf00      	nop
}
 800a026:	bd80      	pop	{r7, pc}
 800a028:	58000c00 	.word	0x58000c00

0800a02c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a032:	f3ef 8310 	mrs	r3, PRIMASK
 800a036:	607b      	str	r3, [r7, #4]
  return(result);
 800a038:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a03a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a03c:	b672      	cpsid	i
}
 800a03e:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800a040:	2101      	movs	r1, #1
 800a042:	4806      	ldr	r0, [pc, #24]	@ (800a05c <HW_IPCC_BLE_Init+0x30>)
 800a044:	f7ff ff02 	bl	8009e4c <LL_C1_IPCC_EnableReceiveChannel>
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	f383 8810 	msr	PRIMASK, r3
}
 800a052:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800a054:	bf00      	nop
}
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	58000c00 	.word	0x58000c00

0800a060 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800a060:	b580      	push	{r7, lr}
 800a062:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800a064:	2101      	movs	r1, #1
 800a066:	4802      	ldr	r0, [pc, #8]	@ (800a070 <HW_IPCC_BLE_SendCmd+0x10>)
 800a068:	f7ff ff10 	bl	8009e8c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800a06c:	bf00      	nop
}
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	58000c00 	.word	0x58000c00

0800a074 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800a074:	b580      	push	{r7, lr}
 800a076:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800a078:	f7fe fdee 	bl	8008c58 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800a07c:	2101      	movs	r1, #1
 800a07e:	4802      	ldr	r0, [pc, #8]	@ (800a088 <HW_IPCC_BLE_EvtHandler+0x14>)
 800a080:	f7ff fef6 	bl	8009e70 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a084:	bf00      	nop
}
 800a086:	bd80      	pop	{r7, pc}
 800a088:	58000c00 	.word	0x58000c00

0800a08c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a092:	f3ef 8310 	mrs	r3, PRIMASK
 800a096:	607b      	str	r3, [r7, #4]
  return(result);
 800a098:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a09a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a09c:	b672      	cpsid	i
}
 800a09e:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800a0a0:	2120      	movs	r1, #32
 800a0a2:	4807      	ldr	r0, [pc, #28]	@ (800a0c0 <HW_IPCC_BLE_AclDataEvtHandler+0x34>)
 800a0a4:	f7ff fec0 	bl	8009e28 <LL_C1_IPCC_DisableTransmitChannel>
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	f383 8810 	msr	PRIMASK, r3
}
 800a0b2:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_BLE_AclDataAckNot();
 800a0b4:	f7fe fe00 	bl	8008cb8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800a0b8:	bf00      	nop
}
 800a0ba:	3710      	adds	r7, #16
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	58000c00 	.word	0x58000c00

0800a0c4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0ca:	f3ef 8310 	mrs	r3, PRIMASK
 800a0ce:	607b      	str	r3, [r7, #4]
  return(result);
 800a0d0:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a0d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0d4:	b672      	cpsid	i
}
 800a0d6:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a0d8:	2102      	movs	r1, #2
 800a0da:	4806      	ldr	r0, [pc, #24]	@ (800a0f4 <HW_IPCC_SYS_Init+0x30>)
 800a0dc:	f7ff feb6 	bl	8009e4c <LL_C1_IPCC_EnableReceiveChannel>
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	f383 8810 	msr	PRIMASK, r3
}
 800a0ea:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800a0ec:	bf00      	nop
}
 800a0ee:	3710      	adds	r7, #16
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	58000c00 	.word	0x58000c00

0800a0f8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a0fe:	2102      	movs	r1, #2
 800a100:	480b      	ldr	r0, [pc, #44]	@ (800a130 <HW_IPCC_SYS_SendCmd+0x38>)
 800a102:	f7ff fec3 	bl	8009e8c <LL_C1_IPCC_SetFlag_CHx>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a106:	f3ef 8310 	mrs	r3, PRIMASK
 800a10a:	607b      	str	r3, [r7, #4]
  return(result);
 800a10c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a10e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a110:	b672      	cpsid	i
}
 800a112:	bf00      	nop
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a114:	2102      	movs	r1, #2
 800a116:	4806      	ldr	r0, [pc, #24]	@ (800a130 <HW_IPCC_SYS_SendCmd+0x38>)
 800a118:	f7ff fe73 	bl	8009e02 <LL_C1_IPCC_EnableTransmitChannel>
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	f383 8810 	msr	PRIMASK, r3
}
 800a126:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800a128:	bf00      	nop
}
 800a12a:	3710      	adds	r7, #16
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	58000c00 	.word	0x58000c00

0800a134 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a13a:	f3ef 8310 	mrs	r3, PRIMASK
 800a13e:	607b      	str	r3, [r7, #4]
  return(result);
 800a140:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a142:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a144:	b672      	cpsid	i
}
 800a146:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a148:	2102      	movs	r1, #2
 800a14a:	4807      	ldr	r0, [pc, #28]	@ (800a168 <HW_IPCC_SYS_CmdEvtHandler+0x34>)
 800a14c:	f7ff fe6c 	bl	8009e28 <LL_C1_IPCC_DisableTransmitChannel>
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	f383 8810 	msr	PRIMASK, r3
}
 800a15a:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_SYS_CmdEvtNot();
 800a15c:	f7fe fe00 	bl	8008d60 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800a160:	bf00      	nop
}
 800a162:	3710      	adds	r7, #16
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	58000c00 	.word	0x58000c00

0800a16c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800a170:	f7fe fe0c 	bl	8008d8c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a174:	2102      	movs	r1, #2
 800a176:	4802      	ldr	r0, [pc, #8]	@ (800a180 <HW_IPCC_SYS_EvtHandler+0x14>)
 800a178:	f7ff fe7a 	bl	8009e70 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a17c:	bf00      	nop
}
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	58000c00 	.word	0x58000c00

0800a184 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b086      	sub	sp, #24
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800a18c:	2108      	movs	r1, #8
 800a18e:	4812      	ldr	r0, [pc, #72]	@ (800a1d8 <HW_IPCC_MM_SendFreeBuf+0x54>)
 800a190:	f7ff fe8b 	bl	8009eaa <LL_C1_IPCC_IsActiveFlag_CHx>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d013      	beq.n	800a1c2 <HW_IPCC_MM_SendFreeBuf+0x3e>
  {
    FreeBufCb = cb;
 800a19a:	4a10      	ldr	r2, [pc, #64]	@ (800a1dc <HW_IPCC_MM_SendFreeBuf+0x58>)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1a0:	f3ef 8310 	mrs	r3, PRIMASK
 800a1a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
    UTILS_ENTER_CRITICAL_SECTION();
 800a1a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1aa:	b672      	cpsid	i
}
 800a1ac:	bf00      	nop
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a1ae:	2108      	movs	r1, #8
 800a1b0:	4809      	ldr	r0, [pc, #36]	@ (800a1d8 <HW_IPCC_MM_SendFreeBuf+0x54>)
 800a1b2:	f7ff fe26 	bl	8009e02 <LL_C1_IPCC_EnableTransmitChannel>
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	f383 8810 	msr	PRIMASK, r3
}
 800a1c0:	e005      	b.n	800a1ce <HW_IPCC_MM_SendFreeBuf+0x4a>
    UTILS_EXIT_CRITICAL_SECTION();
  }
  else
  {
    cb();
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4798      	blx	r3

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a1c6:	2108      	movs	r1, #8
 800a1c8:	4803      	ldr	r0, [pc, #12]	@ (800a1d8 <HW_IPCC_MM_SendFreeBuf+0x54>)
 800a1ca:	f7ff fe5f 	bl	8009e8c <LL_C1_IPCC_SetFlag_CHx>
  }

  return;
 800a1ce:	bf00      	nop
}
 800a1d0:	3718      	adds	r7, #24
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	58000c00 	.word	0x58000c00
 800a1dc:	20000680 	.word	0x20000680

0800a1e0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1e6:	f3ef 8310 	mrs	r3, PRIMASK
 800a1ea:	607b      	str	r3, [r7, #4]
  return(result);
 800a1ec:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a1ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1f0:	b672      	cpsid	i
}
 800a1f2:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a1f4:	2108      	movs	r1, #8
 800a1f6:	480a      	ldr	r0, [pc, #40]	@ (800a220 <HW_IPCC_MM_FreeBufHandler+0x40>)
 800a1f8:	f7ff fe16 	bl	8009e28 <LL_C1_IPCC_DisableTransmitChannel>
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	f383 8810 	msr	PRIMASK, r3
}
 800a206:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  FreeBufCb();
 800a208:	4b06      	ldr	r3, [pc, #24]	@ (800a224 <HW_IPCC_MM_FreeBufHandler+0x44>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a20e:	2108      	movs	r1, #8
 800a210:	4803      	ldr	r0, [pc, #12]	@ (800a220 <HW_IPCC_MM_FreeBufHandler+0x40>)
 800a212:	f7ff fe3b 	bl	8009e8c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800a216:	bf00      	nop
}
 800a218:	3710      	adds	r7, #16
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	58000c00 	.word	0x58000c00
 800a224:	20000680 	.word	0x20000680

0800a228 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a22e:	f3ef 8310 	mrs	r3, PRIMASK
 800a232:	607b      	str	r3, [r7, #4]
  return(result);
 800a234:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a236:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a238:	b672      	cpsid	i
}
 800a23a:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a23c:	2108      	movs	r1, #8
 800a23e:	4806      	ldr	r0, [pc, #24]	@ (800a258 <HW_IPCC_TRACES_Init+0x30>)
 800a240:	f7ff fe04 	bl	8009e4c <LL_C1_IPCC_EnableReceiveChannel>
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	f383 8810 	msr	PRIMASK, r3
}
 800a24e:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800a250:	bf00      	nop
}
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	58000c00 	.word	0x58000c00

0800a25c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800a260:	f7fe fe3c 	bl	8008edc <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a264:	2108      	movs	r1, #8
 800a266:	4802      	ldr	r0, [pc, #8]	@ (800a270 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800a268:	f7ff fe02 	bl	8009e70 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a26c:	bf00      	nop
}
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	58000c00 	.word	0x58000c00

0800a274 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a274:	b480      	push	{r7}
 800a276:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a278:	4b05      	ldr	r3, [pc, #20]	@ (800a290 <UTIL_LPM_Init+0x1c>)
 800a27a:	2200      	movs	r2, #0
 800a27c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a27e:	4b05      	ldr	r3, [pc, #20]	@ (800a294 <UTIL_LPM_Init+0x20>)
 800a280:	2200      	movs	r2, #0
 800a282:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a284:	bf00      	nop
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	20000684 	.word	0x20000684
 800a294:	20000688 	.word	0x20000688

0800a298 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a298:	b480      	push	{r7}
 800a29a:	b087      	sub	sp, #28
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2a4:	f3ef 8310 	mrs	r3, PRIMASK
 800a2a8:	613b      	str	r3, [r7, #16]
  return(result);
 800a2aa:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a2ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2ae:	b672      	cpsid	i
}
 800a2b0:	bf00      	nop
  
  switch(state)
 800a2b2:	78fb      	ldrb	r3, [r7, #3]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d008      	beq.n	800a2ca <UTIL_LPM_SetOffMode+0x32>
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d10e      	bne.n	800a2da <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a2bc:	4b0d      	ldr	r3, [pc, #52]	@ (800a2f4 <UTIL_LPM_SetOffMode+0x5c>)
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	4a0b      	ldr	r2, [pc, #44]	@ (800a2f4 <UTIL_LPM_SetOffMode+0x5c>)
 800a2c6:	6013      	str	r3, [r2, #0]
      break;
 800a2c8:	e008      	b.n	800a2dc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	43da      	mvns	r2, r3
 800a2ce:	4b09      	ldr	r3, [pc, #36]	@ (800a2f4 <UTIL_LPM_SetOffMode+0x5c>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4013      	ands	r3, r2
 800a2d4:	4a07      	ldr	r2, [pc, #28]	@ (800a2f4 <UTIL_LPM_SetOffMode+0x5c>)
 800a2d6:	6013      	str	r3, [r2, #0]
      break;
 800a2d8:	e000      	b.n	800a2dc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800a2da:	bf00      	nop
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f383 8810 	msr	PRIMASK, r3
}
 800a2e6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a2e8:	bf00      	nop
 800a2ea:	371c      	adds	r7, #28
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr
 800a2f4:	20000688 	.word	0x20000688

0800a2f8 <UTIL_SEQ_Run>:
  * That is the reason why many variables that are used only in that function are declared static.
  * Note: These variables could have been declared static in the function.
  *
  */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b094      	sub	sp, #80	@ 0x50
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
    /*
     * When this function is nested, the mask to be applied cannot be larger than the first call
     * The mask is always getting smaller and smaller
     * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
     */
    super_mask_backup = SuperMask;
 800a300:	4b89      	ldr	r3, [pc, #548]	@ (800a528 <UTIL_SEQ_Run+0x230>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	62fb      	str	r3, [r7, #44]	@ 0x2c
    SuperMask &= Mask_bm;
 800a306:	4b88      	ldr	r3, [pc, #544]	@ (800a528 <UTIL_SEQ_Run+0x230>)
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4013      	ands	r3, r2
 800a30e:	4a86      	ldr	r2, [pc, #536]	@ (800a528 <UTIL_SEQ_Run+0x230>)
 800a310:	6013      	str	r3, [r2, #0]
     * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
     * SuperMask that comes from UTIL_SEQ_Run
     * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
     * waiting task
     */
    local_taskset = TaskSet;
 800a312:	4b86      	ldr	r3, [pc, #536]	@ (800a52c <UTIL_SEQ_Run+0x234>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	647b      	str	r3, [r7, #68]	@ 0x44
    local_evtset = EvtSet;
 800a318:	4b85      	ldr	r3, [pc, #532]	@ (800a530 <UTIL_SEQ_Run+0x238>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	643b      	str	r3, [r7, #64]	@ 0x40
    local_taskmask = TaskMask;
 800a31e:	4b85      	ldr	r3, [pc, #532]	@ (800a534 <UTIL_SEQ_Run+0x23c>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	63fb      	str	r3, [r7, #60]	@ 0x3c
    local_evtwaited =  EvtWaited;
 800a324:	4b84      	ldr	r3, [pc, #528]	@ (800a538 <UTIL_SEQ_Run+0x240>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	63bb      	str	r3, [r7, #56]	@ 0x38
    while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a32a:	e112      	b.n	800a552 <UTIL_SEQ_Run+0x25a>
    {
        counter = 0U;
 800a32c:	2300      	movs	r3, #0
 800a32e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        /*
         * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
         * on the priority parameter given from UTIL_SEQ_SetTask()
         * The while loop is looking for a flag set from the highest priority maskr to the lower
         */
        while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a330:	e002      	b.n	800a338 <UTIL_SEQ_Run+0x40>
        {
            counter++;
 800a332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a334:	3301      	adds	r3, #1
 800a336:	64fb      	str	r3, [r7, #76]	@ 0x4c
        while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a338:	4a80      	ldr	r2, [pc, #512]	@ (800a53c <UTIL_SEQ_Run+0x244>)
 800a33a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a33c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a342:	401a      	ands	r2, r3
 800a344:	4b78      	ldr	r3, [pc, #480]	@ (800a528 <UTIL_SEQ_Run+0x230>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4013      	ands	r3, r2
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d0f1      	beq.n	800a332 <UTIL_SEQ_Run+0x3a>
        }

        current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800a34e:	4a7b      	ldr	r2, [pc, #492]	@ (800a53c <UTIL_SEQ_Run+0x244>)
 800a350:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a352:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a358:	401a      	ands	r2, r3
 800a35a:	4b73      	ldr	r3, [pc, #460]	@ (800a528 <UTIL_SEQ_Run+0x230>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4013      	ands	r3, r2
 800a360:	64bb      	str	r3, [r7, #72]	@ 0x48
         * the round_robin mask
         *
         * In the check below, the round_robin mask is reinitialize in case all pending
         * tasks haven been executed at least once
         */
        if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a362:	4a76      	ldr	r2, [pc, #472]	@ (800a53c <UTIL_SEQ_Run+0x244>)
 800a364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a366:	00db      	lsls	r3, r3, #3
 800a368:	4413      	add	r3, r2
 800a36a:	685a      	ldr	r2, [r3, #4]
 800a36c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a36e:	4013      	ands	r3, r2
 800a370:	2b00      	cmp	r3, #0
 800a372:	d106      	bne.n	800a382 <UTIL_SEQ_Run+0x8a>
        {
            TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a374:	4a71      	ldr	r2, [pc, #452]	@ (800a53c <UTIL_SEQ_Run+0x244>)
 800a376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a378:	00db      	lsls	r3, r3, #3
 800a37a:	4413      	add	r3, r2
 800a37c:	f04f 32ff 	mov.w	r2, #4294967295
 800a380:	605a      	str	r2, [r3, #4]

        /*
         * Compute the Stack Startving List
         * This is the list of the task that have been set at least once minus the one that have been cleared ar least once
         */
        task_starving_list = TaskSet;
 800a382:	4b6a      	ldr	r3, [pc, #424]	@ (800a52c <UTIL_SEQ_Run+0x234>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	62bb      	str	r3, [r7, #40]	@ 0x28
         * Such situation shall not happen when evaluating task_starving_list
         * At any time, there should not be any bit reset in TaskPrio[counter].round_robin and reset in TaskClearList
         * It is correct with regard to the Sequencer Architecture to set in TaskClearList all tasks that are said to be executed from TaskPrio[counter].round_robin
         * This synchronizes both information before calculating the CurrentTaskIdx
         */
        TaskClearList |= (~TaskPrio[counter].round_robin);
 800a388:	4a6c      	ldr	r2, [pc, #432]	@ (800a53c <UTIL_SEQ_Run+0x244>)
 800a38a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a38c:	00db      	lsls	r3, r3, #3
 800a38e:	4413      	add	r3, r2
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	43da      	mvns	r2, r3
 800a394:	4b6a      	ldr	r3, [pc, #424]	@ (800a540 <UTIL_SEQ_Run+0x248>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4313      	orrs	r3, r2
 800a39a:	4a69      	ldr	r2, [pc, #420]	@ (800a540 <UTIL_SEQ_Run+0x248>)
 800a39c:	6013      	str	r3, [r2, #0]

        task_starving_list &= (~TaskClearList);
 800a39e:	4b68      	ldr	r3, [pc, #416]	@ (800a540 <UTIL_SEQ_Run+0x248>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	43db      	mvns	r3, r3
 800a3a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a3a6:	4013      	ands	r3, r2
 800a3a8:	62bb      	str	r3, [r7, #40]	@ 0x28

        /*
         * Consider first the starving list and update current_task_set accordingly
         */
        if ((task_starving_list & current_task_set) != 0U)
 800a3aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a3ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3ae:	4013      	ands	r3, r2
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d003      	beq.n	800a3bc <UTIL_SEQ_Run+0xc4>
        {
          current_task_set = (task_starving_list & current_task_set);
 800a3b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b8:	4013      	ands	r3, r2
 800a3ba:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /*
         * Reinitialize the Starving List if required
         */
        if(task_starving_list == 0)
 800a3bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d102      	bne.n	800a3c8 <UTIL_SEQ_Run+0xd0>
        {
          TaskClearList = 0;
 800a3c2:	4b5f      	ldr	r3, [pc, #380]	@ (800a540 <UTIL_SEQ_Run+0x248>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	601a      	str	r2, [r3, #0]
        /*
         * Read the flag index of the task to be executed
         * Once the index is read, the associated task will be executed even though a higher priority stack is requested
         * before task execution.
         */
        CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a3c8:	4a5c      	ldr	r2, [pc, #368]	@ (800a53c <UTIL_SEQ_Run+0x244>)
 800a3ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3cc:	00db      	lsls	r3, r3, #3
 800a3ce:	4413      	add	r3, r2
 800a3d0:	685a      	ldr	r2, [r3, #4]
 800a3d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f000 fa43 	bl	800a862 <SEQ_BitPosition>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	461a      	mov	r2, r3
 800a3e0:	4b58      	ldr	r3, [pc, #352]	@ (800a544 <UTIL_SEQ_Run+0x24c>)
 800a3e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3e4:	f3ef 8310 	mrs	r3, PRIMASK
 800a3e8:	61fb      	str	r3, [r7, #28]
  return(result);
 800a3ea:	69fb      	ldr	r3, [r7, #28]

        UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a3ec:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800a3ee:	b672      	cpsid	i
}
 800a3f0:	bf00      	nop
        /* remove from the list or pending task the one that has been selected to be executed */
        TaskSet &= ~(1U << CurrentTaskIdx);
 800a3f2:	4b54      	ldr	r3, [pc, #336]	@ (800a544 <UTIL_SEQ_Run+0x24c>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a3fc:	43da      	mvns	r2, r3
 800a3fe:	4b4b      	ldr	r3, [pc, #300]	@ (800a52c <UTIL_SEQ_Run+0x234>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4013      	ands	r3, r2
 800a404:	4a49      	ldr	r2, [pc, #292]	@ (800a52c <UTIL_SEQ_Run+0x234>)
 800a406:	6013      	str	r3, [r2, #0]

        /*
         * remove from all priority mask the task that has been selected to be executed
         */
        for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a408:	2301      	movs	r3, #1
 800a40a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a40c:	e013      	b.n	800a436 <UTIL_SEQ_Run+0x13e>
        {
          TaskPrio[counter - 1u].priority    &= ~(1U << CurrentTaskIdx);
 800a40e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a410:	3b01      	subs	r3, #1
 800a412:	4a4a      	ldr	r2, [pc, #296]	@ (800a53c <UTIL_SEQ_Run+0x244>)
 800a414:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a418:	4b4a      	ldr	r3, [pc, #296]	@ (800a544 <UTIL_SEQ_Run+0x24c>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2201      	movs	r2, #1
 800a41e:	fa02 f303 	lsl.w	r3, r2, r3
 800a422:	43da      	mvns	r2, r3
 800a424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a426:	3b01      	subs	r3, #1
 800a428:	400a      	ands	r2, r1
 800a42a:	4944      	ldr	r1, [pc, #272]	@ (800a53c <UTIL_SEQ_Run+0x244>)
 800a42c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a430:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a432:	3b01      	subs	r3, #1
 800a434:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1e8      	bne.n	800a40e <UTIL_SEQ_Run+0x116>
 800a43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a43e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	f383 8810 	msr	PRIMASK, r3
}
 800a446:	bf00      	nop
        }
        UTIL_SEQ_EXIT_CRITICAL_SECTION( );

        UTIL_SEQ_PreTask(CurrentTaskIdx);
 800a448:	4b3e      	ldr	r3, [pc, #248]	@ (800a544 <UTIL_SEQ_Run+0x24c>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4618      	mov	r0, r3
 800a44e:	f000 f9e9 	bl	800a824 <UTIL_SEQ_PreTask>

        /*
         * Check that function exists before calling it
         */
        if ((CurrentTaskIdx < UTIL_SEQ_CONF_TASK_NBR) && (TaskCb[CurrentTaskIdx] != NULL))
 800a452:	4b3c      	ldr	r3, [pc, #240]	@ (800a544 <UTIL_SEQ_Run+0x24c>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2b1f      	cmp	r3, #31
 800a458:	d878      	bhi.n	800a54c <UTIL_SEQ_Run+0x254>
 800a45a:	4b3a      	ldr	r3, [pc, #232]	@ (800a544 <UTIL_SEQ_Run+0x24c>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a3a      	ldr	r2, [pc, #232]	@ (800a548 <UTIL_SEQ_Run+0x250>)
 800a460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d071      	beq.n	800a54c <UTIL_SEQ_Run+0x254>
        {
          /*
           * save the round-robin value to take into account the operation done in UTIL_SEQ_WaitEvt
           */
          for (uint32_t index = 0; index < UTIL_SEQ_CONF_PRIO_NBR; index++)
 800a468:	2300      	movs	r3, #0
 800a46a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a46c:	e01e      	b.n	800a4ac <UTIL_SEQ_Run+0x1b4>
          {
            TaskPrio[index].round_robin &= ~(1U << CurrentTaskIdx);
 800a46e:	4a33      	ldr	r2, [pc, #204]	@ (800a53c <UTIL_SEQ_Run+0x244>)
 800a470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a472:	00db      	lsls	r3, r3, #3
 800a474:	4413      	add	r3, r2
 800a476:	685a      	ldr	r2, [r3, #4]
 800a478:	4b32      	ldr	r3, [pc, #200]	@ (800a544 <UTIL_SEQ_Run+0x24c>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2101      	movs	r1, #1
 800a47e:	fa01 f303 	lsl.w	r3, r1, r3
 800a482:	43db      	mvns	r3, r3
 800a484:	401a      	ands	r2, r3
 800a486:	492d      	ldr	r1, [pc, #180]	@ (800a53c <UTIL_SEQ_Run+0x244>)
 800a488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a48a:	00db      	lsls	r3, r3, #3
 800a48c:	440b      	add	r3, r1
 800a48e:	605a      	str	r2, [r3, #4]
            round_robin[index] = TaskPrio[index].round_robin;
 800a490:	4a2a      	ldr	r2, [pc, #168]	@ (800a53c <UTIL_SEQ_Run+0x244>)
 800a492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a494:	00db      	lsls	r3, r3, #3
 800a496:	4413      	add	r3, r2
 800a498:	685a      	ldr	r2, [r3, #4]
 800a49a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	3350      	adds	r3, #80	@ 0x50
 800a4a0:	443b      	add	r3, r7
 800a4a2:	f843 2c44 	str.w	r2, [r3, #-68]
          for (uint32_t index = 0; index < UTIL_SEQ_CONF_PRIO_NBR; index++)
 800a4a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d0dd      	beq.n	800a46e <UTIL_SEQ_Run+0x176>
          }

          /* Execute the task */
          TaskCb[CurrentTaskIdx]( );
 800a4b2:	4b24      	ldr	r3, [pc, #144]	@ (800a544 <UTIL_SEQ_Run+0x24c>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a24      	ldr	r2, [pc, #144]	@ (800a548 <UTIL_SEQ_Run+0x250>)
 800a4b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4bc:	4798      	blx	r3

          /*
           * restore the round-robin context
           */
          for (uint32_t index = 0; index < UTIL_SEQ_CONF_PRIO_NBR; index++)
 800a4be:	2300      	movs	r3, #0
 800a4c0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a4c2:	e013      	b.n	800a4ec <UTIL_SEQ_Run+0x1f4>
          {
            TaskPrio[index].round_robin &= round_robin[index];
 800a4c4:	4a1d      	ldr	r2, [pc, #116]	@ (800a53c <UTIL_SEQ_Run+0x244>)
 800a4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c8:	00db      	lsls	r3, r3, #3
 800a4ca:	4413      	add	r3, r2
 800a4cc:	685a      	ldr	r2, [r3, #4]
 800a4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	3350      	adds	r3, #80	@ 0x50
 800a4d4:	443b      	add	r3, r7
 800a4d6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a4da:	401a      	ands	r2, r3
 800a4dc:	4917      	ldr	r1, [pc, #92]	@ (800a53c <UTIL_SEQ_Run+0x244>)
 800a4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e0:	00db      	lsls	r3, r3, #3
 800a4e2:	440b      	add	r3, r1
 800a4e4:	605a      	str	r2, [r3, #4]
          for (uint32_t index = 0; index < UTIL_SEQ_CONF_PRIO_NBR; index++)
 800a4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800a4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d0e8      	beq.n	800a4c4 <UTIL_SEQ_Run+0x1cc>
          }

          UTIL_SEQ_PostTask(CurrentTaskIdx);
 800a4f2:	4b14      	ldr	r3, [pc, #80]	@ (800a544 <UTIL_SEQ_Run+0x24c>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f000 f99e 	bl	800a838 <UTIL_SEQ_PostTask>

          local_taskset = TaskSet;
 800a4fc:	4b0b      	ldr	r3, [pc, #44]	@ (800a52c <UTIL_SEQ_Run+0x234>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	647b      	str	r3, [r7, #68]	@ 0x44
          local_evtset = EvtSet;
 800a502:	4b0b      	ldr	r3, [pc, #44]	@ (800a530 <UTIL_SEQ_Run+0x238>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	643b      	str	r3, [r7, #64]	@ 0x40
          local_taskmask = TaskMask;
 800a508:	4b0a      	ldr	r3, [pc, #40]	@ (800a534 <UTIL_SEQ_Run+0x23c>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          local_evtwaited = EvtWaited;
 800a50e:	4b0a      	ldr	r3, [pc, #40]	@ (800a538 <UTIL_SEQ_Run+0x240>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	63bb      	str	r3, [r7, #56]	@ 0x38

          /*
           * Update the two list for next round
           */
          TaskClearList |= (1U << CurrentTaskIdx);
 800a514:	4b0b      	ldr	r3, [pc, #44]	@ (800a544 <UTIL_SEQ_Run+0x24c>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2201      	movs	r2, #1
 800a51a:	409a      	lsls	r2, r3
 800a51c:	4b08      	ldr	r3, [pc, #32]	@ (800a540 <UTIL_SEQ_Run+0x248>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4313      	orrs	r3, r2
 800a522:	4a07      	ldr	r2, [pc, #28]	@ (800a540 <UTIL_SEQ_Run+0x248>)
 800a524:	6013      	str	r3, [r2, #0]
 800a526:	e014      	b.n	800a552 <UTIL_SEQ_Run+0x25a>
 800a528:	20000034 	.word	0x20000034
 800a52c:	2000068c 	.word	0x2000068c
 800a530:	20000690 	.word	0x20000690
 800a534:	20000030 	.word	0x20000030
 800a538:	20000694 	.word	0x20000694
 800a53c:	2000071c 	.word	0x2000071c
 800a540:	20000724 	.word	0x20000724
 800a544:	20000698 	.word	0x20000698
 800a548:	2000069c 	.word	0x2000069c
        else
        {
          /*
           * must never occurs, it means there is a warning in the system
           */
          UTIL_SEQ_CatchWarning(UTIL_SEQ_WARNING_INVALIDTASKID);
 800a54c:	2000      	movs	r0, #0
 800a54e:	f000 f97d 	bl	800a84c <UTIL_SEQ_CatchWarning>
    while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a552:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a556:	401a      	ands	r2, r3
 800a558:	4b22      	ldr	r3, [pc, #136]	@ (800a5e4 <UTIL_SEQ_Run+0x2ec>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4013      	ands	r3, r2
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d005      	beq.n	800a56e <UTIL_SEQ_Run+0x276>
 800a562:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a566:	4013      	ands	r3, r2
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f43f aedf 	beq.w	800a32c <UTIL_SEQ_Run+0x34>
        }
    }

    /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
    CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a56e:	4b1e      	ldr	r3, [pc, #120]	@ (800a5e8 <UTIL_SEQ_Run+0x2f0>)
 800a570:	f04f 32ff 	mov.w	r2, #4294967295
 800a574:	601a      	str	r2, [r3, #0]
    /* if a waited event is present, ignore the IDLE sequence */
    if ((local_evtset & EvtWaited)== 0U)
 800a576:	4b1d      	ldr	r3, [pc, #116]	@ (800a5ec <UTIL_SEQ_Run+0x2f4>)
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a57c:	4013      	ands	r3, r2
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d129      	bne.n	800a5d6 <UTIL_SEQ_Run+0x2de>
    {
        UTIL_SEQ_PreIdle( );
 800a582:	f000 f941 	bl	800a808 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a586:	f3ef 8310 	mrs	r3, PRIMASK
 800a58a:	617b      	str	r3, [r7, #20]
  return(result);
 800a58c:	697b      	ldr	r3, [r7, #20]

        UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a58e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800a590:	b672      	cpsid	i
}
 800a592:	bf00      	nop
        local_taskset = TaskSet;
 800a594:	4b16      	ldr	r3, [pc, #88]	@ (800a5f0 <UTIL_SEQ_Run+0x2f8>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	647b      	str	r3, [r7, #68]	@ 0x44
        local_evtset = EvtSet;
 800a59a:	4b16      	ldr	r3, [pc, #88]	@ (800a5f4 <UTIL_SEQ_Run+0x2fc>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	643b      	str	r3, [r7, #64]	@ 0x40
        local_taskmask = TaskMask;
 800a5a0:	4b15      	ldr	r3, [pc, #84]	@ (800a5f8 <UTIL_SEQ_Run+0x300>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800a5a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a5a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5aa:	401a      	ands	r2, r3
 800a5ac:	4b0d      	ldr	r3, [pc, #52]	@ (800a5e4 <UTIL_SEQ_Run+0x2ec>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4013      	ands	r3, r2
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d107      	bne.n	800a5c6 <UTIL_SEQ_Run+0x2ce>
        {
            if ((local_evtset & EvtWaited)== 0U)
 800a5b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a5ec <UTIL_SEQ_Run+0x2f4>)
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5bc:	4013      	ands	r3, r2
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d101      	bne.n	800a5c6 <UTIL_SEQ_Run+0x2ce>
            {
                UTIL_SEQ_Idle( );
 800a5c2:	f7f5 ffec 	bl	800059e <UTIL_SEQ_Idle>
 800a5c6:	6a3b      	ldr	r3, [r7, #32]
 800a5c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	f383 8810 	msr	PRIMASK, r3
}
 800a5d0:	bf00      	nop
            }
        }
        UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

        UTIL_SEQ_PostIdle( );
 800a5d2:	f000 f920 	bl	800a816 <UTIL_SEQ_PostIdle>
    }

    /* restore the mask from UTIL_SEQ_Run() */
    SuperMask = super_mask_backup;
 800a5d6:	4a03      	ldr	r2, [pc, #12]	@ (800a5e4 <UTIL_SEQ_Run+0x2ec>)
 800a5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5da:	6013      	str	r3, [r2, #0]

    return;
 800a5dc:	bf00      	nop
}
 800a5de:	3750      	adds	r7, #80	@ 0x50
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	20000034 	.word	0x20000034
 800a5e8:	20000698 	.word	0x20000698
 800a5ec:	20000694 	.word	0x20000694
 800a5f0:	2000068c 	.word	0x2000068c
 800a5f4:	20000690 	.word	0x20000690
 800a5f8:	20000030 	.word	0x20000030

0800a5fc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b088      	sub	sp, #32
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a608:	f3ef 8310 	mrs	r3, PRIMASK
 800a60c:	617b      	str	r3, [r7, #20]
  return(result);
 800a60e:	697b      	ldr	r3, [r7, #20]
    (void)Flags;
    UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a610:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a612:	b672      	cpsid	i
}
 800a614:	bf00      	nop

    TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f000 f923 	bl	800a862 <SEQ_BitPosition>
 800a61c:	4603      	mov	r3, r0
 800a61e:	4619      	mov	r1, r3
 800a620:	4a06      	ldr	r2, [pc, #24]	@ (800a63c <UTIL_SEQ_RegTask+0x40>)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	f383 8810 	msr	PRIMASK, r3
}
 800a632:	bf00      	nop

    UTIL_SEQ_EXIT_CRITICAL_SECTION();

    return;
 800a634:	bf00      	nop
}
 800a636:	3720      	adds	r7, #32
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	2000069c 	.word	0x2000069c

0800a640 <UTIL_SEQ_SetTask>:
    UTIL_SEQ_EXIT_CRITICAL_SECTION();
    return _status;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm, uint32_t Task_Prio )
{
 800a640:	b480      	push	{r7}
 800a642:	b087      	sub	sp, #28
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a64a:	f3ef 8310 	mrs	r3, PRIMASK
 800a64e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a650:	68fb      	ldr	r3, [r7, #12]
    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a652:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a654:	b672      	cpsid	i
}
 800a656:	bf00      	nop

    TaskSet |= TaskId_bm;
 800a658:	4b0d      	ldr	r3, [pc, #52]	@ (800a690 <UTIL_SEQ_SetTask+0x50>)
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	4313      	orrs	r3, r2
 800a660:	4a0b      	ldr	r2, [pc, #44]	@ (800a690 <UTIL_SEQ_SetTask+0x50>)
 800a662:	6013      	str	r3, [r2, #0]
    TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a664:	4a0b      	ldr	r2, [pc, #44]	@ (800a694 <UTIL_SEQ_SetTask+0x54>)
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	431a      	orrs	r2, r3
 800a670:	4908      	ldr	r1, [pc, #32]	@ (800a694 <UTIL_SEQ_SetTask+0x54>)
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	f383 8810 	msr	PRIMASK, r3
}
 800a682:	bf00      	nop

    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    return;
 800a684:	bf00      	nop
}
 800a686:	371c      	adds	r7, #28
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr
 800a690:	2000068c 	.word	0x2000068c
 800a694:	2000071c 	.word	0x2000071c

0800a698 <UTIL_SEQ_PauseTask>:
    UTIL_SEQ_EXIT_CRITICAL_SECTION();
    return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a698:	b480      	push	{r7}
 800a69a:	b087      	sub	sp, #28
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6a0:	f3ef 8310 	mrs	r3, PRIMASK
 800a6a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a6a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6aa:	b672      	cpsid	i
}
 800a6ac:	bf00      	nop

    TaskMask &= (~TaskId_bm);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	43da      	mvns	r2, r3
 800a6b2:	4b08      	ldr	r3, [pc, #32]	@ (800a6d4 <UTIL_SEQ_PauseTask+0x3c>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4013      	ands	r3, r2
 800a6b8:	4a06      	ldr	r2, [pc, #24]	@ (800a6d4 <UTIL_SEQ_PauseTask+0x3c>)
 800a6ba:	6013      	str	r3, [r2, #0]
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	f383 8810 	msr	PRIMASK, r3
}
 800a6c6:	bf00      	nop

    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    return;
 800a6c8:	bf00      	nop
}
 800a6ca:	371c      	adds	r7, #28
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr
 800a6d4:	20000030 	.word	0x20000030

0800a6d8 <UTIL_SEQ_ResumeTask>:
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b087      	sub	sp, #28
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6e0:	f3ef 8310 	mrs	r3, PRIMASK
 800a6e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a6e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6ea:	b672      	cpsid	i
}
 800a6ec:	bf00      	nop

    TaskMask |= TaskId_bm;
 800a6ee:	4b09      	ldr	r3, [pc, #36]	@ (800a714 <UTIL_SEQ_ResumeTask+0x3c>)
 800a6f0:	681a      	ldr	r2, [r3, #0]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	4a07      	ldr	r2, [pc, #28]	@ (800a714 <UTIL_SEQ_ResumeTask+0x3c>)
 800a6f8:	6013      	str	r3, [r2, #0]
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	f383 8810 	msr	PRIMASK, r3
}
 800a704:	bf00      	nop

    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    return;
 800a706:	bf00      	nop
}
 800a708:	371c      	adds	r7, #28
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	20000030 	.word	0x20000030

0800a718 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a718:	b480      	push	{r7}
 800a71a:	b087      	sub	sp, #28
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a720:	f3ef 8310 	mrs	r3, PRIMASK
 800a724:	60fb      	str	r3, [r7, #12]
  return(result);
 800a726:	68fb      	ldr	r3, [r7, #12]
    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a728:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a72a:	b672      	cpsid	i
}
 800a72c:	bf00      	nop

    EvtSet |= EvtId_bm;
 800a72e:	4b09      	ldr	r3, [pc, #36]	@ (800a754 <UTIL_SEQ_SetEvt+0x3c>)
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	4313      	orrs	r3, r2
 800a736:	4a07      	ldr	r2, [pc, #28]	@ (800a754 <UTIL_SEQ_SetEvt+0x3c>)
 800a738:	6013      	str	r3, [r2, #0]
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	f383 8810 	msr	PRIMASK, r3
}
 800a744:	bf00      	nop

    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    return;
 800a746:	bf00      	nop
}
 800a748:	371c      	adds	r7, #28
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop
 800a754:	20000690 	.word	0x20000690

0800a758 <UTIL_SEQ_WaitEvt>:

    return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b088      	sub	sp, #32
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
    UTIL_SEQ_bm_t wait_task_idx;
    /*
     * store in local the current_task_id_bm as the global variable CurrentTaskIdx
     * may be overwritten in case there are nested call of UTIL_SEQ_Run()
     */
    current_task_idx = CurrentTaskIdx;
 800a760:	4b1f      	ldr	r3, [pc, #124]	@ (800a7e0 <UTIL_SEQ_WaitEvt+0x88>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	61bb      	str	r3, [r7, #24]
    if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a766:	4b1e      	ldr	r3, [pc, #120]	@ (800a7e0 <UTIL_SEQ_WaitEvt+0x88>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76e:	d102      	bne.n	800a776 <UTIL_SEQ_WaitEvt+0x1e>
    {
        wait_task_idx = 0u;
 800a770:	2300      	movs	r3, #0
 800a772:	61fb      	str	r3, [r7, #28]
 800a774:	e005      	b.n	800a782 <UTIL_SEQ_WaitEvt+0x2a>
    }
    else
    {
        wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800a776:	4b1a      	ldr	r3, [pc, #104]	@ (800a7e0 <UTIL_SEQ_WaitEvt+0x88>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2201      	movs	r2, #1
 800a77c:	fa02 f303 	lsl.w	r3, r2, r3
 800a780:	61fb      	str	r3, [r7, #28]
    }

    /* backup the event id that was currently waited */
    event_waited_id_backup = EvtWaited;
 800a782:	4b18      	ldr	r3, [pc, #96]	@ (800a7e4 <UTIL_SEQ_WaitEvt+0x8c>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	617b      	str	r3, [r7, #20]
    EvtWaited = EvtId_bm;
 800a788:	4a16      	ldr	r2, [pc, #88]	@ (800a7e4 <UTIL_SEQ_WaitEvt+0x8c>)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6013      	str	r3, [r2, #0]
     * The system is waiting only for the last waited event.
     * When it will go out, it will wait again from the previous one.
     * It case it occurs while waiting for the second one, the while loop will exit immediately
     */

    while ((EvtSet & EvtId_bm) == 0U)
 800a78e:	e003      	b.n	800a798 <UTIL_SEQ_WaitEvt+0x40>
    {
        UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800a790:	6879      	ldr	r1, [r7, #4]
 800a792:	69f8      	ldr	r0, [r7, #28]
 800a794:	f000 f82a 	bl	800a7ec <UTIL_SEQ_EvtIdle>
    while ((EvtSet & EvtId_bm) == 0U)
 800a798:	4b13      	ldr	r3, [pc, #76]	@ (800a7e8 <UTIL_SEQ_WaitEvt+0x90>)
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4013      	ands	r3, r2
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d0f5      	beq.n	800a790 <UTIL_SEQ_WaitEvt+0x38>
    /*
     * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run()
     * from UTIL_SEQ_EvtIdle(). This is required so that a second call of UTIL_SEQ_WaitEvt()
     * in the same process pass the correct current_task_id_bm in the call of UTIL_SEQ_EvtIdle()
     */
    CurrentTaskIdx = current_task_idx;
 800a7a4:	4a0e      	ldr	r2, [pc, #56]	@ (800a7e0 <UTIL_SEQ_WaitEvt+0x88>)
 800a7a6:	69bb      	ldr	r3, [r7, #24]
 800a7a8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7aa:	f3ef 8310 	mrs	r3, PRIMASK
 800a7ae:	60bb      	str	r3, [r7, #8]
  return(result);
 800a7b0:	68bb      	ldr	r3, [r7, #8]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a7b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7b4:	b672      	cpsid	i
}
 800a7b6:	bf00      	nop

    EvtSet &= (~EvtId_bm);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	43da      	mvns	r2, r3
 800a7bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a7e8 <UTIL_SEQ_WaitEvt+0x90>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4013      	ands	r3, r2
 800a7c2:	4a09      	ldr	r2, [pc, #36]	@ (800a7e8 <UTIL_SEQ_WaitEvt+0x90>)
 800a7c4:	6013      	str	r3, [r2, #0]
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f383 8810 	msr	PRIMASK, r3
}
 800a7d0:	bf00      	nop

    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    EvtWaited = event_waited_id_backup;
 800a7d2:	4a04      	ldr	r2, [pc, #16]	@ (800a7e4 <UTIL_SEQ_WaitEvt+0x8c>)
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	6013      	str	r3, [r2, #0]
    return;
 800a7d8:	bf00      	nop
}
 800a7da:	3720      	adds	r7, #32
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	20000698 	.word	0x20000698
 800a7e4:	20000694 	.word	0x20000694
 800a7e8:	20000690 	.word	0x20000690

0800a7ec <UTIL_SEQ_EvtIdle>:
    UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
    return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
    (void)EvtWaited_bm;
    UTIL_SEQ_Run(~TaskId_bm);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	43db      	mvns	r3, r3
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7ff fd7c 	bl	800a2f8 <UTIL_SEQ_Run>
    return;
 800a800:	bf00      	nop
}
 800a802:	3708      	adds	r7, #8
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <UTIL_SEQ_PreIdle>:
{
    return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a808:	b480      	push	{r7}
 800a80a:	af00      	add	r7, sp, #0
    /*
     * Unless specified by the application, there is nothing to be done
     */
    return;
 800a80c:	bf00      	nop
}
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr

0800a816 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800a816:	b480      	push	{r7}
 800a818:	af00      	add	r7, sp, #0
    /*
     * Unless specified by the application, there is nothing to be done
     */
    return;
 800a81a:	bf00      	nop
}
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <UTIL_SEQ_PreTask>:

__WEAK void UTIL_SEQ_PreTask( uint32_t TaskId )
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
    (void)TaskId;
    return;
 800a82c:	bf00      	nop
}
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <UTIL_SEQ_PostTask>:

__WEAK void UTIL_SEQ_PostTask( uint32_t TaskId )
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
    (void)TaskId;
    return;
 800a840:	bf00      	nop
}
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <UTIL_SEQ_CatchWarning>:

__WEAK void UTIL_SEQ_CatchWarning(UTIL_SEQ_WARNING WarningId)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	4603      	mov	r3, r0
 800a854:	71fb      	strb	r3, [r7, #7]
    (void)WarningId;
    return;
 800a856:	bf00      	nop
}
 800a858:	370c      	adds	r7, #12
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr

0800a862 <SEQ_BitPosition>:
  * @brief return the position of the first bit set to 1
  * @param Value 32 bit value
  * @retval bit position
  */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800a862:	b480      	push	{r7}
 800a864:	b085      	sub	sp, #20
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d101      	bne.n	800a878 <SEQ_BitPosition+0x16>
    return 32U;
 800a874:	2320      	movs	r3, #32
 800a876:	e003      	b.n	800a880 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	fab3 f383 	clz	r3, r3
 800a87e:	b2db      	uxtb	r3, r3
    return (uint8_t)(31 -__CLZ( Value ));
 800a880:	f1c3 031f 	rsb	r3, r3, #31
 800a884:	b2db      	uxtb	r3, r3
}
 800a886:	4618      	mov	r0, r3
 800a888:	3714      	adds	r7, #20
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr

0800a892 <memset>:
 800a892:	4402      	add	r2, r0
 800a894:	4603      	mov	r3, r0
 800a896:	4293      	cmp	r3, r2
 800a898:	d100      	bne.n	800a89c <memset+0xa>
 800a89a:	4770      	bx	lr
 800a89c:	f803 1b01 	strb.w	r1, [r3], #1
 800a8a0:	e7f9      	b.n	800a896 <memset+0x4>
	...

0800a8a4 <__libc_init_array>:
 800a8a4:	b570      	push	{r4, r5, r6, lr}
 800a8a6:	4d0d      	ldr	r5, [pc, #52]	@ (800a8dc <__libc_init_array+0x38>)
 800a8a8:	4c0d      	ldr	r4, [pc, #52]	@ (800a8e0 <__libc_init_array+0x3c>)
 800a8aa:	1b64      	subs	r4, r4, r5
 800a8ac:	10a4      	asrs	r4, r4, #2
 800a8ae:	2600      	movs	r6, #0
 800a8b0:	42a6      	cmp	r6, r4
 800a8b2:	d109      	bne.n	800a8c8 <__libc_init_array+0x24>
 800a8b4:	4d0b      	ldr	r5, [pc, #44]	@ (800a8e4 <__libc_init_array+0x40>)
 800a8b6:	4c0c      	ldr	r4, [pc, #48]	@ (800a8e8 <__libc_init_array+0x44>)
 800a8b8:	f000 f826 	bl	800a908 <_init>
 800a8bc:	1b64      	subs	r4, r4, r5
 800a8be:	10a4      	asrs	r4, r4, #2
 800a8c0:	2600      	movs	r6, #0
 800a8c2:	42a6      	cmp	r6, r4
 800a8c4:	d105      	bne.n	800a8d2 <__libc_init_array+0x2e>
 800a8c6:	bd70      	pop	{r4, r5, r6, pc}
 800a8c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8cc:	4798      	blx	r3
 800a8ce:	3601      	adds	r6, #1
 800a8d0:	e7ee      	b.n	800a8b0 <__libc_init_array+0xc>
 800a8d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8d6:	4798      	blx	r3
 800a8d8:	3601      	adds	r6, #1
 800a8da:	e7f2      	b.n	800a8c2 <__libc_init_array+0x1e>
 800a8dc:	0800ab98 	.word	0x0800ab98
 800a8e0:	0800ab98 	.word	0x0800ab98
 800a8e4:	0800ab98 	.word	0x0800ab98
 800a8e8:	0800ab9c 	.word	0x0800ab9c

0800a8ec <memcpy>:
 800a8ec:	440a      	add	r2, r1
 800a8ee:	4291      	cmp	r1, r2
 800a8f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8f4:	d100      	bne.n	800a8f8 <memcpy+0xc>
 800a8f6:	4770      	bx	lr
 800a8f8:	b510      	push	{r4, lr}
 800a8fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a902:	4291      	cmp	r1, r2
 800a904:	d1f9      	bne.n	800a8fa <memcpy+0xe>
 800a906:	bd10      	pop	{r4, pc}

0800a908 <_init>:
 800a908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a90a:	bf00      	nop
 800a90c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a90e:	bc08      	pop	{r3}
 800a910:	469e      	mov	lr, r3
 800a912:	4770      	bx	lr

0800a914 <_fini>:
 800a914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a916:	bf00      	nop
 800a918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a91a:	bc08      	pop	{r3}
 800a91c:	469e      	mov	lr, r3
 800a91e:	4770      	bx	lr

0800a920 <__FLASH_Program_Fast_veneer>:
 800a920:	f85f f000 	ldr.w	pc, [pc]	@ 800a924 <__FLASH_Program_Fast_veneer+0x4>
 800a924:	20000039 	.word	0x20000039

Disassembly of section .data:

20000008 <cell_nominal_mv>:
20000008:	                                         t.

2000000a <cell_charged_mv>:
2000000a:	                                         h.

2000000c <cell_discharged_mv>:
2000000c:	00000bb8                                ....

20000010 <last_voltages_base_addr>:
20000010:	08040000                                ....

20000014 <SystemCoreClock>:
20000014:	003d0900                                ..=.

20000018 <uwTickPrio>:
20000018:	00000010                                ....

2000001c <uwTickFreq>:
2000001c:	00000001                                ....

20000020 <a_AdvData>:
20000020:	6f50090a 5f726577 00676154              ..Power_Tag.

2000002c <SizeMycharwrite>:
2000002c:	                                         ..

2000002e <SizeMycharnotify>:
2000002e:	                                         ..

20000030 <TaskMask>:
20000030:	ffffffff                                ....

20000034 <SuperMask>:
20000034:	ffffffff                                ....

20000038 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000038:	b480      	push	{r7}
2000003a:	b089      	sub	sp, #36	@ 0x24
2000003c:	af00      	add	r7, sp, #0
2000003e:	6078      	str	r0, [r7, #4]
20000040:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
20000042:	2380      	movs	r3, #128	@ 0x80
20000044:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
20000046:	687b      	ldr	r3, [r7, #4]
20000048:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
2000004a:	683b      	ldr	r3, [r7, #0]
2000004c:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000004e:	4b18      	ldr	r3, [pc, #96]	@ (200000b0 <FLASH_Program_Fast+0x78>)
20000050:	695b      	ldr	r3, [r3, #20]
20000052:	4a17      	ldr	r2, [pc, #92]	@ (200000b0 <FLASH_Program_Fast+0x78>)
20000054:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
20000058:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
2000005a:	f3ef 8310 	mrs	r3, PRIMASK
2000005e:	60fb      	str	r3, [r7, #12]
  return(result);
20000060:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000062:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000064:	b672      	cpsid	i
}
20000066:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
20000068:	697b      	ldr	r3, [r7, #20]
2000006a:	681a      	ldr	r2, [r3, #0]
2000006c:	69bb      	ldr	r3, [r7, #24]
2000006e:	601a      	str	r2, [r3, #0]
    dest_addr++;
20000070:	69bb      	ldr	r3, [r7, #24]
20000072:	3304      	adds	r3, #4
20000074:	61bb      	str	r3, [r7, #24]
    src_addr++;
20000076:	697b      	ldr	r3, [r7, #20]
20000078:	3304      	adds	r3, #4
2000007a:	617b      	str	r3, [r7, #20]
    row_index--;
2000007c:	7ffb      	ldrb	r3, [r7, #31]
2000007e:	3b01      	subs	r3, #1
20000080:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
20000082:	7ffb      	ldrb	r3, [r7, #31]
20000084:	2b00      	cmp	r3, #0
20000086:	d1ef      	bne.n	20000068 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
20000088:	bf00      	nop
2000008a:	4b09      	ldr	r3, [pc, #36]	@ (200000b0 <FLASH_Program_Fast+0x78>)
2000008c:	691b      	ldr	r3, [r3, #16]
2000008e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20000092:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20000096:	d0f8      	beq.n	2000008a <FLASH_Program_Fast+0x52>
20000098:	693b      	ldr	r3, [r7, #16]
2000009a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2000009c:	68bb      	ldr	r3, [r7, #8]
2000009e:	f383 8810 	msr	PRIMASK, r3
}
200000a2:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200000a4:	bf00      	nop
200000a6:	3724      	adds	r7, #36	@ 0x24
200000a8:	46bd      	mov	sp, r7
200000aa:	f85d 7b04 	ldr.w	r7, [sp], #4
200000ae:	4770      	bx	lr
200000b0:	58004000 	.word	0x58004000
