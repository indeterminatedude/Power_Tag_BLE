
Power_Tag_BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab60  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  0800aca0  0800aca0  0000bca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800af08  0800af08  0000bf08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800af10  0800af10  0000bf10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800af14  0800af14  0000bf14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000c8  20000008  0800af18  0000c008  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  7 BLE_DRIVER_CONTEXT 00000035  200000d0  0800afe0  0000c0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000108  0800b015  0000c108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000640  2000011c  0800b026  0000c11c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000075c  0800b026  0000c75c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000ca67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000d000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000d000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800b026  0000c1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00033d63  00000000  00000000  0000ca97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006baf  00000000  00000000  000407fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003170  00000000  00000000  000473b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000260a  00000000  00000000  0004a520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002e605  00000000  00000000  0004cb2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003594e  00000000  00000000  0007b12f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010dc0d  00000000  00000000  000b0a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001be68a  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000d2a4  00000000  00000000  001be6d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005d  00000000  00000000  001cb974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000011c 	.word	0x2000011c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ac7c 	.word	0x0800ac7c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000120 	.word	0x20000120
 800017c:	0800ac7c 	.word	0x0800ac7c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000190:	b5b0      	push	{r4, r5, r7, lr}
 8000192:	b088      	sub	sp, #32
 8000194:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000196:	4b0b      	ldr	r3, [pc, #44]	@ (80001c4 <APPD_EnableCPU2+0x34>)
 8000198:	1d3c      	adds	r4, r7, #4
 800019a:	461d      	mov	r5, r3
 800019c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a4:	c403      	stmia	r4!, {r0, r1}
 80001a6:	8022      	strh	r2, [r4, #0]
 80001a8:	3402      	adds	r4, #2
 80001aa:	0c13      	lsrs	r3, r2, #16
 80001ac:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001ae:	f008 ff19 	bl	8008fe4 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001b2:	1d3b      	adds	r3, r7, #4
 80001b4:	4618      	mov	r0, r3
 80001b6:	f008 f9a6 	bl	8008506 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001ba:	bf00      	nop
}
 80001bc:	3720      	adds	r7, #32
 80001be:	46bd      	mov	sp, r7
 80001c0:	bdb0      	pop	{r4, r5, r7, pc}
 80001c2:	bf00      	nop
 80001c4:	0800aca0 	.word	0x0800aca0

080001c8 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80001d0:	4b07      	ldr	r3, [pc, #28]	@ (80001f0 <LL_C2_PWR_SetPowerMode+0x28>)
 80001d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80001d6:	f023 0207 	bic.w	r2, r3, #7
 80001da:	4905      	ldr	r1, [pc, #20]	@ (80001f0 <LL_C2_PWR_SetPowerMode+0x28>)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4313      	orrs	r3, r2
 80001e0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80001e4:	bf00      	nop
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr
 80001f0:	58000400 	.word	0x58000400

080001f4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80001fc:	4b06      	ldr	r3, [pc, #24]	@ (8000218 <LL_EXTI_EnableIT_32_63+0x24>)
 80001fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000202:	4905      	ldr	r1, [pc, #20]	@ (8000218 <LL_EXTI_EnableIT_32_63+0x24>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4313      	orrs	r3, r2
 8000208:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800020c:	bf00      	nop
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr
 8000218:	58000800 	.word	0x58000800

0800021c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000228:	4a0a      	ldr	r2, [pc, #40]	@ (8000254 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800022a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800022e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000232:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000236:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	021b      	lsls	r3, r3, #8
 800023e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000242:	4313      	orrs	r3, r2
 8000244:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	cafecafe 	.word	0xcafecafe

08000258 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000260:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000264:	689b      	ldr	r3, [r3, #8]
 8000266:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800026a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4313      	orrs	r3, r2
 8000272:	608b      	str	r3, [r1, #8]
}
 8000274:	bf00      	nop
 8000276:	370c      	adds	r7, #12
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr

08000280 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000284:	4b04      	ldr	r3, [pc, #16]	@ (8000298 <LL_DBGMCU_GetDeviceID+0x18>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800028c:	4618      	mov	r0, r3
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e0042000 	.word	0xe0042000

0800029c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <LL_DBGMCU_GetRevisionID+0x18>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	0c1b      	lsrs	r3, r3, #16
 80002a6:	b29b      	uxth	r3, r3
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e0042000 	.word	0xe0042000

080002b8 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	22ff      	movs	r2, #255	@ 0xff
 80002c4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr

080002d2 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80002d2:	b480      	push	{r7}
 80002d4:	b083      	sub	sp, #12
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	22ca      	movs	r2, #202	@ 0xca
 80002de:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2253      	movs	r2, #83	@ 0x53
 80002e4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80002e6:	bf00      	nop
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr

080002f2 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80002f2:	b480      	push	{r7}
 80002f4:	b083      	sub	sp, #12
 80002f6:	af00      	add	r7, sp, #0
 80002f8:	6078      	str	r0, [r7, #4]
 80002fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	f023 0207 	bic.w	r2, r3, #7
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	431a      	orrs	r2, r3
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	609a      	str	r2, [r3, #8]
}
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr

08000318 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800031c:	4b04      	ldr	r3, [pc, #16]	@ (8000330 <MX_APPE_Config+0x18>)
 800031e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000322:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000324:	f000 f824 	bl	8000370 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000328:	f000 f829 	bl	800037e <Config_HSE>

  return;
 800032c:	bf00      	nop
}
 800032e:	bd80      	pop	{r7, pc}
 8000330:	58004000 	.word	0x58004000

08000334 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000338:	f000 f835 	bl	80003a6 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 800033c:	f000 f84e 	bl	80003dc <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000340:	4903      	ldr	r1, [pc, #12]	@ (8000350 <MX_APPE_Init+0x1c>)
 8000342:	2000      	movs	r0, #0
 8000344:	f000 f97a 	bl	800063c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000348:	f000 f856 	bl	80003f8 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 800034c:	bf00      	nop
}
 800034e:	bd80      	pop	{r7, pc}
 8000350:	200002cc 	.word	0x200002cc

08000354 <Init_Smps>:

void Init_Smps(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000358:	bf00      	nop
}
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <Init_Exti>:

void Init_Exti(void)
{
 8000362:	b580      	push	{r7, lr}
 8000364:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000366:	2050      	movs	r0, #80	@ 0x50
 8000368:	f7ff ff44 	bl	80001f4 <LL_EXTI_EnableIT_32_63>

  return;
 800036c:	bf00      	nop
}
 800036e:	bd80      	pop	{r7, pc}

08000370 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000374:	bf00      	nop
}
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr

0800037e <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800037e:	b580      	push	{r7, lr}
 8000380:	b082      	sub	sp, #8
 8000382:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000384:	2000      	movs	r0, #0
 8000386:	f008 fec1 	bl	800910c <OTP_Read>
 800038a:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d005      	beq.n	800039e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	799b      	ldrb	r3, [r3, #6]
 8000396:	4618      	mov	r0, r3
 8000398:	f7ff ff40 	bl	800021c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800039c:	bf00      	nop
 800039e:	bf00      	nop
}
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}

080003a6 <System_Init>:

static void System_Init(void)
{
 80003a6:	b580      	push	{r7, lr}
 80003a8:	af00      	add	r7, sp, #0
  Init_Smps();
 80003aa:	f7ff ffd3 	bl	8000354 <Init_Smps>

  Init_Exti();
 80003ae:	f7ff ffd8 	bl	8000362 <Init_Exti>

  Init_Rtc();
 80003b2:	f000 f803 	bl	80003bc <Init_Rtc>

  return;
 80003b6:	bf00      	nop
}
 80003b8:	bd80      	pop	{r7, pc}
	...

080003bc <Init_Rtc>:

static void Init_Rtc(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80003c0:	4805      	ldr	r0, [pc, #20]	@ (80003d8 <Init_Rtc+0x1c>)
 80003c2:	f7ff ff86 	bl	80002d2 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80003c6:	2100      	movs	r1, #0
 80003c8:	4803      	ldr	r0, [pc, #12]	@ (80003d8 <Init_Rtc+0x1c>)
 80003ca:	f7ff ff92 	bl	80002f2 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80003ce:	4802      	ldr	r0, [pc, #8]	@ (80003d8 <Init_Rtc+0x1c>)
 80003d0:	f7ff ff72 	bl	80002b8 <LL_RTC_EnableWriteProtection>

  return;
 80003d4:	bf00      	nop
}
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40002800 	.word	0x40002800

080003dc <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80003e0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80003e4:	f7ff ff38 	bl	8000258 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80003e8:	f00a f8fe 	bl	800a5e8 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80003ec:	2004      	movs	r0, #4
 80003ee:	f7ff feeb 	bl	80001c8 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80003f2:	bf00      	nop
}
 80003f4:	bd80      	pop	{r7, pc}
	...

080003f8 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b088      	sub	sp, #32
 80003fc:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80003fe:	f008 fc37 	bl	8008c70 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000402:	4a11      	ldr	r2, [pc, #68]	@ (8000448 <appe_Tl_Init+0x50>)
 8000404:	2100      	movs	r1, #0
 8000406:	2020      	movs	r0, #32
 8000408:	f00a fab2 	bl	800a970 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800040c:	4b0f      	ldr	r3, [pc, #60]	@ (800044c <appe_Tl_Init+0x54>)
 800040e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000410:	4b0f      	ldr	r3, [pc, #60]	@ (8000450 <appe_Tl_Init+0x58>)
 8000412:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000414:	463b      	mov	r3, r7
 8000416:	4619      	mov	r1, r3
 8000418:	480e      	ldr	r0, [pc, #56]	@ (8000454 <appe_Tl_Init+0x5c>)
 800041a:	f008 faeb 	bl	80089f4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800041e:	4b0e      	ldr	r3, [pc, #56]	@ (8000458 <appe_Tl_Init+0x60>)
 8000420:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000422:	4b0e      	ldr	r3, [pc, #56]	@ (800045c <appe_Tl_Init+0x64>)
 8000424:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000426:	4b0e      	ldr	r3, [pc, #56]	@ (8000460 <appe_Tl_Init+0x68>)
 8000428:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800042a:	f240 533c 	movw	r3, #1340	@ 0x53c
 800042e:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000430:	f107 0308 	add.w	r3, r7, #8
 8000434:	4618      	mov	r0, r3
 8000436:	f008 fd61 	bl	8008efc <TL_MM_Init>

  TL_Enable();
 800043a:	f008 fc13 	bl	8008c64 <TL_Enable>

  return;
 800043e:	bf00      	nop
}
 8000440:	3720      	adds	r7, #32
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	08008a2d 	.word	0x08008a2d
 800044c:	20030734 	.word	0x20030734
 8000450:	08000465 	.word	0x08000465
 8000454:	0800047d 	.word	0x0800047d
 8000458:	2003094c 	.word	0x2003094c
 800045c:	20030840 	.word	0x20030840
 8000460:	200301f8 	.word	0x200301f8

08000464 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800046e:	bf00      	nop
}
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
	...

0800047c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	685b      	ldr	r3, [r3, #4]
 8000488:	330b      	adds	r3, #11
 800048a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 800048c:	69fb      	ldr	r3, [r7, #28]
 800048e:	881b      	ldrh	r3, [r3, #0]
 8000490:	b29b      	uxth	r3, r3
 8000492:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8000496:	2b07      	cmp	r3, #7
 8000498:	d81f      	bhi.n	80004da <APPE_SysUserEvtRx+0x5e>
 800049a:	a201      	add	r2, pc, #4	@ (adr r2, 80004a0 <APPE_SysUserEvtRx+0x24>)
 800049c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004a0:	080004c1 	.word	0x080004c1
 80004a4:	080004d3 	.word	0x080004d3
 80004a8:	080004db 	.word	0x080004db
 80004ac:	080004db 	.word	0x080004db
 80004b0:	080004db 	.word	0x080004db
 80004b4:	080004db 	.word	0x080004db
 80004b8:	080004db 	.word	0x080004db
 80004bc:	080004db 	.word	0x080004db
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80004c0:	f107 030c 	add.w	r3, r7, #12
 80004c4:	4618      	mov	r0, r3
 80004c6:	f008 f84b 	bl	8008560 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80004ca:	6878      	ldr	r0, [r7, #4]
 80004cc:	f000 f81b 	bl	8000506 <APPE_SysEvtReadyProcessing>
    break;
 80004d0:	e004      	b.n	80004dc <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80004d2:	6878      	ldr	r0, [r7, #4]
 80004d4:	f000 f806 	bl	80004e4 <APPE_SysEvtError>
    break;
 80004d8:	e000      	b.n	80004dc <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80004da:	bf00      	nop
  }

  return;
 80004dc:	bf00      	nop
}
 80004de:	3720      	adds	r7, #32
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	330b      	adds	r3, #11
 80004f2:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	3302      	adds	r3, #2
 80004f8:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80004fa:	bf00      	nop
}
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	b08a      	sub	sp, #40	@ 0x28
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800050e:	f107 0308 	add.w	r3, r7, #8
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 800051c:	2300      	movs	r3, #0
 800051e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8000520:	2300      	movs	r3, #0
 8000522:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	330b      	adds	r3, #11
 800052a:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	3302      	adds	r3, #2
 8000530:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000532:	69bb      	ldr	r3, [r7, #24]
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d11d      	bne.n	8000576 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800053a:	f7ff fe29 	bl	8000190 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800053e:	230f      	movs	r3, #15
 8000540:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000542:	237f      	movs	r3, #127	@ 0x7f
 8000544:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000546:	f7ff fea9 	bl	800029c <LL_DBGMCU_GetRevisionID>
 800054a:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 800054c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800054e:	b29b      	uxth	r3, r3
 8000550:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000552:	f7ff fe95 	bl	8000280 <LL_DBGMCU_GetDeviceID>
 8000556:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000558:	6a3b      	ldr	r3, [r7, #32]
 800055a:	b29b      	uxth	r3, r3
 800055c:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800055e:	f107 0308 	add.w	r3, r7, #8
 8000562:	4618      	mov	r0, r3
 8000564:	f007 ffe6 	bl	8008534 <SHCI_C2_Config>

    APP_BLE_Init();
 8000568:	f008 feda 	bl	8009320 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800056c:	2100      	movs	r1, #0
 800056e:	2001      	movs	r0, #1
 8000570:	f00a f84c 	bl	800a60c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000574:	e007      	b.n	8000586 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000576:	69bb      	ldr	r3, [r7, #24]
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d103      	bne.n	8000586 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]
  return;
 8000584:	bf00      	nop
 8000586:	bf00      	nop
}
 8000588:	3728      	adds	r7, #40	@ 0x28
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000592:	f04f 30ff 	mov.w	r0, #4294967295
 8000596:	f00a f869 	bl	800a66c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}

0800059e <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80005a2:	bf00      	nop
}
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80005b4:	2100      	movs	r1, #0
 80005b6:	2020      	movs	r0, #32
 80005b8:	f00a f9fc 	bl	800a9b4 <UTIL_SEQ_SetTask>
  return;
 80005bc:	bf00      	nop
}
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80005cc:	2002      	movs	r0, #2
 80005ce:	f00a fa5d 	bl	800aa8c <UTIL_SEQ_SetEvt>
  return;
 80005d2:	bf00      	nop
}
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b082      	sub	sp, #8
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80005e2:	2002      	movs	r0, #2
 80005e4:	f00a fa72 	bl	800aacc <UTIL_SEQ_WaitEvt>
  return;
 80005e8:	bf00      	nop
}
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <LL_EXTI_EnableIT_0_31>:
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80005f8:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <LL_EXTI_EnableIT_0_31+0x24>)
 80005fa:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80005fe:	4905      	ldr	r1, [pc, #20]	@ (8000614 <LL_EXTI_EnableIT_0_31+0x24>)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4313      	orrs	r3, r2
 8000604:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	58000800 	.word	0x58000800

08000618 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000620:	4b05      	ldr	r3, [pc, #20]	@ (8000638 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	4904      	ldr	r1, [pc, #16]	@ (8000638 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4313      	orrs	r3, r2
 800062a:	600b      	str	r3, [r1, #0]

}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	58000800 	.word	0x58000800

0800063c <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	6039      	str	r1, [r7, #0]
 8000646:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000648:	4b5e      	ldr	r3, [pc, #376]	@ (80007c4 <HW_TS_Init+0x188>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	22ca      	movs	r2, #202	@ 0xca
 800064e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000650:	4b5c      	ldr	r3, [pc, #368]	@ (80007c4 <HW_TS_Init+0x188>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2253      	movs	r2, #83	@ 0x53
 8000656:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000658:	4b5b      	ldr	r3, [pc, #364]	@ (80007c8 <HW_TS_Init+0x18c>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	4a5a      	ldr	r2, [pc, #360]	@ (80007c8 <HW_TS_Init+0x18c>)
 800065e:	f043 0320 	orr.w	r3, r3, #32
 8000662:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000664:	4b58      	ldr	r3, [pc, #352]	@ (80007c8 <HW_TS_Init+0x18c>)
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	f003 0307 	and.w	r3, r3, #7
 800066e:	b2db      	uxtb	r3, r3
 8000670:	f1c3 0304 	rsb	r3, r3, #4
 8000674:	b2da      	uxtb	r2, r3
 8000676:	4b55      	ldr	r3, [pc, #340]	@ (80007cc <HW_TS_Init+0x190>)
 8000678:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800067a:	4b53      	ldr	r3, [pc, #332]	@ (80007c8 <HW_TS_Init+0x18c>)
 800067c:	691b      	ldr	r3, [r3, #16]
 800067e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8000682:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8000686:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000688:	693a      	ldr	r2, [r7, #16]
 800068a:	fa92 f2a2 	rbit	r2, r2
 800068e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000690:	68fa      	ldr	r2, [r7, #12]
 8000692:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000694:	697a      	ldr	r2, [r7, #20]
 8000696:	2a00      	cmp	r2, #0
 8000698:	d101      	bne.n	800069e <HW_TS_Init+0x62>
  {
    return 32U;
 800069a:	2220      	movs	r2, #32
 800069c:	e003      	b.n	80006a6 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800069e:	697a      	ldr	r2, [r7, #20]
 80006a0:	fab2 f282 	clz	r2, r2
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	40d3      	lsrs	r3, r2
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	3301      	adds	r3, #1
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4b48      	ldr	r3, [pc, #288]	@ (80007d0 <HW_TS_Init+0x194>)
 80006b0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80006b2:	4b45      	ldr	r3, [pc, #276]	@ (80007c8 <HW_TS_Init+0x18c>)
 80006b4:	691b      	ldr	r3, [r3, #16]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006bc:	b29b      	uxth	r3, r3
 80006be:	3301      	adds	r3, #1
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	4b44      	ldr	r3, [pc, #272]	@ (80007d4 <HW_TS_Init+0x198>)
 80006c4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80006c6:	4b43      	ldr	r3, [pc, #268]	@ (80007d4 <HW_TS_Init+0x198>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	3b01      	subs	r3, #1
 80006cc:	4a40      	ldr	r2, [pc, #256]	@ (80007d0 <HW_TS_Init+0x194>)
 80006ce:	7812      	ldrb	r2, [r2, #0]
 80006d0:	fb02 f303 	mul.w	r3, r2, r3
 80006d4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80006d8:	4a3c      	ldr	r2, [pc, #240]	@ (80007cc <HW_TS_Init+0x190>)
 80006da:	7812      	ldrb	r2, [r2, #0]
 80006dc:	40d3      	lsrs	r3, r2
 80006de:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d904      	bls.n	80006f4 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80006ea:	4b3b      	ldr	r3, [pc, #236]	@ (80007d8 <HW_TS_Init+0x19c>)
 80006ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006f0:	801a      	strh	r2, [r3, #0]
 80006f2:	e003      	b.n	80006fc <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	4b37      	ldr	r3, [pc, #220]	@ (80007d8 <HW_TS_Init+0x19c>)
 80006fa:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80006fc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000700:	f7ff ff8a 	bl	8000618 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000704:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000708:	f7ff ff72 	bl	80005f0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d13d      	bne.n	800078e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000712:	4b32      	ldr	r3, [pc, #200]	@ (80007dc <HW_TS_Init+0x1a0>)
 8000714:	2201      	movs	r2, #1
 8000716:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000718:	4b31      	ldr	r3, [pc, #196]	@ (80007e0 <HW_TS_Init+0x1a4>)
 800071a:	f04f 32ff 	mov.w	r2, #4294967295
 800071e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000720:	2300      	movs	r3, #0
 8000722:	77fb      	strb	r3, [r7, #31]
 8000724:	e00c      	b.n	8000740 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000726:	7ffa      	ldrb	r2, [r7, #31]
 8000728:	492e      	ldr	r1, [pc, #184]	@ (80007e4 <HW_TS_Init+0x1a8>)
 800072a:	4613      	mov	r3, r2
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	4413      	add	r3, r2
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	440b      	add	r3, r1
 8000734:	330c      	adds	r3, #12
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800073a:	7ffb      	ldrb	r3, [r7, #31]
 800073c:	3301      	adds	r3, #1
 800073e:	77fb      	strb	r3, [r7, #31]
 8000740:	7ffb      	ldrb	r3, [r7, #31]
 8000742:	2b05      	cmp	r3, #5
 8000744:	d9ef      	bls.n	8000726 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000746:	4b28      	ldr	r3, [pc, #160]	@ (80007e8 <HW_TS_Init+0x1ac>)
 8000748:	2206      	movs	r2, #6
 800074a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800074c:	4b1d      	ldr	r3, [pc, #116]	@ (80007c4 <HW_TS_Init+0x188>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	689a      	ldr	r2, [r3, #8]
 8000752:	4b1c      	ldr	r3, [pc, #112]	@ (80007c4 <HW_TS_Init+0x188>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800075a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800075c:	4b19      	ldr	r3, [pc, #100]	@ (80007c4 <HW_TS_Init+0x188>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	b2da      	uxtb	r2, r3
 8000764:	4b17      	ldr	r3, [pc, #92]	@ (80007c4 <HW_TS_Init+0x188>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800076c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800076e:	4b1f      	ldr	r3, [pc, #124]	@ (80007ec <HW_TS_Init+0x1b0>)
 8000770:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000774:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000776:	2003      	movs	r0, #3
 8000778:	f002 ff0b 	bl	8003592 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800077c:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <HW_TS_Init+0x188>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	689a      	ldr	r2, [r3, #8]
 8000782:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <HW_TS_Init+0x188>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	e009      	b.n	80007a2 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800078e:	4b0d      	ldr	r3, [pc, #52]	@ (80007c4 <HW_TS_Init+0x188>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000798:	2b00      	cmp	r3, #0
 800079a:	d002      	beq.n	80007a2 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800079c:	2003      	movs	r0, #3
 800079e:	f002 feea 	bl	8003576 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <HW_TS_Init+0x188>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	22ff      	movs	r2, #255	@ 0xff
 80007a8:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80007aa:	2200      	movs	r2, #0
 80007ac:	2103      	movs	r1, #3
 80007ae:	2003      	movs	r0, #3
 80007b0:	f002 fe9f 	bl	80034f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80007b4:	2003      	movs	r0, #3
 80007b6:	f002 feb6 	bl	8003526 <HAL_NVIC_EnableIRQ>

  return;
 80007ba:	bf00      	nop
}
 80007bc:	3720      	adds	r7, #32
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200002cc 	.word	0x200002cc
 80007c8:	40002800 	.word	0x40002800
 80007cc:	200001d1 	.word	0x200001d1
 80007d0:	200001d2 	.word	0x200001d2
 80007d4:	200001d4 	.word	0x200001d4
 80007d8:	200001d6 	.word	0x200001d6
 80007dc:	200001d0 	.word	0x200001d0
 80007e0:	200001cc 	.word	0x200001cc
 80007e4:	20000138 	.word	0x20000138
 80007e8:	200001c8 	.word	0x200001c8
 80007ec:	58000800 	.word	0x58000800

080007f0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80007fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4313      	orrs	r3, r2
 8000806:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000808:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800080c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4013      	ands	r3, r2
 8000812:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000814:	68fb      	ldr	r3, [r7, #12]
}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000828:	f001 fa08 	bl	8001c3c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800082c:	f7ff fd74 	bl	8000318 <MX_APPE_Config>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000830:	f000 f8aa 	bl	8000988 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000834:	f000 f91a 	bl	8000a6c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8000838:	f000 fa30 	bl	8000c9c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083c:	f000 fb34 	bl	8000ea8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000840:	f000 f934 	bl	8000aac <MX_ADC1_Init>
  MX_I2C1_Init();
 8000844:	f000 f9ea 	bl	8000c1c <MX_I2C1_Init>
  MX_RTC_Init();
 8000848:	f000 fa44 	bl	8000cd4 <MX_RTC_Init>
  MX_TIM2_Init();
 800084c:	f000 fade 	bl	8000e0c <MX_TIM2_Init>
  MX_RF_Init();
 8000850:	f000 fa38 	bl	8000cc4 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 8000854:	4b3c      	ldr	r3, [pc, #240]	@ (8000948 <main+0x124>)
 8000856:	2220      	movs	r2, #32
 8000858:	60da      	str	r2, [r3, #12]
	TIM16->SR = ~TIM_SR_UIF;  // Clear update interrupt flag
 800085a:	4b3c      	ldr	r3, [pc, #240]	@ (800094c <main+0x128>)
 800085c:	f06f 0201 	mvn.w	r2, #1
 8000860:	611a      	str	r2, [r3, #16]
	TIM16->CNT = 0;
 8000862:	4b3a      	ldr	r3, [pc, #232]	@ (800094c <main+0x128>)
 8000864:	2200      	movs	r2, #0
 8000866:	625a      	str	r2, [r3, #36]	@ 0x24
	last_net_mv = read_from_flash(last_voltages_base_addr);
 8000868:	4b39      	ldr	r3, [pc, #228]	@ (8000950 <main+0x12c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f000 fbf1 	bl	8001054 <read_from_flash>
 8000872:	4603      	mov	r3, r0
 8000874:	461a      	mov	r2, r3
 8000876:	4b37      	ldr	r3, [pc, #220]	@ (8000954 <main+0x130>)
 8000878:	801a      	strh	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800087a:	f7ff fd5b 	bl	8000334 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_TIM_Base_Start_IT(&htim2);
 800087e:	4836      	ldr	r0, [pc, #216]	@ (8000958 <main+0x134>)
 8000880:	f005 fffa 	bl	8006878 <HAL_TIM_Base_Start_IT>
	update_state();
 8000884:	f000 fdb4 	bl	80013f0 <update_state>
	while (1) {
		if (sleep_flag == 1) {
 8000888:	4b34      	ldr	r3, [pc, #208]	@ (800095c <main+0x138>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2b01      	cmp	r3, #1
 8000890:	d133      	bne.n	80008fa <main+0xd6>
			stop_display();
 8000892:	f000 fd97 	bl	80013c4 <stop_display>
			HAL_NVIC_DisableIRQ(TIM2_IRQn);  // Disable NVIC for TIM2
 8000896:	201c      	movs	r0, #28
 8000898:	f002 fe53 	bl	8003542 <HAL_NVIC_DisableIRQ>
			TIM2->DIER &= ~TIM_DIER_UIE;
 800089c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008a0:	68db      	ldr	r3, [r3, #12]
 80008a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008a6:	f023 0301 	bic.w	r3, r3, #1
 80008aa:	60d3      	str	r3, [r2, #12]
			//stop_display();
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b6:	f003 f9c3 	bl	8003c40 <HAL_GPIO_WritePin>
			count = 0;//UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80008ba:	4b29      	ldr	r3, [pc, #164]	@ (8000960 <main+0x13c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
			get_voltage();
 80008c0:	f000 fbfa 	bl	80010b8 <get_voltage>
			write_to_flash(last_voltages_base_addr, present_net_mv);
 80008c4:	4b22      	ldr	r3, [pc, #136]	@ (8000950 <main+0x12c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a26      	ldr	r2, [pc, #152]	@ (8000964 <main+0x140>)
 80008ca:	8812      	ldrh	r2, [r2, #0]
 80008cc:	b292      	uxth	r2, r2
 80008ce:	4611      	mov	r1, r2
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 fb3f 	bl	8000f54 <write_to_flash>
			HAL_RTC_DeInit(&hrtc);
 80008d6:	4824      	ldr	r0, [pc, #144]	@ (8000968 <main+0x144>)
 80008d8:	f005 fa2e 	bl	8005d38 <HAL_RTC_DeInit>
			MX_RTC_Init();
 80008dc:	f000 f9fa 	bl	8000cd4 <MX_RTC_Init>
			RTC_Wakeup_After(60);
 80008e0:	203c      	movs	r0, #60	@ 0x3c
 80008e2:	f000 fe6b 	bl	80015bc <RTC_Wakeup_After>
			HAL_SuspendTick();
 80008e6:	f001 fa2f 	bl	8001d48 <HAL_SuspendTick>
			HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80008ea:	2001      	movs	r0, #1
 80008ec:	f003 fc06 	bl	80040fc <HAL_PWREx_EnterSTOP2Mode>
			SystemClock_Config();
 80008f0:	f000 f84a 	bl	8000988 <SystemClock_Config>
			HAL_ResumeTick();
 80008f4:	f001 fa38 	bl	8001d68 <HAL_ResumeTick>
 80008f8:	e023      	b.n	8000942 <main+0x11e>
		} else {
			if (connection_status == 1) {
 80008fa:	4b1c      	ldr	r3, [pc, #112]	@ (800096c <main+0x148>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	2b01      	cmp	r3, #1
 8000902:	d01e      	beq.n	8000942 <main+0x11e>
			} else {
					get_voltage();
 8000904:	f000 fbd8 	bl	80010b8 <get_voltage>
					cell_nominal_mv = read_from_flash(nominal_cell_mv_addr);
 8000908:	4b19      	ldr	r3, [pc, #100]	@ (8000970 <main+0x14c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f000 fba1 	bl	8001054 <read_from_flash>
 8000912:	4603      	mov	r3, r0
 8000914:	461a      	mov	r2, r3
 8000916:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <main+0x150>)
 8000918:	801a      	strh	r2, [r3, #0]
					cell_charged_mv = read_from_flash(charged_cell_mv_addr);
 800091a:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <main+0x154>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f000 fb98 	bl	8001054 <read_from_flash>
 8000924:	4603      	mov	r3, r0
 8000926:	461a      	mov	r2, r3
 8000928:	4b14      	ldr	r3, [pc, #80]	@ (800097c <main+0x158>)
 800092a:	801a      	strh	r2, [r3, #0]
					cell_discharged_mv = read_from_flash(discharged_cell_mv_addr);
 800092c:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <main+0x15c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4618      	mov	r0, r3
 8000932:	f000 fb8f 	bl	8001054 <read_from_flash>
 8000936:	4603      	mov	r3, r0
 8000938:	461a      	mov	r2, r3
 800093a:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <main+0x160>)
 800093c:	801a      	strh	r2, [r3, #0]
					//update_state();
					display();
 800093e:	f000 fc91 	bl	8001264 <display>
			}
		}

    /* USER CODE END WHILE */
    MX_APPE_Process();
 8000942:	f7ff fe24 	bl	800058e <MX_APPE_Process>
		if (sleep_flag == 1) {
 8000946:	e79f      	b.n	8000888 <main+0x64>
 8000948:	58000800 	.word	0x58000800
 800094c:	40014400 	.word	0x40014400
 8000950:	20000008 	.word	0x20000008
 8000954:	2000036c 	.word	0x2000036c
 8000958:	200002f0 	.word	0x200002f0
 800095c:	20000340 	.word	0x20000340
 8000960:	2000033c 	.word	0x2000033c
 8000964:	2000036a 	.word	0x2000036a
 8000968:	200002cc 	.word	0x200002cc
 800096c:	200004a4 	.word	0x200004a4
 8000970:	2000000c 	.word	0x2000000c
 8000974:	2000034e 	.word	0x2000034e
 8000978:	20000010 	.word	0x20000010
 800097c:	20000350 	.word	0x20000350
 8000980:	20000014 	.word	0x20000014
 8000984:	20000352 	.word	0x20000352

08000988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b09a      	sub	sp, #104	@ 0x68
 800098c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098e:	f107 0320 	add.w	r3, r7, #32
 8000992:	2248      	movs	r2, #72	@ 0x48
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f00a f935 	bl	800ac06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]
 80009aa:	615a      	str	r2, [r3, #20]
 80009ac:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 80009ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80009b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80009bc:	f043 0310 	orr.w	r3, r3, #16
 80009c0:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80009c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	f023 0303 	bic.w	r3, r3, #3
 80009cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	60d3      	str	r3, [r2, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d6:	4b24      	ldr	r3, [pc, #144]	@ (8000a68 <SystemClock_Config+0xe0>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80009de:	4a22      	ldr	r2, [pc, #136]	@ (8000a68 <SystemClock_Config+0xe0>)
 80009e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009e4:	6013      	str	r3, [r2, #0]
 80009e6:	4b20      	ldr	r3, [pc, #128]	@ (8000a68 <SystemClock_Config+0xe0>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80009f2:	232b      	movs	r3, #43	@ 0x2b
 80009f4:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a02:	2301      	movs	r3, #1
 8000a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a06:	2340      	movs	r3, #64	@ 0x40
 8000a08:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000a0e:	23a0      	movs	r3, #160	@ 0xa0
 8000a10:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a12:	2305      	movs	r3, #5
 8000a14:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1a:	f107 0320 	add.w	r3, r7, #32
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f003 fef6 	bl	8004810 <HAL_RCC_OscConfig>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a2a:	f000 fe55 	bl	80016d8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000a2e:	236f      	movs	r3, #111	@ 0x6f
 8000a30:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f004 fa52 	bl	8004ef8 <HAL_RCC_ClockConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000a5a:	f000 fe3d 	bl	80016d8 <Error_Handler>
  }
}
 8000a5e:	bf00      	nop
 8000a60:	3768      	adds	r7, #104	@ 0x68
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	58000400 	.word	0x58000400

08000a6c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b094      	sub	sp, #80	@ 0x50
 8000a70:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a72:	463b      	mov	r3, r7
 8000a74:	2250      	movs	r2, #80	@ 0x50
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f00a f8c4 	bl	800ac06 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8000a7e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000a82:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8000a84:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000a88:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000a8e:	2310      	movs	r3, #16
 8000a90:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a92:	463b      	mov	r3, r7
 8000a94:	4618      	mov	r0, r3
 8000a96:	f004 fe40 	bl	800571a <HAL_RCCEx_PeriphCLKConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000aa0:	f000 fe1a 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000aa4:	bf00      	nop
 8000aa6:	3750      	adds	r7, #80	@ 0x50
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
 8000ac0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ac2:	4b4e      	ldr	r3, [pc, #312]	@ (8000bfc <MX_ADC1_Init+0x150>)
 8000ac4:	4a4e      	ldr	r2, [pc, #312]	@ (8000c00 <MX_ADC1_Init+0x154>)
 8000ac6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ac8:	4b4c      	ldr	r3, [pc, #304]	@ (8000bfc <MX_ADC1_Init+0x150>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ace:	4b4b      	ldr	r3, [pc, #300]	@ (8000bfc <MX_ADC1_Init+0x150>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ad4:	4b49      	ldr	r3, [pc, #292]	@ (8000bfc <MX_ADC1_Init+0x150>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ada:	4b48      	ldr	r3, [pc, #288]	@ (8000bfc <MX_ADC1_Init+0x150>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ae0:	4b46      	ldr	r3, [pc, #280]	@ (8000bfc <MX_ADC1_Init+0x150>)
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ae6:	4b45      	ldr	r3, [pc, #276]	@ (8000bfc <MX_ADC1_Init+0x150>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aec:	4b43      	ldr	r3, [pc, #268]	@ (8000bfc <MX_ADC1_Init+0x150>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 8000af2:	4b42      	ldr	r3, [pc, #264]	@ (8000bfc <MX_ADC1_Init+0x150>)
 8000af4:	2206      	movs	r2, #6
 8000af6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000af8:	4b40      	ldr	r3, [pc, #256]	@ (8000bfc <MX_ADC1_Init+0x150>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000b00:	4b3e      	ldr	r3, [pc, #248]	@ (8000bfc <MX_ADC1_Init+0x150>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b06:	4b3d      	ldr	r3, [pc, #244]	@ (8000bfc <MX_ADC1_Init+0x150>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8000bfc <MX_ADC1_Init+0x150>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b12:	4b3a      	ldr	r3, [pc, #232]	@ (8000bfc <MX_ADC1_Init+0x150>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b1a:	4b38      	ldr	r3, [pc, #224]	@ (8000bfc <MX_ADC1_Init+0x150>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b20:	4b36      	ldr	r3, [pc, #216]	@ (8000bfc <MX_ADC1_Init+0x150>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b28:	4834      	ldr	r0, [pc, #208]	@ (8000bfc <MX_ADC1_Init+0x150>)
 8000b2a:	f001 fb4f 	bl	80021cc <HAL_ADC_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000b34:	f000 fdd0 	bl	80016d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000b38:	4b32      	ldr	r3, [pc, #200]	@ (8000c04 <MX_ADC1_Init+0x158>)
 8000b3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b3c:	2306      	movs	r3, #6
 8000b3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000b40:	2304      	movs	r3, #4
 8000b42:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b44:	237f      	movs	r3, #127	@ 0x7f
 8000b46:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b50:	463b      	mov	r3, r7
 8000b52:	4619      	mov	r1, r3
 8000b54:	4829      	ldr	r0, [pc, #164]	@ (8000bfc <MX_ADC1_Init+0x150>)
 8000b56:	f001 fda7 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000b60:	f000 fdba 	bl	80016d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b64:	4b28      	ldr	r3, [pc, #160]	@ (8000c08 <MX_ADC1_Init+0x15c>)
 8000b66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b68:	230c      	movs	r3, #12
 8000b6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4822      	ldr	r0, [pc, #136]	@ (8000bfc <MX_ADC1_Init+0x150>)
 8000b72:	f001 fd99 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000b7c:	f000 fdac 	bl	80016d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b80:	4b22      	ldr	r3, [pc, #136]	@ (8000c0c <MX_ADC1_Init+0x160>)
 8000b82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b84:	2312      	movs	r3, #18
 8000b86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b88:	463b      	mov	r3, r7
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	481b      	ldr	r0, [pc, #108]	@ (8000bfc <MX_ADC1_Init+0x150>)
 8000b8e:	f001 fd8b 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000b98:	f000 fd9e 	bl	80016d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c10 <MX_ADC1_Init+0x164>)
 8000b9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000ba0:	2318      	movs	r3, #24
 8000ba2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4814      	ldr	r0, [pc, #80]	@ (8000bfc <MX_ADC1_Init+0x150>)
 8000baa:	f001 fd7d 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8000bb4:	f000 fd90 	bl	80016d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bb8:	4b16      	ldr	r3, [pc, #88]	@ (8000c14 <MX_ADC1_Init+0x168>)
 8000bba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000bbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bc0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	480d      	ldr	r0, [pc, #52]	@ (8000bfc <MX_ADC1_Init+0x150>)
 8000bc8:	f001 fd6e 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_ADC1_Init+0x12a>
  {
    Error_Handler();
 8000bd2:	f000 fd81 	bl	80016d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000bd6:	4b10      	ldr	r3, [pc, #64]	@ (8000c18 <MX_ADC1_Init+0x16c>)
 8000bd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000bda:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000bde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be0:	463b      	mov	r3, r7
 8000be2:	4619      	mov	r1, r3
 8000be4:	4805      	ldr	r0, [pc, #20]	@ (8000bfc <MX_ADC1_Init+0x150>)
 8000be6:	f001 fd5f 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_ADC1_Init+0x148>
  {
    Error_Handler();
 8000bf0:	f000 fd72 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200001d8 	.word	0x200001d8
 8000c00:	50040000 	.word	0x50040000
 8000c04:	19200040 	.word	0x19200040
 8000c08:	1d500080 	.word	0x1d500080
 8000c0c:	21800100 	.word	0x21800100
 8000c10:	25b00200 	.word	0x25b00200
 8000c14:	2a000400 	.word	0x2a000400
 8000c18:	2e300800 	.word	0x2e300800

08000c1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c22:	4a1c      	ldr	r2, [pc, #112]	@ (8000c94 <MX_I2C1_Init+0x78>)
 8000c24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c28:	4a1b      	ldr	r2, [pc, #108]	@ (8000c98 <MX_I2C1_Init+0x7c>)
 8000c2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c2c:	4b18      	ldr	r3, [pc, #96]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c32:	4b17      	ldr	r3, [pc, #92]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c38:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c3e:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c44:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c4a:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c56:	480e      	ldr	r0, [pc, #56]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c58:	f003 f860 	bl	8003d1c <HAL_I2C_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c62:	f000 fd39 	bl	80016d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c66:	2100      	movs	r1, #0
 8000c68:	4809      	ldr	r0, [pc, #36]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c6a:	f003 f90c 	bl	8003e86 <HAL_I2CEx_ConfigAnalogFilter>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c74:	f000 fd30 	bl	80016d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4805      	ldr	r0, [pc, #20]	@ (8000c90 <MX_I2C1_Init+0x74>)
 8000c7c:	f003 f94e 	bl	8003f1c <HAL_I2CEx_ConfigDigitalFilter>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c86:	f000 fd27 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2000023c 	.word	0x2000023c
 8000c94:	40005400 	.word	0x40005400
 8000c98:	00b07cb4 	.word	0x00b07cb4

08000c9c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <MX_IPCC_Init+0x20>)
 8000ca2:	4a07      	ldr	r2, [pc, #28]	@ (8000cc0 <MX_IPCC_Init+0x24>)
 8000ca4:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	@ (8000cbc <MX_IPCC_Init+0x20>)
 8000ca8:	f003 f984 	bl	8003fb4 <HAL_IPCC_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8000cb2:	f000 fd11 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000290 	.word	0x20000290
 8000cc0:	58000c00 	.word	0x58000c00

08000cc4 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b090      	sub	sp, #64	@ 0x40
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000cda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
 8000ce8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000cea:	2300      	movs	r3, #0
 8000cec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000cee:	463b      	mov	r3, r7
 8000cf0:	2228      	movs	r2, #40	@ 0x28
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f009 ff86 	bl	800ac06 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000cfa:	4b42      	ldr	r3, [pc, #264]	@ (8000e04 <MX_RTC_Init+0x130>)
 8000cfc:	4a42      	ldr	r2, [pc, #264]	@ (8000e08 <MX_RTC_Init+0x134>)
 8000cfe:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d00:	4b40      	ldr	r3, [pc, #256]	@ (8000e04 <MX_RTC_Init+0x130>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d06:	4b3f      	ldr	r3, [pc, #252]	@ (8000e04 <MX_RTC_Init+0x130>)
 8000d08:	227f      	movs	r2, #127	@ 0x7f
 8000d0a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d0c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e04 <MX_RTC_Init+0x130>)
 8000d0e:	22ff      	movs	r2, #255	@ 0xff
 8000d10:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d12:	4b3c      	ldr	r3, [pc, #240]	@ (8000e04 <MX_RTC_Init+0x130>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d18:	4b3a      	ldr	r3, [pc, #232]	@ (8000e04 <MX_RTC_Init+0x130>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d1e:	4b39      	ldr	r3, [pc, #228]	@ (8000e04 <MX_RTC_Init+0x130>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d24:	4b37      	ldr	r3, [pc, #220]	@ (8000e04 <MX_RTC_Init+0x130>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d2a:	4836      	ldr	r0, [pc, #216]	@ (8000e04 <MX_RTC_Init+0x130>)
 8000d2c:	f004 ff7c 	bl	8005c28 <HAL_RTC_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000d36:	f000 fccf 	bl	80016d8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.SubSeconds = 0x0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	633b      	str	r3, [r7, #48]	@ 0x30
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d54:	2300      	movs	r3, #0
 8000d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4828      	ldr	r0, [pc, #160]	@ (8000e04 <MX_RTC_Init+0x130>)
 8000d62:	f005 f855 	bl	8005e10 <HAL_RTC_SetTime>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_RTC_Init+0x9c>
  {
    Error_Handler();
 8000d6c:	f000 fcb4 	bl	80016d8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d70:	2301      	movs	r3, #1
 8000d72:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000d76:	2301      	movs	r3, #1
 8000d78:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d88:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4619      	mov	r1, r3
 8000d90:	481c      	ldr	r0, [pc, #112]	@ (8000e04 <MX_RTC_Init+0x130>)
 8000d92:	f005 f93a 	bl	800600a <HAL_RTC_SetDate>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8000d9c:	f000 fc9c 	bl	80016d8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000db4:	2300      	movs	r3, #0
 8000db6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000dca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480b      	ldr	r0, [pc, #44]	@ (8000e04 <MX_RTC_Init+0x130>)
 8000dd8:	f005 f9f0 	bl	80061bc <HAL_RTC_SetAlarm_IT>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_RTC_Init+0x112>
  {
    Error_Handler();
 8000de2:	f000 fc79 	bl	80016d8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	4806      	ldr	r0, [pc, #24]	@ (8000e04 <MX_RTC_Init+0x130>)
 8000dec:	f005 fc3c 	bl	8006668 <HAL_RTCEx_SetWakeUpTimer>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8000df6:	f000 fc6f 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	3740      	adds	r7, #64	@ 0x40
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200002cc 	.word	0x200002cc
 8000e08:	40002800 	.word	0x40002800

08000e0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e12:	f107 0310 	add.w	r3, r7, #16
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea4 <MX_TIM2_Init+0x98>)
 8000e2c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e30:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000-1;
 8000e32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea4 <MX_TIM2_Init+0x98>)
 8000e34:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8000e38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea4 <MX_TIM2_Init+0x98>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000e40:	4b18      	ldr	r3, [pc, #96]	@ (8000ea4 <MX_TIM2_Init+0x98>)
 8000e42:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e48:	4b16      	ldr	r3, [pc, #88]	@ (8000ea4 <MX_TIM2_Init+0x98>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <MX_TIM2_Init+0x98>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e54:	4813      	ldr	r0, [pc, #76]	@ (8000ea4 <MX_TIM2_Init+0x98>)
 8000e56:	f005 fcb7 	bl	80067c8 <HAL_TIM_Base_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000e60:	f000 fc3a 	bl	80016d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e6a:	f107 0310 	add.w	r3, r7, #16
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480c      	ldr	r0, [pc, #48]	@ (8000ea4 <MX_TIM2_Init+0x98>)
 8000e72:	f005 fe56 	bl	8006b22 <HAL_TIM_ConfigClockSource>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000e7c:	f000 fc2c 	bl	80016d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e80:	2300      	movs	r3, #0
 8000e82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	@ (8000ea4 <MX_TIM2_Init+0x98>)
 8000e8e:	f006 f83f 	bl	8006f10 <HAL_TIMEx_MasterConfigSynchronization>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000e98:	f000 fc1e 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	3720      	adds	r7, #32
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200002f0 	.word	0x200002f0

08000ea8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ebc:	2004      	movs	r0, #4
 8000ebe:	f7ff fc97 	bl	80007f0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec2:	2002      	movs	r0, #2
 8000ec4:	f7ff fc94 	bl	80007f0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f7ff fc91 	bl	80007f0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ed4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed8:	f002 feb2 	bl	8003c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2138      	movs	r1, #56	@ 0x38
 8000ee0:	481b      	ldr	r0, [pc, #108]	@ (8000f50 <MX_GPIO_Init+0xa8>)
 8000ee2:	f002 fead 	bl	8003c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ee6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000eea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	4619      	mov	r1, r3
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f00:	f002 fd2e 	bl	8003960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000f04:	2338      	movs	r3, #56	@ 0x38
 8000f06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	4619      	mov	r1, r3
 8000f18:	480d      	ldr	r0, [pc, #52]	@ (8000f50 <MX_GPIO_Init+0xa8>)
 8000f1a:	f002 fd21 	bl	8003960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f1e:	2340      	movs	r3, #64	@ 0x40
 8000f20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f22:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4807      	ldr	r0, [pc, #28]	@ (8000f50 <MX_GPIO_Init+0xa8>)
 8000f32:	f002 fd15 	bl	8003960 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2017      	movs	r0, #23
 8000f3c:	f002 fad9 	bl	80034f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f40:	2017      	movs	r0, #23
 8000f42:	f002 faf0 	bl	8003526 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	48000400 	.word	0x48000400

08000f54 <write_to_flash>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef write_to_flash(uint32_t address, uint16_t data) {
 8000f54:	b5b0      	push	{r4, r5, r7, lr}
 8000f56:	b08a      	sub	sp, #40	@ 0x28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;

	// Validate address: must be within flash range and 8-byte aligned for double-word write
	if (address < FLASH_BASE || address >= (FLASH_BASE + FLASH_SIZE)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000f66:	d30e      	bcc.n	8000f86 <write_to_flash+0x32>
 8000f68:	4b37      	ldr	r3, [pc, #220]	@ (8001048 <write_to_flash+0xf4>)
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	029a      	lsls	r2, r3, #10
 8000f6e:	4b37      	ldr	r3, [pc, #220]	@ (800104c <write_to_flash+0xf8>)
 8000f70:	4013      	ands	r3, r2
 8000f72:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d204      	bcs.n	8000f86 <write_to_flash+0x32>
			|| (address % 8 != 0)) {
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <write_to_flash+0x36>
		return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e05a      	b.n	8001040 <write_to_flash+0xec>
	}

	// Unlock flash
	status = HAL_FLASH_Unlock();
 8000f8a:	f002 fb55 	bl	8003638 <HAL_FLASH_Unlock>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (status != HAL_OK) {
 8000f94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <write_to_flash+0x4e>
		return status;
 8000f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fa0:	e04e      	b.n	8001040 <write_to_flash+0xec>
	}

	// Erase the page containing the address
	FLASH_EraseInitTypeDef erase_init = { .TypeErase = FLASH_TYPEERASE_PAGES,
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	60fb      	str	r3, [r7, #12]
			.Page = (address - FLASH_BASE) / FLASH_PAGE_SIZE, // Calculate page number
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8000fac:	0b1b      	lsrs	r3, r3, #12
	FLASH_EraseInitTypeDef erase_init = { .TypeErase = FLASH_TYPEERASE_PAGES,
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
			.NbPages = 1 };
	uint32_t page_error;
	status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8000fb4:	f107 0208 	add.w	r2, r7, #8
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f002 fc0a 	bl	80037d8 <HAL_FLASHEx_Erase>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (status != HAL_OK || page_error != 0xFFFFFFFF) {
 8000fca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d103      	bne.n	8000fda <write_to_flash+0x86>
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd8:	d003      	beq.n	8000fe2 <write_to_flash+0x8e>
		HAL_FLASH_Lock(); // Lock before returning on error
 8000fda:	f002 fb4f 	bl	800367c <HAL_FLASH_Lock>
		return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e02e      	b.n	8001040 <write_to_flash+0xec>
	}

	// Clear pending error flags
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8001050 <write_to_flash+0xfc>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8001050 <write_to_flash+0xfc>)
 8000fe8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8000fec:	6193      	str	r3, [r2, #24]
 8000fee:	4b18      	ldr	r3, [pc, #96]	@ (8001050 <write_to_flash+0xfc>)
 8000ff0:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 8000ff4:	611a      	str	r2, [r3, #16]

	// Prepare 64-bit data for double-word programming
	uint64_t data_to_write = (uint64_t) data;
 8000ff6:	887b      	ldrh	r3, [r7, #2]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	461c      	mov	r4, r3
 8000ffc:	4615      	mov	r5, r2
 8000ffe:	e9c7 4506 	strd	r4, r5, [r7, #24]

	// Program the flash
	status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address,
 8001002:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	2001      	movs	r0, #1
 800100a:	f002 fad1 	bl	80035b0 <HAL_FLASH_Program>
 800100e:	4603      	mov	r3, r0
 8001010:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			data_to_write);
	if (status != HAL_OK) {
 8001014:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001018:	2b00      	cmp	r3, #0
 800101a:	d004      	beq.n	8001026 <write_to_flash+0xd2>
		HAL_FLASH_Lock(); // Lock before returning on error
 800101c:	f002 fb2e 	bl	800367c <HAL_FLASH_Lock>
		return status;
 8001020:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001024:	e00c      	b.n	8001040 <write_to_flash+0xec>
	}

	// Lock flash
	status = HAL_FLASH_Lock();
 8001026:	f002 fb29 	bl	800367c <HAL_FLASH_Lock>
 800102a:	4603      	mov	r3, r0
 800102c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (status != HAL_OK) {
 8001030:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <write_to_flash+0xea>
		return status;
 8001038:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800103c:	e000      	b.n	8001040 <write_to_flash+0xec>
	}

	return HAL_OK;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3728      	adds	r7, #40	@ 0x28
 8001044:	46bd      	mov	sp, r7
 8001046:	bdb0      	pop	{r4, r5, r7, pc}
 8001048:	1fff75e0 	.word	0x1fff75e0
 800104c:	001ffc00 	.word	0x001ffc00
 8001050:	58004000 	.word	0x58004000

08001054 <read_from_flash>:


uint16_t read_from_flash(uint32_t address) {
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
    // Validate address
    if (address < FLASH_BASE ||
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001062:	d30e      	bcc.n	8001082 <read_from_flash+0x2e>
        address >= (FLASH_BASE + FLASH_SIZE) ||
 8001064:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <read_from_flash+0x44>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	029a      	lsls	r2, r3, #10
 800106a:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <read_from_flash+0x48>)
 800106c:	4013      	ands	r3, r2
 800106e:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
    if (address < FLASH_BASE ||
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	d204      	bcs.n	8001082 <read_from_flash+0x2e>
        (address % 2 != 0)) {
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f003 0301 	and.w	r3, r3, #1
        address >= (FLASH_BASE + FLASH_SIZE) ||
 800107e:	2b00      	cmp	r3, #0
 8001080:	d002      	beq.n	8001088 <read_from_flash+0x34>
        return 0xFFFF;  // or some error code
 8001082:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001086:	e001      	b.n	800108c <read_from_flash+0x38>
    }

    // Return the 16-bit value directly
    return *(uint16_t*)address;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	881b      	ldrh	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	1fff75e0 	.word	0x1fff75e0
 800109c:	001ffc00 	.word	0x001ffc00

080010a0 <Software_Reset>:
		tx_buffer[2 * i] = (cell_mv[i] >> 8) & 0xFF;
		tx_buffer[2 * i + 1] = cell_mv[i] & 0xFF;
	}
}

void Software_Reset(void) {
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
	// Write the reset request to AIRCR
	SCB->AIRCR = (0x5FA << SCB_AIRCR_VECTKEY_Pos)   // Key to allow write
 80010a4:	4b02      	ldr	r3, [pc, #8]	@ (80010b0 <Software_Reset+0x10>)
 80010a6:	4a03      	ldr	r2, [pc, #12]	@ (80010b4 <Software_Reset+0x14>)
 80010a8:	60da      	str	r2, [r3, #12]
	| SCB_AIRCR_SYSRESETREQ_Msk;       // Request system reset

	// Wait for the reset to occur
	while (1)
 80010aa:	bf00      	nop
 80010ac:	e7fd      	b.n	80010aa <Software_Reset+0xa>
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00
 80010b4:	05fa0004 	.word	0x05fa0004

080010b8 <get_voltage>:
		;
}

void get_voltage(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
	uint8_t ret = HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80010be:	217f      	movs	r1, #127	@ 0x7f
 80010c0:	4862      	ldr	r0, [pc, #392]	@ (800124c <get_voltage+0x194>)
 80010c2:	f002 f879 	bl	80031b8 <HAL_ADCEx_Calibration_Start>
 80010c6:	4603      	mov	r3, r0
 80010c8:	70fb      	strb	r3, [r7, #3]
	if (ret != HAL_OK) {
 80010ca:	78fb      	ldrb	r3, [r7, #3]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <get_voltage+0x1c>
		Error_Handler();
 80010d0:	f000 fb02 	bl	80016d8 <Error_Handler>
	}

	HAL_ADC_Start(&hadc1);
 80010d4:	485d      	ldr	r0, [pc, #372]	@ (800124c <get_voltage+0x194>)
 80010d6:	f001 f9c5 	bl	8002464 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 80010da:	2164      	movs	r1, #100	@ 0x64
 80010dc:	485b      	ldr	r0, [pc, #364]	@ (800124c <get_voltage+0x194>)
 80010de:	f001 fa48 	bl	8002572 <HAL_ADC_PollForConversion>
	cell_voltages[0] = HAL_ADC_GetValue(&hadc1);
 80010e2:	485a      	ldr	r0, [pc, #360]	@ (800124c <get_voltage+0x194>)
 80010e4:	f001 fad2 	bl	800268c <HAL_ADC_GetValue>
 80010e8:	ee07 0a90 	vmov	s15, r0
 80010ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010f0:	4b57      	ldr	r3, [pc, #348]	@ (8001250 <get_voltage+0x198>)
 80010f2:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 80010f6:	4855      	ldr	r0, [pc, #340]	@ (800124c <get_voltage+0x194>)
 80010f8:	f001 fa08 	bl	800250c <HAL_ADC_Stop>

	HAL_ADC_Start(&hadc1);
 80010fc:	4853      	ldr	r0, [pc, #332]	@ (800124c <get_voltage+0x194>)
 80010fe:	f001 f9b1 	bl	8002464 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8001102:	2164      	movs	r1, #100	@ 0x64
 8001104:	4851      	ldr	r0, [pc, #324]	@ (800124c <get_voltage+0x194>)
 8001106:	f001 fa34 	bl	8002572 <HAL_ADC_PollForConversion>
	cell_voltages[1] = HAL_ADC_GetValue(&hadc1);
 800110a:	4850      	ldr	r0, [pc, #320]	@ (800124c <get_voltage+0x194>)
 800110c:	f001 fabe 	bl	800268c <HAL_ADC_GetValue>
 8001110:	ee07 0a90 	vmov	s15, r0
 8001114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001118:	4b4d      	ldr	r3, [pc, #308]	@ (8001250 <get_voltage+0x198>)
 800111a:	edc3 7a01 	vstr	s15, [r3, #4]
	HAL_ADC_Stop(&hadc1);
 800111e:	484b      	ldr	r0, [pc, #300]	@ (800124c <get_voltage+0x194>)
 8001120:	f001 f9f4 	bl	800250c <HAL_ADC_Stop>

	HAL_ADC_Start(&hadc1);
 8001124:	4849      	ldr	r0, [pc, #292]	@ (800124c <get_voltage+0x194>)
 8001126:	f001 f99d 	bl	8002464 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 800112a:	2164      	movs	r1, #100	@ 0x64
 800112c:	4847      	ldr	r0, [pc, #284]	@ (800124c <get_voltage+0x194>)
 800112e:	f001 fa20 	bl	8002572 <HAL_ADC_PollForConversion>
	cell_voltages[2] = HAL_ADC_GetValue(&hadc1);
 8001132:	4846      	ldr	r0, [pc, #280]	@ (800124c <get_voltage+0x194>)
 8001134:	f001 faaa 	bl	800268c <HAL_ADC_GetValue>
 8001138:	ee07 0a90 	vmov	s15, r0
 800113c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001140:	4b43      	ldr	r3, [pc, #268]	@ (8001250 <get_voltage+0x198>)
 8001142:	edc3 7a02 	vstr	s15, [r3, #8]
	HAL_ADC_Stop(&hadc1);
 8001146:	4841      	ldr	r0, [pc, #260]	@ (800124c <get_voltage+0x194>)
 8001148:	f001 f9e0 	bl	800250c <HAL_ADC_Stop>

	HAL_ADC_Start(&hadc1);
 800114c:	483f      	ldr	r0, [pc, #252]	@ (800124c <get_voltage+0x194>)
 800114e:	f001 f989 	bl	8002464 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8001152:	2164      	movs	r1, #100	@ 0x64
 8001154:	483d      	ldr	r0, [pc, #244]	@ (800124c <get_voltage+0x194>)
 8001156:	f001 fa0c 	bl	8002572 <HAL_ADC_PollForConversion>
	cell_voltages[3] = HAL_ADC_GetValue(&hadc1);
 800115a:	483c      	ldr	r0, [pc, #240]	@ (800124c <get_voltage+0x194>)
 800115c:	f001 fa96 	bl	800268c <HAL_ADC_GetValue>
 8001160:	ee07 0a90 	vmov	s15, r0
 8001164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001168:	4b39      	ldr	r3, [pc, #228]	@ (8001250 <get_voltage+0x198>)
 800116a:	edc3 7a03 	vstr	s15, [r3, #12]
	HAL_ADC_Stop(&hadc1);
 800116e:	4837      	ldr	r0, [pc, #220]	@ (800124c <get_voltage+0x194>)
 8001170:	f001 f9cc 	bl	800250c <HAL_ADC_Stop>

	HAL_ADC_Start(&hadc1);
 8001174:	4835      	ldr	r0, [pc, #212]	@ (800124c <get_voltage+0x194>)
 8001176:	f001 f975 	bl	8002464 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 800117a:	2164      	movs	r1, #100	@ 0x64
 800117c:	4833      	ldr	r0, [pc, #204]	@ (800124c <get_voltage+0x194>)
 800117e:	f001 f9f8 	bl	8002572 <HAL_ADC_PollForConversion>
	cell_voltages[4] = HAL_ADC_GetValue(&hadc1);
 8001182:	4832      	ldr	r0, [pc, #200]	@ (800124c <get_voltage+0x194>)
 8001184:	f001 fa82 	bl	800268c <HAL_ADC_GetValue>
 8001188:	ee07 0a90 	vmov	s15, r0
 800118c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001190:	4b2f      	ldr	r3, [pc, #188]	@ (8001250 <get_voltage+0x198>)
 8001192:	edc3 7a04 	vstr	s15, [r3, #16]
	HAL_ADC_Stop(&hadc1);
 8001196:	482d      	ldr	r0, [pc, #180]	@ (800124c <get_voltage+0x194>)
 8001198:	f001 f9b8 	bl	800250c <HAL_ADC_Stop>

	HAL_ADC_Start(&hadc1);
 800119c:	482b      	ldr	r0, [pc, #172]	@ (800124c <get_voltage+0x194>)
 800119e:	f001 f961 	bl	8002464 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 80011a2:	2164      	movs	r1, #100	@ 0x64
 80011a4:	4829      	ldr	r0, [pc, #164]	@ (800124c <get_voltage+0x194>)
 80011a6:	f001 f9e4 	bl	8002572 <HAL_ADC_PollForConversion>
	cell_voltages[5] = HAL_ADC_GetValue(&hadc1);
 80011aa:	4828      	ldr	r0, [pc, #160]	@ (800124c <get_voltage+0x194>)
 80011ac:	f001 fa6e 	bl	800268c <HAL_ADC_GetValue>
 80011b0:	ee07 0a90 	vmov	s15, r0
 80011b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011b8:	4b25      	ldr	r3, [pc, #148]	@ (8001250 <get_voltage+0x198>)
 80011ba:	edc3 7a05 	vstr	s15, [r3, #20]
	HAL_ADC_Stop(&hadc1);
 80011be:	4823      	ldr	r0, [pc, #140]	@ (800124c <get_voltage+0x194>)
 80011c0:	f001 f9a4 	bl	800250c <HAL_ADC_Stop>

	for (int i = 0; i <= 5; i++) {
 80011c4:	2300      	movs	r3, #0
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	e01b      	b.n	8001202 <get_voltage+0x14a>
		cell_mv[i] = (cell_voltages[i] / 4095) * 2 * 2500;
 80011ca:	4a21      	ldr	r2, [pc, #132]	@ (8001250 <get_voltage+0x198>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	ed93 7a00 	vldr	s14, [r3]
 80011d6:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001254 <get_voltage+0x19c>
 80011da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011e2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001258 <get_voltage+0x1a0>
 80011e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011ee:	ee17 3a90 	vmov	r3, s15
 80011f2:	b299      	uxth	r1, r3
 80011f4:	4a19      	ldr	r2, [pc, #100]	@ (800125c <get_voltage+0x1a4>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i <= 5; i++) {
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3301      	adds	r3, #1
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b05      	cmp	r3, #5
 8001206:	dde0      	ble.n	80011ca <get_voltage+0x112>
	}
	present_net_mv = cell_mv[0] + cell_mv[1] + cell_mv[2] + cell_mv[3]
 8001208:	4b14      	ldr	r3, [pc, #80]	@ (800125c <get_voltage+0x1a4>)
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	b29a      	uxth	r2, r3
 800120e:	4b13      	ldr	r3, [pc, #76]	@ (800125c <get_voltage+0x1a4>)
 8001210:	885b      	ldrh	r3, [r3, #2]
 8001212:	b29b      	uxth	r3, r3
 8001214:	4413      	add	r3, r2
 8001216:	b29a      	uxth	r2, r3
 8001218:	4b10      	ldr	r3, [pc, #64]	@ (800125c <get_voltage+0x1a4>)
 800121a:	889b      	ldrh	r3, [r3, #4]
 800121c:	b29b      	uxth	r3, r3
 800121e:	4413      	add	r3, r2
 8001220:	b29a      	uxth	r2, r3
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <get_voltage+0x1a4>)
 8001224:	88db      	ldrh	r3, [r3, #6]
 8001226:	b29b      	uxth	r3, r3
 8001228:	4413      	add	r3, r2
 800122a:	b29a      	uxth	r2, r3
			+ cell_mv[4] + cell_mv[5];
 800122c:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <get_voltage+0x1a4>)
 800122e:	891b      	ldrh	r3, [r3, #8]
 8001230:	b29b      	uxth	r3, r3
 8001232:	4413      	add	r3, r2
 8001234:	b29a      	uxth	r2, r3
 8001236:	4b09      	ldr	r3, [pc, #36]	@ (800125c <get_voltage+0x1a4>)
 8001238:	895b      	ldrh	r3, [r3, #10]
 800123a:	b29b      	uxth	r3, r3
 800123c:	4413      	add	r3, r2
 800123e:	b29a      	uxth	r2, r3
	present_net_mv = cell_mv[0] + cell_mv[1] + cell_mv[2] + cell_mv[3]
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <get_voltage+0x1a8>)
 8001242:	801a      	strh	r2, [r3, #0]
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200001d8 	.word	0x200001d8
 8001250:	20000354 	.word	0x20000354
 8001254:	457ff000 	.word	0x457ff000
 8001258:	451c4000 	.word	0x451c4000
 800125c:	20000344 	.word	0x20000344
 8001260:	2000036a 	.word	0x2000036a

08001264 <display>:

void display(void) {
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0


		if (present_net_mv > cell_nominal_mv*6 && present_net_mv < cell_charged_mv*6) {
 8001268:	4b51      	ldr	r3, [pc, #324]	@ (80013b0 <display+0x14c>)
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	b29b      	uxth	r3, r3
 800126e:	4619      	mov	r1, r3
 8001270:	4b50      	ldr	r3, [pc, #320]	@ (80013b4 <display+0x150>)
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	b29b      	uxth	r3, r3
 8001276:	461a      	mov	r2, r3
 8001278:	4613      	mov	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4413      	add	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4299      	cmp	r1, r3
 8001282:	dd1d      	ble.n	80012c0 <display+0x5c>
 8001284:	4b4a      	ldr	r3, [pc, #296]	@ (80013b0 <display+0x14c>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	b29b      	uxth	r3, r3
 800128a:	4619      	mov	r1, r3
 800128c:	4b4a      	ldr	r3, [pc, #296]	@ (80013b8 <display+0x154>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	b29b      	uxth	r3, r3
 8001292:	461a      	mov	r2, r3
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	4299      	cmp	r1, r3
 800129e:	da0f      	bge.n	80012c0 <display+0x5c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80012a0:	2201      	movs	r2, #1
 80012a2:	2120      	movs	r1, #32
 80012a4:	4845      	ldr	r0, [pc, #276]	@ (80013bc <display+0x158>)
 80012a6:	f002 fccb 	bl	8003c40 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	2110      	movs	r1, #16
 80012ae:	4843      	ldr	r0, [pc, #268]	@ (80013bc <display+0x158>)
 80012b0:	f002 fcc6 	bl	8003c40 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2108      	movs	r1, #8
 80012b8:	4840      	ldr	r0, [pc, #256]	@ (80013bc <display+0x158>)
 80012ba:	f002 fcc1 	bl	8003c40 <HAL_GPIO_WritePin>
 80012be:	e075      	b.n	80013ac <display+0x148>

		} else if (present_net_mv < cell_nominal_mv*6
 80012c0:	4b3b      	ldr	r3, [pc, #236]	@ (80013b0 <display+0x14c>)
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	4619      	mov	r1, r3
 80012c8:	4b3a      	ldr	r3, [pc, #232]	@ (80013b4 <display+0x150>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	461a      	mov	r2, r3
 80012d0:	4613      	mov	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4299      	cmp	r1, r3
 80012da:	da1d      	bge.n	8001318 <display+0xb4>
				&& present_net_mv > cell_discharged_mv*6) {
 80012dc:	4b34      	ldr	r3, [pc, #208]	@ (80013b0 <display+0x14c>)
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	4619      	mov	r1, r3
 80012e4:	4b36      	ldr	r3, [pc, #216]	@ (80013c0 <display+0x15c>)
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	461a      	mov	r2, r3
 80012ec:	4613      	mov	r3, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4413      	add	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	4299      	cmp	r1, r3
 80012f6:	dd0f      	ble.n	8001318 <display+0xb4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80012f8:	2201      	movs	r2, #1
 80012fa:	2120      	movs	r1, #32
 80012fc:	482f      	ldr	r0, [pc, #188]	@ (80013bc <display+0x158>)
 80012fe:	f002 fc9f 	bl	8003c40 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	2110      	movs	r1, #16
 8001306:	482d      	ldr	r0, [pc, #180]	@ (80013bc <display+0x158>)
 8001308:	f002 fc9a 	bl	8003c40 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 800130c:	2201      	movs	r2, #1
 800130e:	2108      	movs	r1, #8
 8001310:	482a      	ldr	r0, [pc, #168]	@ (80013bc <display+0x158>)
 8001312:	f002 fc95 	bl	8003c40 <HAL_GPIO_WritePin>
 8001316:	e049      	b.n	80013ac <display+0x148>
		} else if (present_net_mv < cell_discharged_mv*6) {
 8001318:	4b25      	ldr	r3, [pc, #148]	@ (80013b0 <display+0x14c>)
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	b29b      	uxth	r3, r3
 800131e:	4619      	mov	r1, r3
 8001320:	4b27      	ldr	r3, [pc, #156]	@ (80013c0 <display+0x15c>)
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	b29b      	uxth	r3, r3
 8001326:	461a      	mov	r2, r3
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4299      	cmp	r1, r3
 8001332:	da0f      	bge.n	8001354 <display+0xf0>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8001334:	2200      	movs	r2, #0
 8001336:	2120      	movs	r1, #32
 8001338:	4820      	ldr	r0, [pc, #128]	@ (80013bc <display+0x158>)
 800133a:	f002 fc81 	bl	8003c40 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	2110      	movs	r1, #16
 8001342:	481e      	ldr	r0, [pc, #120]	@ (80013bc <display+0x158>)
 8001344:	f002 fc7c 	bl	8003c40 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8001348:	2201      	movs	r2, #1
 800134a:	2108      	movs	r1, #8
 800134c:	481b      	ldr	r0, [pc, #108]	@ (80013bc <display+0x158>)
 800134e:	f002 fc77 	bl	8003c40 <HAL_GPIO_WritePin>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
		}
	}
 8001352:	e02b      	b.n	80013ac <display+0x148>
		} else if (present_net_mv == cell_charged_mv*6 || present_net_mv > cell_charged_mv*6 - 120)
 8001354:	4b16      	ldr	r3, [pc, #88]	@ (80013b0 <display+0x14c>)
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	b29b      	uxth	r3, r3
 800135a:	4619      	mov	r1, r3
 800135c:	4b16      	ldr	r3, [pc, #88]	@ (80013b8 <display+0x154>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	b29b      	uxth	r3, r3
 8001362:	461a      	mov	r2, r3
 8001364:	4613      	mov	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4413      	add	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4299      	cmp	r1, r3
 800136e:	d00d      	beq.n	800138c <display+0x128>
 8001370:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <display+0x154>)
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	b29b      	uxth	r3, r3
 8001376:	461a      	mov	r2, r3
 8001378:	4613      	mov	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	3b77      	subs	r3, #119	@ 0x77
 8001382:	4a0b      	ldr	r2, [pc, #44]	@ (80013b0 <display+0x14c>)
 8001384:	8812      	ldrh	r2, [r2, #0]
 8001386:	b292      	uxth	r2, r2
 8001388:	4293      	cmp	r3, r2
 800138a:	dc0f      	bgt.n	80013ac <display+0x148>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2120      	movs	r1, #32
 8001390:	480a      	ldr	r0, [pc, #40]	@ (80013bc <display+0x158>)
 8001392:	f002 fc55 	bl	8003c40 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001396:	2201      	movs	r2, #1
 8001398:	2110      	movs	r1, #16
 800139a:	4808      	ldr	r0, [pc, #32]	@ (80013bc <display+0x158>)
 800139c:	f002 fc50 	bl	8003c40 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2108      	movs	r1, #8
 80013a4:	4805      	ldr	r0, [pc, #20]	@ (80013bc <display+0x158>)
 80013a6:	f002 fc4b 	bl	8003c40 <HAL_GPIO_WritePin>
	}
 80013aa:	e7ff      	b.n	80013ac <display+0x148>
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	2000036a 	.word	0x2000036a
 80013b4:	2000034e 	.word	0x2000034e
 80013b8:	20000350 	.word	0x20000350
 80013bc:	48000400 	.word	0x48000400
 80013c0:	20000352 	.word	0x20000352

080013c4 <stop_display>:

void stop_display(void) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2120      	movs	r1, #32
 80013cc:	4807      	ldr	r0, [pc, #28]	@ (80013ec <stop_display+0x28>)
 80013ce:	f002 fc37 	bl	8003c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2110      	movs	r1, #16
 80013d6:	4805      	ldr	r0, [pc, #20]	@ (80013ec <stop_display+0x28>)
 80013d8:	f002 fc32 	bl	8003c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	2108      	movs	r1, #8
 80013e0:	4802      	ldr	r0, [pc, #8]	@ (80013ec <stop_display+0x28>)
 80013e2:	f002 fc2d 	bl	8003c40 <HAL_GPIO_WritePin>
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	48000400 	.word	0x48000400

080013f0 <update_state>:

uint8_t update_state(void) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	last_net_mv = read_from_flash(last_voltages_base_addr);
 80013f4:	4b19      	ldr	r3, [pc, #100]	@ (800145c <update_state+0x6c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fe2b 	bl	8001054 <read_from_flash>
 80013fe:	4603      	mov	r3, r0
 8001400:	461a      	mov	r2, r3
 8001402:	4b17      	ldr	r3, [pc, #92]	@ (8001460 <update_state+0x70>)
 8001404:	801a      	strh	r2, [r3, #0]
	get_voltage();
 8001406:	f7ff fe57 	bl	80010b8 <get_voltage>
	if (present_net_mv > last_net_mv + 10) { //charging
 800140a:	4b16      	ldr	r3, [pc, #88]	@ (8001464 <update_state+0x74>)
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	b29b      	uxth	r3, r3
 8001410:	461a      	mov	r2, r3
 8001412:	4b13      	ldr	r3, [pc, #76]	@ (8001460 <update_state+0x70>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	b29b      	uxth	r3, r3
 8001418:	330a      	adds	r3, #10
 800141a:	429a      	cmp	r2, r3
 800141c:	dd06      	ble.n	800142c <update_state+0x3c>
		charge_state = 1;
 800141e:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <update_state+0x78>)
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]
		return charge_state;
 8001424:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <update_state+0x78>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	e015      	b.n	8001458 <update_state+0x68>
	} else if (present_net_mv + 10 < last_net_mv) { //discharging
 800142c:	4b0d      	ldr	r3, [pc, #52]	@ (8001464 <update_state+0x74>)
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	b29b      	uxth	r3, r3
 8001432:	330a      	adds	r3, #10
 8001434:	4a0a      	ldr	r2, [pc, #40]	@ (8001460 <update_state+0x70>)
 8001436:	8812      	ldrh	r2, [r2, #0]
 8001438:	b292      	uxth	r2, r2
 800143a:	4293      	cmp	r3, r2
 800143c:	da06      	bge.n	800144c <update_state+0x5c>
		charge_state = 2;
 800143e:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <update_state+0x78>)
 8001440:	2202      	movs	r2, #2
 8001442:	701a      	strb	r2, [r3, #0]
		return charge_state;
 8001444:	4b08      	ldr	r3, [pc, #32]	@ (8001468 <update_state+0x78>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	e005      	b.n	8001458 <update_state+0x68>
	} else { //Idle
		charge_state = 0;
 800144c:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <update_state+0x78>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
		return charge_state;
 8001452:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <update_state+0x78>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b2db      	uxtb	r3, r3
	}
}
 8001458:	4618      	mov	r0, r3
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000008 	.word	0x20000008
 8001460:	2000036c 	.word	0x2000036c
 8001464:	2000036a 	.word	0x2000036a
 8001468:	20000368 	.word	0x20000368

0800146c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800147c:	d123      	bne.n	80014c6 <HAL_TIM_PeriodElapsedCallback+0x5a>

		if (connection_status == 1) {
 800147e:	4b14      	ldr	r3, [pc, #80]	@ (80014d0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b01      	cmp	r3, #1
 8001486:	d10a      	bne.n	800149e <HAL_TIM_PeriodElapsedCallback+0x32>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 8001488:	2201      	movs	r2, #1
 800148a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800148e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001492:	f002 fbd5 	bl	8003c40 <HAL_GPIO_WritePin>
			count = 0;
 8001496:	4b0f      	ldr	r3, [pc, #60]	@ (80014d4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	e00a      	b.n	80014b4 <HAL_TIM_PeriodElapsedCallback+0x48>
		} else {
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 800149e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a6:	f002 fbe3 	bl	8003c70 <HAL_GPIO_TogglePin>
			count++;
 80014aa:	4b0a      	ldr	r3, [pc, #40]	@ (80014d4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	3301      	adds	r3, #1
 80014b0:	4a08      	ldr	r2, [pc, #32]	@ (80014d4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80014b2:	6013      	str	r3, [r2, #0]
		}
		if (count >= 10) {
 80014b4:	4b07      	ldr	r3, [pc, #28]	@ (80014d4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b09      	cmp	r3, #9
 80014ba:	d904      	bls.n	80014c6 <HAL_TIM_PeriodElapsedCallback+0x5a>
			stop_display();
 80014bc:	f7ff ff82 	bl	80013c4 <stop_display>
			sleep_flag = 1;
 80014c0:	4b05      	ldr	r3, [pc, #20]	@ (80014d8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200004a4 	.word	0x200004a4
 80014d4:	2000033c 	.word	0x2000033c
 80014d8:	20000340 	.word	0x20000340

080014dc <Flash_WriteString>:


void Flash_WriteString(uint32_t address, const char* str) {
 80014dc:	b5b0      	push	{r4, r5, r7, lr}
 80014de:	b08a      	sub	sp, #40	@ 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
    uint64_t data;
    uint32_t i;

    if (strlen(str) > MAX_STRING_LEN) return;
 80014e6:	6838      	ldr	r0, [r7, #0]
 80014e8:	f7fe fe4a 	bl	8000180 <strlen>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b20      	cmp	r3, #32
 80014f0:	d84d      	bhi.n	800158e <Flash_WriteString+0xb2>

    /* Erase flash page */
    FLASH_EraseInitTypeDef eraseInit = {FLASH_TYPEERASE_PAGES, (address - FLASH_BASE) / 0x1000, 1};
 80014f2:	2302      	movs	r3, #2
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80014fc:	0b1b      	lsrs	r3, r3, #12
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	2301      	movs	r3, #1
 8001502:	617b      	str	r3, [r7, #20]
    uint32_t pageError;
    HAL_FLASH_Unlock();
 8001504:	f002 f898 	bl	8003638 <HAL_FLASH_Unlock>
    HAL_FLASHEx_Erase(&eraseInit, &pageError);
 8001508:	f107 0208 	add.w	r2, r7, #8
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	4611      	mov	r1, r2
 8001512:	4618      	mov	r0, r3
 8001514:	f002 f960 	bl	80037d8 <HAL_FLASHEx_Erase>

    /* Write string */
    for (i = 0; i < strlen(str) + 1; i += 8) {
 8001518:	2300      	movs	r3, #0
 800151a:	627b      	str	r3, [r7, #36]	@ 0x24
 800151c:	e02c      	b.n	8001578 <Flash_WriteString+0x9c>
        memset(&data, 0xFF, sizeof(data));
 800151e:	f04f 32ff 	mov.w	r2, #4294967295
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
 8001526:	e9c7 2306 	strd	r2, r3, [r7, #24]
        memcpy(&data, &str[i], (i + 8 <= strlen(str) + 1) ? 8 : strlen(str) + 1 - i);
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152e:	18d5      	adds	r5, r2, r3
 8001530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001532:	f103 0408 	add.w	r4, r3, #8
 8001536:	6838      	ldr	r0, [r7, #0]
 8001538:	f7fe fe22 	bl	8000180 <strlen>
 800153c:	4603      	mov	r3, r0
 800153e:	3301      	adds	r3, #1
 8001540:	429c      	cmp	r4, r3
 8001542:	d907      	bls.n	8001554 <Flash_WriteString+0x78>
 8001544:	6838      	ldr	r0, [r7, #0]
 8001546:	f7fe fe1b 	bl	8000180 <strlen>
 800154a:	4602      	mov	r2, r0
 800154c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	3301      	adds	r3, #1
 8001552:	e000      	b.n	8001556 <Flash_WriteString+0x7a>
 8001554:	2308      	movs	r3, #8
 8001556:	f107 0018 	add.w	r0, r7, #24
 800155a:	461a      	mov	r2, r3
 800155c:	4629      	mov	r1, r5
 800155e:	f009 fb7f 	bl	800ac60 <memcpy>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address + i, data);
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001566:	18d1      	adds	r1, r2, r3
 8001568:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800156c:	2001      	movs	r0, #1
 800156e:	f002 f81f 	bl	80035b0 <HAL_FLASH_Program>
    for (i = 0; i < strlen(str) + 1; i += 8) {
 8001572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001574:	3308      	adds	r3, #8
 8001576:	627b      	str	r3, [r7, #36]	@ 0x24
 8001578:	6838      	ldr	r0, [r7, #0]
 800157a:	f7fe fe01 	bl	8000180 <strlen>
 800157e:	4603      	mov	r3, r0
 8001580:	3301      	adds	r3, #1
 8001582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001584:	429a      	cmp	r2, r3
 8001586:	d3ca      	bcc.n	800151e <Flash_WriteString+0x42>
    }
    HAL_FLASH_Lock();
 8001588:	f002 f878 	bl	800367c <HAL_FLASH_Lock>
 800158c:	e000      	b.n	8001590 <Flash_WriteString+0xb4>
    if (strlen(str) > MAX_STRING_LEN) return;
 800158e:	bf00      	nop
}
 8001590:	3728      	adds	r7, #40	@ 0x28
 8001592:	46bd      	mov	sp, r7
 8001594:	bdb0      	pop	{r4, r5, r7, pc}

08001596 <HAL_GPIO_EXTI_Callback>:
    buffer[i] = '\0';
}



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_6) {
 80015a0:	88fb      	ldrh	r3, [r7, #6]
 80015a2:	2b40      	cmp	r3, #64	@ 0x40
 80015a4:	d105      	bne.n	80015b2 <HAL_GPIO_EXTI_Callback+0x1c>
		HAL_ResumeTick();       // Resume SysTick interrupt
 80015a6:	f000 fbdf 	bl	8001d68 <HAL_ResumeTick>
		SystemClock_Config();
 80015aa:	f7ff f9ed 	bl	8000988 <SystemClock_Config>
		Software_Reset();
 80015ae:	f7ff fd77 	bl	80010a0 <Software_Reset>
	}
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <RTC_Wakeup_After>:
}



void RTC_Wakeup_After(uint32_t period_seconds)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b096      	sub	sp, #88	@ 0x58
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
    RTC_AlarmTypeDef sAlarm = {0};
 80015c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c8:	2228      	movs	r2, #40	@ 0x28
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f009 fb1a 	bl	800ac06 <memset>
    RTC_TimeTypeDef sTime = {0};
 80015d2:	f107 0310 	add.w	r3, r7, #16
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
 80015e0:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]

    // Get current time and date
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80015e6:	f107 0310 	add.w	r3, r7, #16
 80015ea:	2200      	movs	r2, #0
 80015ec:	4619      	mov	r1, r3
 80015ee:	4832      	ldr	r0, [pc, #200]	@ (80016b8 <RTC_Wakeup_After+0xfc>)
 80015f0:	f004 fcad 	bl	8005f4e <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	2200      	movs	r2, #0
 80015fa:	4619      	mov	r1, r3
 80015fc:	482e      	ldr	r0, [pc, #184]	@ (80016b8 <RTC_Wakeup_After+0xfc>)
 80015fe:	f004 fd8d 	bl	800611c <HAL_RTC_GetDate>

    // Calculate new seconds and minutes with overflow handling
    uint32_t total_seconds = sTime.Seconds + period_seconds;
 8001602:	7cbb      	ldrb	r3, [r7, #18]
 8001604:	461a      	mov	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	657b      	str	r3, [r7, #84]	@ 0x54
    sAlarm.AlarmTime.Seconds = total_seconds % 60;
 800160c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800160e:	4b2b      	ldr	r3, [pc, #172]	@ (80016bc <RTC_Wakeup_After+0x100>)
 8001610:	fba3 2301 	umull	r2, r3, r3, r1
 8001614:	095a      	lsrs	r2, r3, #5
 8001616:	4613      	mov	r3, r2
 8001618:	011b      	lsls	r3, r3, #4
 800161a:	1a9b      	subs	r3, r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	1aca      	subs	r2, r1, r3
 8001620:	b2d3      	uxtb	r3, r2
 8001622:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint32_t total_minutes = sTime.Minutes + (total_seconds / 60);
 8001626:	7c7b      	ldrb	r3, [r7, #17]
 8001628:	4619      	mov	r1, r3
 800162a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800162c:	4a23      	ldr	r2, [pc, #140]	@ (80016bc <RTC_Wakeup_After+0x100>)
 800162e:	fba2 2303 	umull	r2, r3, r2, r3
 8001632:	095b      	lsrs	r3, r3, #5
 8001634:	440b      	add	r3, r1
 8001636:	653b      	str	r3, [r7, #80]	@ 0x50
    sAlarm.AlarmTime.Minutes = total_minutes % 60;
 8001638:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800163a:	4b20      	ldr	r3, [pc, #128]	@ (80016bc <RTC_Wakeup_After+0x100>)
 800163c:	fba3 2301 	umull	r2, r3, r3, r1
 8001640:	095a      	lsrs	r2, r3, #5
 8001642:	4613      	mov	r3, r2
 8001644:	011b      	lsls	r3, r3, #4
 8001646:	1a9b      	subs	r3, r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	1aca      	subs	r2, r1, r3
 800164c:	b2d3      	uxtb	r3, r2
 800164e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint32_t total_hours = sTime.Hours + (total_minutes / 60);
 8001652:	7c3b      	ldrb	r3, [r7, #16]
 8001654:	4619      	mov	r1, r3
 8001656:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001658:	4a18      	ldr	r2, [pc, #96]	@ (80016bc <RTC_Wakeup_After+0x100>)
 800165a:	fba2 2303 	umull	r2, r3, r2, r3
 800165e:	095b      	lsrs	r3, r3, #5
 8001660:	440b      	add	r3, r1
 8001662:	64fb      	str	r3, [r7, #76]	@ 0x4c
    sAlarm.AlarmTime.Hours = total_hours % 24;
 8001664:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001666:	4b16      	ldr	r3, [pc, #88]	@ (80016c0 <RTC_Wakeup_After+0x104>)
 8001668:	fba3 2301 	umull	r2, r3, r3, r1
 800166c:	091a      	lsrs	r2, r3, #4
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	1aca      	subs	r2, r1, r3
 8001678:	b2d3      	uxtb	r3, r2
 800167a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800167e:	2300      	movs	r3, #0
 8001680:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001684:	2300      	movs	r3, #0
 8001686:	633b      	str	r3, [r7, #48]	@ 0x30
    sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001688:	2300      	movs	r3, #0
 800168a:	637b      	str	r3, [r7, #52]	@ 0x34
    sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 800168c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001690:	63bb      	str	r3, [r7, #56]	@ 0x38
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001692:	2300      	movs	r3, #0
 8001694:	643b      	str	r3, [r7, #64]	@ 0x40
    sAlarm.AlarmDateWeekDay = sDate.Date;
 8001696:	7bbb      	ldrb	r3, [r7, #14]
 8001698:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    sAlarm.Alarm = RTC_ALARM_A;
 800169c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016a0:	64bb      	str	r3, [r7, #72]	@ 0x48

    // Set the alarm with interrupt
    HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 80016a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a6:	2200      	movs	r2, #0
 80016a8:	4619      	mov	r1, r3
 80016aa:	4803      	ldr	r0, [pc, #12]	@ (80016b8 <RTC_Wakeup_After+0xfc>)
 80016ac:	f004 fd86 	bl	80061bc <HAL_RTC_SetAlarm_IT>

    // Enter Stop Mode and wait for wakeup
}
 80016b0:	bf00      	nop
 80016b2:	3758      	adds	r7, #88	@ 0x58
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200002cc 	.word	0x200002cc
 80016bc:	88888889 	.word	0x88888889
 80016c0:	aaaaaaab 	.word	0xaaaaaaab

080016c4 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
   Software_Reset();// Wakeup event handler
 80016cc:	f7ff fce8 	bl	80010a0 <Software_Reset>
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016dc:	b672      	cpsid	i
}
 80016de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <Error_Handler+0x8>

080016e4 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80016e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <LL_RCC_DisableRTC>:
  * @brief  Disable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_DisableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_DisableRTC(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800170a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800170e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001712:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001716:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800171a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_AHB2_GRP1_EnableClock>:
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001730:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001734:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001736:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4313      	orrs	r3, r2
 800173e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001740:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001744:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4013      	ands	r3, r2
 800174a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800174c:	68fb      	ldr	r3, [r7, #12]
}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800175a:	b480      	push	{r7}
 800175c:	b085      	sub	sp, #20
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001762:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001766:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001768:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4313      	orrs	r3, r2
 8001770:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001772:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001776:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4013      	ands	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800177e:	68fb      	ldr	r3, [r7, #12]
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001794:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001798:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800179a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80017a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4013      	ands	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017b0:	68fb      	ldr	r3, [r7, #12]
}
 80017b2:	bf00      	nop
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80017c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017ca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017d4:	4013      	ands	r3, r2
 80017d6:	658b      	str	r3, [r1, #88]	@ 0x58
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80017e8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80017ec:	f7ff ffb5 	bl	800175a <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2100      	movs	r1, #0
 80017f4:	202e      	movs	r0, #46	@ 0x2e
 80017f6:	f001 fe7c 	bl	80034f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80017fa:	202e      	movs	r0, #46	@ 0x2e
 80017fc:	f001 fe93 	bl	8003526 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b09c      	sub	sp, #112	@ 0x70
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800181c:	f107 030c 	add.w	r3, r7, #12
 8001820:	2250      	movs	r2, #80	@ 0x50
 8001822:	2100      	movs	r1, #0
 8001824:	4618      	mov	r0, r3
 8001826:	f009 f9ee 	bl	800ac06 <memset>
  if(hadc->Instance==ADC1)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a1c      	ldr	r2, [pc, #112]	@ (80018a0 <HAL_ADC_MspInit+0x9c>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d131      	bne.n	8001898 <HAL_ADC_MspInit+0x94>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001834:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001838:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 800183a:	2306      	movs	r3, #6
 800183c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800183e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001842:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001844:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001848:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800184a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800184e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8001850:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001854:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001856:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800185a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800185c:	f107 030c 	add.w	r3, r7, #12
 8001860:	4618      	mov	r0, r3
 8001862:	f003 ff5a 	bl	800571a <HAL_RCCEx_PeriphCLKConfig>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 800186c:	f7ff ff34 	bl	80016d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001870:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001874:	f7ff ff58 	bl	8001728 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001878:	2001      	movs	r0, #1
 800187a:	f7ff ff55 	bl	8001728 <LL_AHB2_GRP1_EnableClock>
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800187e:	237e      	movs	r3, #126	@ 0x7e
 8001880:	65fb      	str	r3, [r7, #92]	@ 0x5c
                          |GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001882:	2303      	movs	r3, #3
 8001884:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800188e:	4619      	mov	r1, r3
 8001890:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001894:	f002 f864 	bl	8003960 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001898:	bf00      	nop
 800189a:	3770      	adds	r7, #112	@ 0x70
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	50040000 	.word	0x50040000

080018a4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b09c      	sub	sp, #112	@ 0x70
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	2250      	movs	r2, #80	@ 0x50
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f009 f99e 	bl	800ac06 <memset>
  if(hi2c->Instance==I2C1)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a1b      	ldr	r2, [pc, #108]	@ (800193c <HAL_I2C_MspInit+0x98>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d12e      	bne.n	8001932 <HAL_I2C_MspInit+0x8e>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018d4:	2304      	movs	r3, #4
 80018d6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018d8:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80018dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018de:	f107 030c 	add.w	r3, r7, #12
 80018e2:	4618      	mov	r0, r3
 80018e4:	f003 ff19 	bl	800571a <HAL_RCCEx_PeriphCLKConfig>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80018ee:	f7ff fef3 	bl	80016d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f2:	2002      	movs	r0, #2
 80018f4:	f7ff ff18 	bl	8001728 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018fe:	2312      	movs	r3, #18
 8001900:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800190a:	2304      	movs	r3, #4
 800190c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001912:	4619      	mov	r1, r3
 8001914:	480a      	ldr	r0, [pc, #40]	@ (8001940 <HAL_I2C_MspInit+0x9c>)
 8001916:	f002 f823 	bl	8003960 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800191a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800191e:	f7ff ff35 	bl	800178c <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	2100      	movs	r1, #0
 8001926:	201e      	movs	r0, #30
 8001928:	f001 fde3 	bl	80034f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800192c:	201e      	movs	r0, #30
 800192e:	f001 fdfa 	bl	8003526 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001932:	bf00      	nop
 8001934:	3770      	adds	r7, #112	@ 0x70
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40005400 	.word	0x40005400
 8001940:	48000400 	.word	0x48000400

08001944 <HAL_IPCC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hipcc: IPCC handle pointer
  * @retval None
  */
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0d      	ldr	r2, [pc, #52]	@ (8001988 <HAL_IPCC_MspInit+0x44>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d113      	bne.n	800197e <HAL_IPCC_MspInit+0x3a>
  {
    /* USER CODE BEGIN IPCC_MspInit 0 */

    /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001956:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800195a:	f7ff fefe 	bl	800175a <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2100      	movs	r1, #0
 8001962:	202c      	movs	r0, #44	@ 0x2c
 8001964:	f001 fdc5 	bl	80034f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001968:	202c      	movs	r0, #44	@ 0x2c
 800196a:	f001 fddc 	bl	8003526 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2100      	movs	r1, #0
 8001972:	202d      	movs	r0, #45	@ 0x2d
 8001974:	f001 fdbd 	bl	80034f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001978:	202d      	movs	r0, #45	@ 0x2d
 800197a:	f001 fdd4 	bl	8003526 <HAL_NVIC_EnableIRQ>

    /* USER CODE END IPCC_MspInit 1 */

  }

}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	58000c00 	.word	0x58000c00

0800198c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b096      	sub	sp, #88	@ 0x58
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001994:	f107 0308 	add.w	r3, r7, #8
 8001998:	2250      	movs	r2, #80	@ 0x50
 800199a:	2100      	movs	r1, #0
 800199c:	4618      	mov	r0, r3
 800199e:	f009 f932 	bl	800ac06 <memset>
  if(hrtc->Instance==RTC)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a13      	ldr	r2, [pc, #76]	@ (80019f4 <HAL_RTC_MspInit+0x68>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d11f      	bne.n	80019ec <HAL_RTC_MspInit+0x60>

    /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 80019ac:	f002 fb88 	bl	80040c0 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80019b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019b4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80019b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019ba:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019bc:	f107 0308 	add.w	r3, r7, #8
 80019c0:	4618      	mov	r0, r3
 80019c2:	f003 feaa 	bl	800571a <HAL_RCCEx_PeriphCLKConfig>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 80019cc:	f7ff fe84 	bl	80016d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019d0:	f7ff fe88 	bl	80016e4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80019d4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80019d8:	f7ff fed8 	bl	800178c <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80019dc:	2200      	movs	r2, #0
 80019de:	2100      	movs	r1, #0
 80019e0:	2029      	movs	r0, #41	@ 0x29
 80019e2:	f001 fd86 	bl	80034f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80019e6:	2029      	movs	r0, #41	@ 0x29
 80019e8:	f001 fd9d 	bl	8003526 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80019ec:	bf00      	nop
 80019ee:	3758      	adds	r7, #88	@ 0x58
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40002800 	.word	0x40002800

080019f8 <HAL_RTC_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a07      	ldr	r2, [pc, #28]	@ (8001a24 <HAL_RTC_MspDeInit+0x2c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d108      	bne.n	8001a1c <HAL_RTC_MspDeInit+0x24>
  {
    /* USER CODE BEGIN RTC_MspDeInit 0 */

    /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8001a0a:	f7ff fe7c 	bl	8001706 <LL_RCC_DisableRTC>
    __HAL_RCC_RTCAPB_CLK_DISABLE();
 8001a0e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001a12:	f7ff fed4 	bl	80017be <LL_APB1_GRP1_DisableClock>

    /* RTC interrupt DeInit */
    HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 8001a16:	2029      	movs	r0, #41	@ 0x29
 8001a18:	f001 fd93 	bl	8003542 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN RTC_MspDeInit 1 */

    /* USER CODE END RTC_MspDeInit 1 */
  }

}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40002800 	.word	0x40002800

08001a28 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a38:	d10a      	bne.n	8001a50 <HAL_TIM_Base_MspInit+0x28>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f7ff fea6 	bl	800178c <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2100      	movs	r1, #0
 8001a44:	201c      	movs	r0, #28
 8001a46:	f001 fd54 	bl	80034f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a4a:	201c      	movs	r0, #28
 8001a4c:	f001 fd6b 	bl	8003526 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <NMI_Handler+0x4>

08001a60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <HardFault_Handler+0x4>

08001a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <MemManage_Handler+0x4>

08001a70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a74:	bf00      	nop
 8001a76:	e7fd      	b.n	8001a74 <BusFault_Handler+0x4>

08001a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <UsageFault_Handler+0x4>

08001a80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aae:	f000 f91f 	bl	8001cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001aba:	2040      	movs	r0, #64	@ 0x40
 8001abc:	f002 f8f2 	bl	8003ca4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ac8:	4802      	ldr	r0, [pc, #8]	@ (8001ad4 <TIM2_IRQHandler+0x10>)
 8001aca:	f004 ff23 	bl	8006914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200002f0 	.word	0x200002f0

08001ad8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001adc:	4802      	ldr	r0, [pc, #8]	@ (8001ae8 <I2C1_EV_IRQHandler+0x10>)
 8001ade:	f002 f9b8 	bl	8003e52 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2000023c 	.word	0x2000023c

08001aec <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC A and B alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001af0:	4802      	ldr	r0, [pc, #8]	@ (8001afc <RTC_Alarm_IRQHandler+0x10>)
 8001af2:	f004 fcb3 	bl	800645c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200002cc 	.word	0x200002cc

08001b00 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001b04:	f008 fbb6 	bl	800a274 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001b10:	f008 fbe6 	bl	800a2e0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001b1c:	f002 f8da 	bl	8003cd4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001b28:	4b24      	ldr	r3, [pc, #144]	@ (8001bbc <SystemInit+0x98>)
 8001b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b2e:	4a23      	ldr	r2, [pc, #140]	@ (8001bbc <SystemInit+0x98>)
 8001b30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001b48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b4c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001b50:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001b52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b5c:	4b18      	ldr	r3, [pc, #96]	@ (8001bc0 <SystemInit+0x9c>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001b62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b6e:	f023 0305 	bic.w	r3, r3, #5
 8001b72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001b76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b82:	f023 0301 	bic.w	r3, r3, #1
 8001b86:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001b8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b8e:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc4 <SystemInit+0xa0>)
 8001b90:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001b92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b96:	4a0b      	ldr	r2, [pc, #44]	@ (8001bc4 <SystemInit+0xa0>)
 8001b98:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ba4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ba8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001baa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000ed00 	.word	0xe000ed00
 8001bc0:	faf6fefb 	.word	0xfaf6fefb
 8001bc4:	22041000 	.word	0x22041000

08001bc8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001bc8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bca:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bcc:	3304      	adds	r3, #4

08001bce <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bce:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001bd2:	d3f9      	bcc.n	8001bc8 <CopyDataInit>
  bx lr
 8001bd4:	4770      	bx	lr

08001bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001bd6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001bd8:	3004      	adds	r0, #4

08001bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001bda:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001bdc:	d3fb      	bcc.n	8001bd6 <FillZerobss>
  bx lr
 8001bde:	4770      	bx	lr

08001be0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001be0:	480c      	ldr	r0, [pc, #48]	@ (8001c14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001be2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001be4:	f7ff ff9e 	bl	8001b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001be8:	480b      	ldr	r0, [pc, #44]	@ (8001c18 <LoopForever+0x6>)
 8001bea:	490c      	ldr	r1, [pc, #48]	@ (8001c1c <LoopForever+0xa>)
 8001bec:	4a0c      	ldr	r2, [pc, #48]	@ (8001c20 <LoopForever+0xe>)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f7ff ffed 	bl	8001bce <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001bf4:	480b      	ldr	r0, [pc, #44]	@ (8001c24 <LoopForever+0x12>)
 8001bf6:	490c      	ldr	r1, [pc, #48]	@ (8001c28 <LoopForever+0x16>)
 8001bf8:	4a0c      	ldr	r2, [pc, #48]	@ (8001c2c <LoopForever+0x1a>)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f7ff ffe7 	bl	8001bce <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001c00:	480b      	ldr	r0, [pc, #44]	@ (8001c30 <LoopForever+0x1e>)
 8001c02:	490c      	ldr	r1, [pc, #48]	@ (8001c34 <LoopForever+0x22>)
 8001c04:	2300      	movs	r3, #0
 8001c06:	f7ff ffe8 	bl	8001bda <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c0a:	f009 f805 	bl	800ac18 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001c0e:	f7fe fe09 	bl	8000824 <main>

08001c12 <LoopForever>:

LoopForever:
  b LoopForever
 8001c12:	e7fe      	b.n	8001c12 <LoopForever>
  ldr   r0, =_estack
 8001c14:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001c18:	20000008 	.word	0x20000008
 8001c1c:	200000d0 	.word	0x200000d0
 8001c20:	0800af18 	.word	0x0800af18
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001c24:	200301e4 	.word	0x200301e4
 8001c28:	20030a67 	.word	0x20030a67
 8001c2c:	0800b026 	.word	0x0800b026
  INIT_BSS _sbss, _ebss
 8001c30:	2000011c 	.word	0x2000011c
 8001c34:	2000075c 	.word	0x2000075c

08001c38 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c38:	e7fe      	b.n	8001c38 <ADC1_IRQHandler>
	...

08001c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c46:	4b0c      	ldr	r3, [pc, #48]	@ (8001c78 <HAL_Init+0x3c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c78 <HAL_Init+0x3c>)
 8001c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c50:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c52:	2003      	movs	r0, #3
 8001c54:	f001 fc42 	bl	80034dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c58:	200f      	movs	r0, #15
 8001c5a:	f000 f80f 	bl	8001c7c <HAL_InitTick>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	71fb      	strb	r3, [r7, #7]
 8001c68:	e001      	b.n	8001c6e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c6a:	f7ff fdbb 	bl	80017e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	58004000 	.word	0x58004000

08001c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001c88:	4b17      	ldr	r3, [pc, #92]	@ (8001ce8 <HAL_InitTick+0x6c>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d024      	beq.n	8001cda <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c90:	f003 fade 	bl	8005250 <HAL_RCC_GetHCLKFreq>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4b14      	ldr	r3, [pc, #80]	@ (8001ce8 <HAL_InitTick+0x6c>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ca0:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f001 fc58 	bl	800355e <HAL_SYSTICK_Config>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10f      	bne.n	8001cd4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b0f      	cmp	r3, #15
 8001cb8:	d809      	bhi.n	8001cce <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc2:	f001 fc16 	bl	80034f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cc6:	4a09      	ldr	r2, [pc, #36]	@ (8001cec <HAL_InitTick+0x70>)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	e007      	b.n	8001cde <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	73fb      	strb	r3, [r7, #15]
 8001cd2:	e004      	b.n	8001cde <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
 8001cd8:	e001      	b.n	8001cde <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000030 	.word	0x20000030
 8001cec:	2000002c 	.word	0x2000002c

08001cf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <HAL_IncTick+0x20>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <HAL_IncTick+0x24>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4413      	add	r3, r2
 8001d00:	4a04      	ldr	r2, [pc, #16]	@ (8001d14 <HAL_IncTick+0x24>)
 8001d02:	6013      	str	r3, [r2, #0]
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000030 	.word	0x20000030
 8001d14:	20000384 	.word	0x20000384

08001d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d1c:	4b03      	ldr	r3, [pc, #12]	@ (8001d2c <HAL_GetTick+0x14>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20000384 	.word	0x20000384

08001d30 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001d34:	4b03      	ldr	r3, [pc, #12]	@ (8001d44 <HAL_GetTickPrio+0x14>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	2000002c 	.word	0x2000002c

08001d48 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001d4c:	4b05      	ldr	r3, [pc, #20]	@ (8001d64 <HAL_SuspendTick+0x1c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a04      	ldr	r2, [pc, #16]	@ (8001d64 <HAL_SuspendTick+0x1c>)
 8001d52:	f023 0302 	bic.w	r3, r3, #2
 8001d56:	6013      	str	r3, [r2, #0]
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000e010 	.word	0xe000e010

08001d68 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001d6c:	4b05      	ldr	r3, [pc, #20]	@ (8001d84 <HAL_ResumeTick+0x1c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a04      	ldr	r2, [pc, #16]	@ (8001d84 <HAL_ResumeTick+0x1c>)
 8001d72:	f043 0302 	orr.w	r3, r3, #2
 8001d76:	6013      	str	r3, [r2, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000e010 	.word	0xe000e010

08001d88 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8001d8c:	4b03      	ldr	r3, [pc, #12]	@ (8001d9c <HAL_GetUIDw2+0x14>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	1fff7598 	.word	0x1fff7598

08001da0 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	431a      	orrs	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	609a      	str	r2, [r3, #8]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	3360      	adds	r3, #96	@ 0x60
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <LL_ADC_SetOffset+0x44>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	4313      	orrs	r3, r2
 8001e38:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e40:	bf00      	nop
 8001e42:	371c      	adds	r7, #28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	03fff000 	.word	0x03fff000

08001e50 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3360      	adds	r3, #96	@ 0x60
 8001e5e:	461a      	mov	r2, r3
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	3360      	adds	r3, #96	@ 0x60
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ea6:	bf00      	nop
 8001ea8:	371c      	adds	r7, #28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001eca:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b087      	sub	sp, #28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	3330      	adds	r3, #48	@ 0x30
 8001ee8:	461a      	mov	r2, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	4413      	add	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f003 031f 	and.w	r3, r3, #31
 8001f02:	211f      	movs	r1, #31
 8001f04:	fa01 f303 	lsl.w	r3, r1, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	0e9b      	lsrs	r3, r3, #26
 8001f10:	f003 011f 	and.w	r1, r3, #31
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001f24:	bf00      	nop
 8001f26:	371c      	adds	r7, #28
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b087      	sub	sp, #28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3314      	adds	r3, #20
 8001f40:	461a      	mov	r2, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	0e5b      	lsrs	r3, r3, #25
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	4413      	add	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	0d1b      	lsrs	r3, r3, #20
 8001f58:	f003 031f 	and.w	r3, r3, #31
 8001f5c:	2107      	movs	r1, #7
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	401a      	ands	r2, r3
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	0d1b      	lsrs	r3, r3, #20
 8001f6a:	f003 031f 	and.w	r3, r3, #31
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	431a      	orrs	r2, r3
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001f7a:	bf00      	nop
 8001f7c:	371c      	adds	r7, #28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f003 0318 	and.w	r3, r3, #24
 8001faa:	4908      	ldr	r1, [pc, #32]	@ (8001fcc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fac:	40d9      	lsrs	r1, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	400b      	ands	r3, r1
 8001fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fbe:	bf00      	nop
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	0007ffff 	.word	0x0007ffff

08001fd0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001fe0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6093      	str	r3, [r2, #8]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002004:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002008:	d101      	bne.n	800200e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800202c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002030:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002054:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002058:	d101      	bne.n	800205e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800207c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002080:	f043 0201 	orr.w	r2, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020a8:	f043 0202 	orr.w	r2, r3, #2
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <LL_ADC_IsEnabled+0x18>
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <LL_ADC_IsEnabled+0x1a>
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d101      	bne.n	80020fa <LL_ADC_IsDisableOngoing+0x18>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <LL_ADC_IsDisableOngoing+0x1a>
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002118:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800211c:	f043 0204 	orr.w	r2, r3, #4
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002140:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002144:	f043 0210 	orr.w	r2, r3, #16
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b04      	cmp	r3, #4
 800216a:	d101      	bne.n	8002170 <LL_ADC_REG_IsConversionOngoing+0x18>
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800218e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002192:	f043 0220 	orr.w	r2, r3, #32
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d101      	bne.n	80021be <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d4:	2300      	movs	r3, #0
 80021d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80021d8:	2300      	movs	r3, #0
 80021da:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021dc:	2300      	movs	r3, #0
 80021de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e12e      	b.n	8002448 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d109      	bne.n	800220c <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff fb03 	bl	8001804 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff feef 	bl	8001ff4 <LL_ADC_IsDeepPowerDownEnabled>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d004      	beq.n	8002226 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fed5 	bl	8001fd0 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff ff0a 	bl	8002044 <LL_ADC_IsInternalRegulatorEnabled>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d115      	bne.n	8002262 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff feee 	bl	800201c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002240:	4b83      	ldr	r3, [pc, #524]	@ (8002450 <HAL_ADC_Init+0x284>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	099b      	lsrs	r3, r3, #6
 8002246:	4a83      	ldr	r2, [pc, #524]	@ (8002454 <HAL_ADC_Init+0x288>)
 8002248:	fba2 2303 	umull	r2, r3, r2, r3
 800224c:	099b      	lsrs	r3, r3, #6
 800224e:	3301      	adds	r3, #1
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002254:	e002      	b.n	800225c <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	3b01      	subs	r3, #1
 800225a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f9      	bne.n	8002256 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff feec 	bl	8002044 <LL_ADC_IsInternalRegulatorEnabled>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10d      	bne.n	800228e <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002276:	f043 0210 	orr.w	r2, r3, #16
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002282:	f043 0201 	orr.w	r2, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff ff60 	bl	8002158 <LL_ADC_REG_IsConversionOngoing>
 8002298:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f040 80c7 	bne.w	8002436 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f040 80c3 	bne.w	8002436 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80022b8:	f043 0202 	orr.w	r2, r3, #2
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fef9 	bl	80020bc <LL_ADC_IsEnabled>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10b      	bne.n	80022e8 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022d0:	4861      	ldr	r0, [pc, #388]	@ (8002458 <HAL_ADC_Init+0x28c>)
 80022d2:	f7ff fef3 	bl	80020bc <LL_ADC_IsEnabled>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d105      	bne.n	80022e8 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	4619      	mov	r1, r3
 80022e2:	485e      	ldr	r0, [pc, #376]	@ (800245c <HAL_ADC_Init+0x290>)
 80022e4:	f7ff fd5c 	bl	8001da0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	7e5b      	ldrb	r3, [r3, #25]
 80022ec:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022f2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80022f8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80022fe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002306:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8002308:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d106      	bne.n	8002328 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231e:	3b01      	subs	r3, #1
 8002320:	045b      	lsls	r3, r3, #17
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232c:	2b00      	cmp	r3, #0
 800232e:	d009      	beq.n	8002344 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002334:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	4b45      	ldr	r3, [pc, #276]	@ (8002460 <HAL_ADC_Init+0x294>)
 800234c:	4013      	ands	r3, r2
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6812      	ldr	r2, [r2, #0]
 8002352:	69b9      	ldr	r1, [r7, #24]
 8002354:	430b      	orrs	r3, r1
 8002356:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fefb 	bl	8002158 <LL_ADC_REG_IsConversionOngoing>
 8002362:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff1c 	bl	80021a6 <LL_ADC_INJ_IsConversionOngoing>
 800236e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d13d      	bne.n	80023f2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d13a      	bne.n	80023f2 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002380:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002388:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002398:	f023 0302 	bic.w	r3, r3, #2
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	69b9      	ldr	r1, [r7, #24]
 80023a2:	430b      	orrs	r3, r1
 80023a4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d118      	bne.n	80023e2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80023ba:	f023 0304 	bic.w	r3, r3, #4
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80023c6:	4311      	orrs	r1, r2
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80023cc:	4311      	orrs	r1, r2
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023d2:	430a      	orrs	r2, r1
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	611a      	str	r2, [r3, #16]
 80023e0:	e007      	b.n	80023f2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0201 	bic.w	r2, r2, #1
 80023f0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d10c      	bne.n	8002414 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002400:	f023 010f 	bic.w	r1, r3, #15
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	1e5a      	subs	r2, r3, #1
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	631a      	str	r2, [r3, #48]	@ 0x30
 8002412:	e007      	b.n	8002424 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 020f 	bic.w	r2, r2, #15
 8002422:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002428:	f023 0303 	bic.w	r3, r3, #3
 800242c:	f043 0201 	orr.w	r2, r3, #1
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	655a      	str	r2, [r3, #84]	@ 0x54
 8002434:	e007      	b.n	8002446 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243a:	f043 0210 	orr.w	r2, r3, #16
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002446:	7ffb      	ldrb	r3, [r7, #31]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3720      	adds	r7, #32
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20000028 	.word	0x20000028
 8002454:	053e2d63 	.word	0x053e2d63
 8002458:	50040000 	.word	0x50040000
 800245c:	50040300 	.word	0x50040300
 8002460:	fff0c007 	.word	0xfff0c007

08002464 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fe71 	bl	8002158 <LL_ADC_REG_IsConversionOngoing>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d140      	bne.n	80024fe <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_ADC_Start+0x26>
 8002486:	2302      	movs	r3, #2
 8002488:	e03c      	b.n	8002504 <HAL_ADC_Start+0xa0>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 fd8a 	bl	8002fac <ADC_Enable>
 8002498:	4603      	mov	r3, r0
 800249a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d128      	bne.n	80024f4 <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80024aa:	f023 0301 	bic.w	r3, r3, #1
 80024ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024c2:	d106      	bne.n	80024d2 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c8:	f023 0206 	bic.w	r2, r3, #6
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80024d0:	e002      	b.n	80024d8 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	221c      	movs	r2, #28
 80024de:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fe0b 	bl	8002108 <LL_ADC_REG_StartConversion>
 80024f2:	e006      	b.n	8002502 <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80024fc:	e001      	b.n	8002502 <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024fe:	2302      	movs	r3, #2
 8002500:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002502:	7bfb      	ldrb	r3, [r7, #15]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_ADC_Stop+0x16>
 800251e:	2302      	movs	r3, #2
 8002520:	e023      	b.n	800256a <HAL_ADC_Stop+0x5e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800252a:	2103      	movs	r1, #3
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 fc81 	bl	8002e34 <ADC_ConversionStop>
 8002532:	4603      	mov	r3, r0
 8002534:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d111      	bne.n	8002560 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 fdaf 	bl	80030a0 <ADC_Disable>
 8002542:	4603      	mov	r3, r0
 8002544:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d109      	bne.n	8002560 <HAL_ADC_Stop+0x54>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002550:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	f043 0201 	orr.w	r2, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	655a      	str	r2, [r3, #84]	@ 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002568:	7bfb      	ldrb	r3, [r7, #15]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b084      	sub	sp, #16
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	2b08      	cmp	r3, #8
 8002582:	d102      	bne.n	800258a <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002584:	2308      	movs	r3, #8
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	e010      	b.n	80025ac <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d007      	beq.n	80025a8 <HAL_ADC_PollForConversion+0x36>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800259c:	f043 0220 	orr.w	r2, r3, #32
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	655a      	str	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e06d      	b.n	8002684 <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80025a8:	2304      	movs	r3, #4
 80025aa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80025ac:	f7ff fbb4 	bl	8001d18 <HAL_GetTick>
 80025b0:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025b2:	e021      	b.n	80025f8 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ba:	d01d      	beq.n	80025f8 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80025bc:	f7ff fbac 	bl	8001d18 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d302      	bcc.n	80025d2 <HAL_ADC_PollForConversion+0x60>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d112      	bne.n	80025f8 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10b      	bne.n	80025f8 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e4:	f043 0204 	orr.w	r2, r3, #4
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e045      	b.n	8002684 <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4013      	ands	r3, r2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0d6      	beq.n	80025b4 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800260a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fc4b 	bl	8001eb2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d01c      	beq.n	800265c <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	7e5b      	ldrb	r3, [r3, #25]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d118      	bne.n	800265c <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b08      	cmp	r3, #8
 8002636:	d111      	bne.n	800265c <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800263c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002648:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d105      	bne.n	800265c <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002654:	f043 0201 	orr.w	r2, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2b08      	cmp	r3, #8
 8002660:	d104      	bne.n	800266c <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2208      	movs	r2, #8
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	e00a      	b.n	8002682 <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d103      	bne.n	8002682 <HAL_ADC_PollForConversion+0x110>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	220c      	movs	r2, #12
 8002680:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800269a:	4618      	mov	r0, r3
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b0b6      	sub	sp, #216	@ 0xd8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x22>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e39f      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x762>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff fd3e 	bl	8002158 <LL_ADC_REG_IsConversionOngoing>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f040 8384 	bne.w	8002dec <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	6859      	ldr	r1, [r3, #4]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	f7ff fbf1 	bl	8001ed8 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff fd2c 	bl	8002158 <LL_ADC_REG_IsConversionOngoing>
 8002700:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fd4c 	bl	80021a6 <LL_ADC_INJ_IsConversionOngoing>
 800270e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002712:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002716:	2b00      	cmp	r3, #0
 8002718:	f040 81a6 	bne.w	8002a68 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800271c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002720:	2b00      	cmp	r3, #0
 8002722:	f040 81a1 	bne.w	8002a68 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	6819      	ldr	r1, [r3, #0]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	461a      	mov	r2, r3
 8002734:	f7ff fbfc 	bl	8001f30 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	695a      	ldr	r2, [r3, #20]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	08db      	lsrs	r3, r3, #3
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	2b04      	cmp	r3, #4
 8002758:	d00a      	beq.n	8002770 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	6919      	ldr	r1, [r3, #16]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800276a:	f7ff fb4d 	bl	8001e08 <LL_ADC_SetOffset>
 800276e:	e17b      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2100      	movs	r1, #0
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fb6a 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 800277c:	4603      	mov	r3, r0
 800277e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10a      	bne.n	800279c <HAL_ADC_ConfigChannel+0xf4>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2100      	movs	r1, #0
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff fb5f 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 8002792:	4603      	mov	r3, r0
 8002794:	0e9b      	lsrs	r3, r3, #26
 8002796:	f003 021f 	and.w	r2, r3, #31
 800279a:	e01e      	b.n	80027da <HAL_ADC_ConfigChannel+0x132>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2100      	movs	r1, #0
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff fb54 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80027b2:	fa93 f3a3 	rbit	r3, r3
 80027b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 80027ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027be:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  if (value == 0U)
 80027c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 80027ca:	2320      	movs	r3, #32
 80027cc:	e004      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 80027ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d105      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x14a>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	0e9b      	lsrs	r3, r3, #26
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	e018      	b.n	8002824 <HAL_ADC_ConfigChannel+0x17c>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80027fe:	fa93 f3a3 	rbit	r3, r3
 8002802:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800280a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800280e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8002816:	2320      	movs	r3, #32
 8002818:	e004      	b.n	8002824 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800281a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800281e:	fab3 f383 	clz	r3, r3
 8002822:	b2db      	uxtb	r3, r3
 8002824:	429a      	cmp	r2, r3
 8002826:	d106      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2200      	movs	r2, #0
 800282e:	2100      	movs	r1, #0
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fb23 	bl	8001e7c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2101      	movs	r1, #1
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff fb07 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 8002842:	4603      	mov	r3, r0
 8002844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10a      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x1ba>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2101      	movs	r1, #1
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff fafc 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 8002858:	4603      	mov	r3, r0
 800285a:	0e9b      	lsrs	r3, r3, #26
 800285c:	f003 021f 	and.w	r2, r3, #31
 8002860:	e01e      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x1f8>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2101      	movs	r1, #1
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff faf1 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 800286e:	4603      	mov	r3, r0
 8002870:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002874:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002878:	fa93 f3a3 	rbit	r3, r3
 800287c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002880:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002884:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002888:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002890:	2320      	movs	r3, #32
 8002892:	e004      	b.n	800289e <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002894:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002898:	fab3 f383 	clz	r3, r3
 800289c:	b2db      	uxtb	r3, r3
 800289e:	461a      	mov	r2, r3
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d105      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x210>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	0e9b      	lsrs	r3, r3, #26
 80028b2:	f003 031f 	and.w	r3, r3, #31
 80028b6:	e018      	b.n	80028ea <HAL_ADC_ConfigChannel+0x242>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028c4:	fa93 f3a3 	rbit	r3, r3
 80028c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80028cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80028d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80028d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80028dc:	2320      	movs	r3, #32
 80028de:	e004      	b.n	80028ea <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80028e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028e4:	fab3 f383 	clz	r3, r3
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d106      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2200      	movs	r2, #0
 80028f4:	2101      	movs	r1, #1
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff fac0 	bl	8001e7c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2102      	movs	r1, #2
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff faa4 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 8002908:	4603      	mov	r3, r0
 800290a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10a      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x280>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2102      	movs	r1, #2
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fa99 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 800291e:	4603      	mov	r3, r0
 8002920:	0e9b      	lsrs	r3, r3, #26
 8002922:	f003 021f 	and.w	r2, r3, #31
 8002926:	e01e      	b.n	8002966 <HAL_ADC_ConfigChannel+0x2be>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2102      	movs	r1, #2
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fa8e 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 8002934:	4603      	mov	r3, r0
 8002936:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002946:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800294a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800294e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002956:	2320      	movs	r3, #32
 8002958:	e004      	b.n	8002964 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800295a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800295e:	fab3 f383 	clz	r3, r3
 8002962:	b2db      	uxtb	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296e:	2b00      	cmp	r3, #0
 8002970:	d105      	bne.n	800297e <HAL_ADC_ConfigChannel+0x2d6>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	0e9b      	lsrs	r3, r3, #26
 8002978:	f003 031f 	and.w	r3, r3, #31
 800297c:	e016      	b.n	80029ac <HAL_ADC_ConfigChannel+0x304>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800298a:	fa93 f3a3 	rbit	r3, r3
 800298e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002990:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002992:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002996:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800299e:	2320      	movs	r3, #32
 80029a0:	e004      	b.n	80029ac <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 80029a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d106      	bne.n	80029be <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2200      	movs	r2, #0
 80029b6:	2102      	movs	r1, #2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff fa5f 	bl	8001e7c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2103      	movs	r1, #3
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fa43 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10a      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x342>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2103      	movs	r1, #3
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff fa38 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 80029e0:	4603      	mov	r3, r0
 80029e2:	0e9b      	lsrs	r3, r3, #26
 80029e4:	f003 021f 	and.w	r2, r3, #31
 80029e8:	e017      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x372>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2103      	movs	r1, #3
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff fa2d 	bl	8001e50 <LL_ADC_GetOffsetChannel>
 80029f6:	4603      	mov	r3, r0
 80029f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029fc:	fa93 f3a3 	rbit	r3, r3
 8002a00:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002a02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a04:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002a06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002a0c:	2320      	movs	r3, #32
 8002a0e:	e003      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002a10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a12:	fab3 f383 	clz	r3, r3
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d105      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x38a>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	0e9b      	lsrs	r3, r3, #26
 8002a2c:	f003 031f 	and.w	r3, r3, #31
 8002a30:	e011      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x3ae>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002a40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a42:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002a44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002a4a:	2320      	movs	r3, #32
 8002a4c:	e003      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002a4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a50:	fab3 f383 	clz	r3, r3
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d106      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2103      	movs	r1, #3
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff fa0a 	bl	8001e7c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fb25 	bl	80020bc <LL_ADC_IsEnabled>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f040 81c2 	bne.w	8002dfe <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6818      	ldr	r0, [r3, #0]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	6819      	ldr	r1, [r3, #0]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	461a      	mov	r2, r3
 8002a88:	f7ff fa7e 	bl	8001f88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4a8e      	ldr	r2, [pc, #568]	@ (8002ccc <HAL_ADC_ConfigChannel+0x624>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	f040 8130 	bne.w	8002cf8 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10b      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x418>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	0e9b      	lsrs	r3, r3, #26
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	2b09      	cmp	r3, #9
 8002ab6:	bf94      	ite	ls
 8002ab8:	2301      	movls	r3, #1
 8002aba:	2300      	movhi	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	e019      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x44c>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ac8:	fa93 f3a3 	rbit	r3, r3
 8002acc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002ace:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ad0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002ad2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002ad8:	2320      	movs	r3, #32
 8002ada:	e003      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002adc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ade:	fab3 f383 	clz	r3, r3
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	f003 031f 	and.w	r3, r3, #31
 8002aea:	2b09      	cmp	r3, #9
 8002aec:	bf94      	ite	ls
 8002aee:	2301      	movls	r3, #1
 8002af0:	2300      	movhi	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d079      	beq.n	8002bec <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d107      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x46c>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	0e9b      	lsrs	r3, r3, #26
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	069b      	lsls	r3, r3, #26
 8002b0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b12:	e015      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x498>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b24:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002b2c:	2320      	movs	r3, #32
 8002b2e:	e003      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002b30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	3301      	adds	r3, #1
 8002b3a:	069b      	lsls	r3, r3, #26
 8002b3c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d109      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x4b8>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	0e9b      	lsrs	r3, r3, #26
 8002b52:	3301      	adds	r3, #1
 8002b54:	f003 031f 	and.w	r3, r3, #31
 8002b58:	2101      	movs	r1, #1
 8002b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5e:	e017      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x4e8>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b68:	fa93 f3a3 	rbit	r3, r3
 8002b6c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002b6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b70:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002b72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002b78:	2320      	movs	r3, #32
 8002b7a:	e003      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002b7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b7e:	fab3 f383 	clz	r3, r3
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	3301      	adds	r3, #1
 8002b86:	f003 031f 	and.w	r3, r3, #31
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b90:	ea42 0103 	orr.w	r1, r2, r3
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10a      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x50e>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	0e9b      	lsrs	r3, r3, #26
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	f003 021f 	and.w	r2, r3, #31
 8002bac:	4613      	mov	r3, r2
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	4413      	add	r3, r2
 8002bb2:	051b      	lsls	r3, r3, #20
 8002bb4:	e018      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x540>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bbe:	fa93 f3a3 	rbit	r3, r3
 8002bc2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002bc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002bce:	2320      	movs	r3, #32
 8002bd0:	e003      	b.n	8002bda <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bd4:	fab3 f383 	clz	r3, r3
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	3301      	adds	r3, #1
 8002bdc:	f003 021f 	and.w	r2, r3, #31
 8002be0:	4613      	mov	r3, r2
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	4413      	add	r3, r2
 8002be6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002be8:	430b      	orrs	r3, r1
 8002bea:	e080      	b.n	8002cee <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d107      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x560>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	0e9b      	lsrs	r3, r3, #26
 8002bfe:	3301      	adds	r3, #1
 8002c00:	069b      	lsls	r3, r3, #26
 8002c02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c06:	e015      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x58c>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c10:	fa93 f3a3 	rbit	r3, r3
 8002c14:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c18:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002c20:	2320      	movs	r3, #32
 8002c22:	e003      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c26:	fab3 f383 	clz	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	069b      	lsls	r3, r3, #26
 8002c30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d109      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x5ac>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	0e9b      	lsrs	r3, r3, #26
 8002c46:	3301      	adds	r3, #1
 8002c48:	f003 031f 	and.w	r3, r3, #31
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c52:	e017      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x5dc>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	fa93 f3a3 	rbit	r3, r3
 8002c60:	61fb      	str	r3, [r7, #28]
  return result;
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002c6c:	2320      	movs	r3, #32
 8002c6e:	e003      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	2101      	movs	r1, #1
 8002c80:	fa01 f303 	lsl.w	r3, r1, r3
 8002c84:	ea42 0103 	orr.w	r1, r2, r3
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10d      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x608>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	0e9b      	lsrs	r3, r3, #26
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	f003 021f 	and.w	r2, r3, #31
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3b1e      	subs	r3, #30
 8002ca8:	051b      	lsls	r3, r3, #20
 8002caa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002cae:	e01d      	b.n	8002cec <HAL_ADC_ConfigChannel+0x644>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	fa93 f3a3 	rbit	r3, r3
 8002cbc:	613b      	str	r3, [r7, #16]
  return result;
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d103      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002cc8:	2320      	movs	r3, #32
 8002cca:	e005      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x630>
 8002ccc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	3301      	adds	r3, #1
 8002cda:	f003 021f 	and.w	r2, r3, #31
 8002cde:	4613      	mov	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3b1e      	subs	r3, #30
 8002ce6:	051b      	lsls	r3, r3, #20
 8002ce8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cec:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	f7ff f91c 	bl	8001f30 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4b45      	ldr	r3, [pc, #276]	@ (8002e14 <HAL_ADC_ConfigChannel+0x76c>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d07c      	beq.n	8002dfe <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d04:	4844      	ldr	r0, [pc, #272]	@ (8002e18 <HAL_ADC_ConfigChannel+0x770>)
 8002d06:	f7ff f871 	bl	8001dec <LL_ADC_GetCommonPathInternalCh>
 8002d0a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d0e:	4843      	ldr	r0, [pc, #268]	@ (8002e1c <HAL_ADC_ConfigChannel+0x774>)
 8002d10:	f7ff f9d4 	bl	80020bc <LL_ADC_IsEnabled>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d15e      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a40      	ldr	r2, [pc, #256]	@ (8002e20 <HAL_ADC_ConfigChannel+0x778>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d127      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x6cc>
 8002d24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d121      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a39      	ldr	r2, [pc, #228]	@ (8002e1c <HAL_ADC_ConfigChannel+0x774>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d161      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002d3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d3e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d42:	4619      	mov	r1, r3
 8002d44:	4834      	ldr	r0, [pc, #208]	@ (8002e18 <HAL_ADC_ConfigChannel+0x770>)
 8002d46:	f7ff f83e 	bl	8001dc6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d4a:	4b36      	ldr	r3, [pc, #216]	@ (8002e24 <HAL_ADC_ConfigChannel+0x77c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	099b      	lsrs	r3, r3, #6
 8002d50:	4a35      	ldr	r2, [pc, #212]	@ (8002e28 <HAL_ADC_ConfigChannel+0x780>)
 8002d52:	fba2 2303 	umull	r2, r3, r2, r3
 8002d56:	099b      	lsrs	r3, r3, #6
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4413      	add	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002d64:	e002      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f9      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d72:	e044      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a2c      	ldr	r2, [pc, #176]	@ (8002e2c <HAL_ADC_ConfigChannel+0x784>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d113      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x6fe>
 8002d7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10d      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a23      	ldr	r2, [pc, #140]	@ (8002e1c <HAL_ADC_ConfigChannel+0x774>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d134      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002d94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	481e      	ldr	r0, [pc, #120]	@ (8002e18 <HAL_ADC_ConfigChannel+0x770>)
 8002da0:	f7ff f811 	bl	8001dc6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002da4:	e02b      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a21      	ldr	r2, [pc, #132]	@ (8002e30 <HAL_ADC_ConfigChannel+0x788>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d126      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x756>
 8002db0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002db4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d120      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a16      	ldr	r2, [pc, #88]	@ (8002e1c <HAL_ADC_ConfigChannel+0x774>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d11b      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002dc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4811      	ldr	r0, [pc, #68]	@ (8002e18 <HAL_ADC_ConfigChannel+0x770>)
 8002dd2:	f7fe fff8 	bl	8001dc6 <LL_ADC_SetCommonPathInternalCh>
 8002dd6:	e012      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ddc:	f043 0220 	orr.w	r2, r3, #32
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002dea:	e008      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df0:	f043 0220 	orr.w	r2, r3, #32
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8002e06:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	37d8      	adds	r7, #216	@ 0xd8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	80080000 	.word	0x80080000
 8002e18:	50040300 	.word	0x50040300
 8002e1c:	50040000 	.word	0x50040000
 8002e20:	c7520000 	.word	0xc7520000
 8002e24:	20000028 	.word	0x20000028
 8002e28:	053e2d63 	.word	0x053e2d63
 8002e2c:	cb840000 	.word	0xcb840000
 8002e30:	80000001 	.word	0x80000001

08002e34 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff f984 	bl	8002158 <LL_ADC_REG_IsConversionOngoing>
 8002e50:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff f9a5 	bl	80021a6 <LL_ADC_INJ_IsConversionOngoing>
 8002e5c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d103      	bne.n	8002e6c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 8098 	beq.w	8002f9c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d02a      	beq.n	8002ed0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	7e5b      	ldrb	r3, [r3, #25]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d126      	bne.n	8002ed0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	7e1b      	ldrb	r3, [r3, #24]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d122      	bne.n	8002ed0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002e8e:	e014      	b.n	8002eba <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	4a45      	ldr	r2, [pc, #276]	@ (8002fa8 <ADC_ConversionStop+0x174>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d90d      	bls.n	8002eb4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e9c:	f043 0210 	orr.w	r2, r3, #16
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea8:	f043 0201 	orr.w	r2, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e074      	b.n	8002f9e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec4:	2b40      	cmp	r3, #64	@ 0x40
 8002ec6:	d1e3      	bne.n	8002e90 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2240      	movs	r2, #64	@ 0x40
 8002ece:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d014      	beq.n	8002f00 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff f93c 	bl	8002158 <LL_ADC_REG_IsConversionOngoing>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00c      	beq.n	8002f00 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff f8f9 	bl	80020e2 <LL_ADC_IsDisableOngoing>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d104      	bne.n	8002f00 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff f918 	bl	8002130 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d014      	beq.n	8002f30 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff f94b 	bl	80021a6 <LL_ADC_INJ_IsConversionOngoing>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00c      	beq.n	8002f30 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff f8e1 	bl	80020e2 <LL_ADC_IsDisableOngoing>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d104      	bne.n	8002f30 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff f927 	bl	800217e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d005      	beq.n	8002f42 <ADC_ConversionStop+0x10e>
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	2b03      	cmp	r3, #3
 8002f3a:	d105      	bne.n	8002f48 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002f3c:	230c      	movs	r3, #12
 8002f3e:	617b      	str	r3, [r7, #20]
        break;
 8002f40:	e005      	b.n	8002f4e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002f42:	2308      	movs	r3, #8
 8002f44:	617b      	str	r3, [r7, #20]
        break;
 8002f46:	e002      	b.n	8002f4e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002f48:	2304      	movs	r3, #4
 8002f4a:	617b      	str	r3, [r7, #20]
        break;
 8002f4c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002f4e:	f7fe fee3 	bl	8001d18 <HAL_GetTick>
 8002f52:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002f54:	e01b      	b.n	8002f8e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002f56:	f7fe fedf 	bl	8001d18 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b05      	cmp	r3, #5
 8002f62:	d914      	bls.n	8002f8e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00d      	beq.n	8002f8e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f76:	f043 0210 	orr.w	r2, r3, #16
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f82:	f043 0201 	orr.w	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e007      	b.n	8002f9e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	4013      	ands	r3, r2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1dc      	bne.n	8002f56 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3720      	adds	r7, #32
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	a33fffff 	.word	0xa33fffff

08002fac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff f87d 	bl	80020bc <LL_ADC_IsEnabled>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d15e      	bne.n	8003086 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	4b30      	ldr	r3, [pc, #192]	@ (8003090 <ADC_Enable+0xe4>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00d      	beq.n	8002ff2 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fda:	f043 0210 	orr.w	r2, r3, #16
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe6:	f043 0201 	orr.w	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e04a      	b.n	8003088 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff f838 	bl	800206c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002ffc:	4825      	ldr	r0, [pc, #148]	@ (8003094 <ADC_Enable+0xe8>)
 8002ffe:	f7fe fef5 	bl	8001dec <LL_ADC_GetCommonPathInternalCh>
 8003002:	4603      	mov	r3, r0
 8003004:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00f      	beq.n	800302c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800300c:	4b22      	ldr	r3, [pc, #136]	@ (8003098 <ADC_Enable+0xec>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	099b      	lsrs	r3, r3, #6
 8003012:	4a22      	ldr	r2, [pc, #136]	@ (800309c <ADC_Enable+0xf0>)
 8003014:	fba2 2303 	umull	r2, r3, r2, r3
 8003018:	099b      	lsrs	r3, r3, #6
 800301a:	3301      	adds	r3, #1
 800301c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800301e:	e002      	b.n	8003026 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	3b01      	subs	r3, #1
 8003024:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1f9      	bne.n	8003020 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800302c:	f7fe fe74 	bl	8001d18 <HAL_GetTick>
 8003030:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003032:	e021      	b.n	8003078 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff f83f 	bl	80020bc <LL_ADC_IsEnabled>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d104      	bne.n	800304e <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff f80f 	bl	800206c <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800304e:	f7fe fe63 	bl	8001d18 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d90d      	bls.n	8003078 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003060:	f043 0210 	orr.w	r2, r3, #16
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800306c:	f043 0201 	orr.w	r2, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e007      	b.n	8003088 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b01      	cmp	r3, #1
 8003084:	d1d6      	bne.n	8003034 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	8000003f 	.word	0x8000003f
 8003094:	50040300 	.word	0x50040300
 8003098:	20000028 	.word	0x20000028
 800309c:	053e2d63 	.word	0x053e2d63

080030a0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff f818 	bl	80020e2 <LL_ADC_IsDisableOngoing>
 80030b2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7fe ffff 	bl	80020bc <LL_ADC_IsEnabled>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d047      	beq.n	8003154 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d144      	bne.n	8003154 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 030d 	and.w	r3, r3, #13
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d10c      	bne.n	80030f2 <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fe ffd9 	bl	8002094 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2203      	movs	r2, #3
 80030e8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030ea:	f7fe fe15 	bl	8001d18 <HAL_GetTick>
 80030ee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030f0:	e029      	b.n	8003146 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f6:	f043 0210 	orr.w	r2, r3, #16
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003102:	f043 0201 	orr.w	r2, r3, #1
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e023      	b.n	8003156 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800310e:	f7fe fe03 	bl	8001d18 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d914      	bls.n	8003146 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00d      	beq.n	8003146 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312e:	f043 0210 	orr.w	r2, r3, #16
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313a:	f043 0201 	orr.w	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e007      	b.n	8003156 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1dc      	bne.n	800310e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <LL_ADC_StartCalibration>:
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003170:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800317a:	4313      	orrs	r3, r2
 800317c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	609a      	str	r2, [r3, #8]
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <LL_ADC_IsCalibrationOnGoing>:
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80031a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031a4:	d101      	bne.n	80031aa <LL_ADC_IsCalibrationOnGoing+0x1a>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <LL_ADC_IsCalibrationOnGoing+0x1c>
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_ADCEx_Calibration_Start+0x1c>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e04d      	b.n	8003270 <HAL_ADCEx_Calibration_Start+0xb8>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff ff5f 	bl	80030a0 <ADC_Disable>
 80031e2:	4603      	mov	r3, r0
 80031e4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d136      	bne.n	800325a <HAL_ADCEx_Calibration_Start+0xa2>
#if defined(ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80031f4:	f023 0302 	bic.w	r3, r3, #2
 80031f8:	f043 0202 	orr.w	r2, r3, #2
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	655a      	str	r2, [r3, #84]	@ 0x54
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);

#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6839      	ldr	r1, [r7, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff ffa9 	bl	800315e <LL_ADC_StartCalibration>
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800320c:	e014      	b.n	8003238 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	3301      	adds	r3, #1
 8003212:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	4a18      	ldr	r2, [pc, #96]	@ (8003278 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d90d      	bls.n	8003238 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003220:	f023 0312 	bic.w	r3, r3, #18
 8003224:	f043 0210 	orr.w	r2, r3, #16
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e01b      	b.n	8003270 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff ffa7 	bl	8003190 <LL_ADC_IsCalibrationOnGoing>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1e2      	bne.n	800320e <HAL_ADCEx_Calibration_Start+0x56>
    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800324c:	f023 0303 	bic.w	r3, r3, #3
 8003250:	f043 0201 	orr.w	r2, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	655a      	str	r2, [r3, #84]	@ 0x54
 8003258:	e005      	b.n	8003266 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800325e:	f043 0210 	orr.w	r2, r3, #16
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800326e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	00026aaa 	.word	0x00026aaa

0800327c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800328c:	4b0c      	ldr	r3, [pc, #48]	@ (80032c0 <__NVIC_SetPriorityGrouping+0x44>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003298:	4013      	ands	r3, r2
 800329a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ae:	4a04      	ldr	r2, [pc, #16]	@ (80032c0 <__NVIC_SetPriorityGrouping+0x44>)
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	60d3      	str	r3, [r2, #12]
}
 80032b4:	bf00      	nop
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	e000ed00 	.word	0xe000ed00

080032c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032c8:	4b04      	ldr	r3, [pc, #16]	@ (80032dc <__NVIC_GetPriorityGrouping+0x18>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	0a1b      	lsrs	r3, r3, #8
 80032ce:	f003 0307 	and.w	r3, r3, #7
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	e000ed00 	.word	0xe000ed00

080032e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	4603      	mov	r3, r0
 80032e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	db0b      	blt.n	800330a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	f003 021f 	and.w	r2, r3, #31
 80032f8:	4907      	ldr	r1, [pc, #28]	@ (8003318 <__NVIC_EnableIRQ+0x38>)
 80032fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	2001      	movs	r0, #1
 8003302:	fa00 f202 	lsl.w	r2, r0, r2
 8003306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	e000e100 	.word	0xe000e100

0800331c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	2b00      	cmp	r3, #0
 800332c:	db12      	blt.n	8003354 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	f003 021f 	and.w	r2, r3, #31
 8003334:	490a      	ldr	r1, [pc, #40]	@ (8003360 <__NVIC_DisableIRQ+0x44>)
 8003336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	2001      	movs	r0, #1
 800333e:	fa00 f202 	lsl.w	r2, r0, r2
 8003342:	3320      	adds	r3, #32
 8003344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003348:	f3bf 8f4f 	dsb	sy
}
 800334c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800334e:	f3bf 8f6f 	isb	sy
}
 8003352:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	e000e100 	.word	0xe000e100

08003364 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800336e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003372:	2b00      	cmp	r3, #0
 8003374:	db0c      	blt.n	8003390 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	f003 021f 	and.w	r2, r3, #31
 800337c:	4907      	ldr	r1, [pc, #28]	@ (800339c <__NVIC_SetPendingIRQ+0x38>)
 800337e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003382:	095b      	lsrs	r3, r3, #5
 8003384:	2001      	movs	r0, #1
 8003386:	fa00 f202 	lsl.w	r2, r0, r2
 800338a:	3340      	adds	r3, #64	@ 0x40
 800338c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	e000e100 	.word	0xe000e100

080033a0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	db0c      	blt.n	80033cc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	f003 021f 	and.w	r2, r3, #31
 80033b8:	4907      	ldr	r1, [pc, #28]	@ (80033d8 <__NVIC_ClearPendingIRQ+0x38>)
 80033ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	2001      	movs	r0, #1
 80033c2:	fa00 f202 	lsl.w	r2, r0, r2
 80033c6:	3360      	adds	r3, #96	@ 0x60
 80033c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000e100 	.word	0xe000e100

080033dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	6039      	str	r1, [r7, #0]
 80033e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	db0a      	blt.n	8003406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	490c      	ldr	r1, [pc, #48]	@ (8003428 <__NVIC_SetPriority+0x4c>)
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	0112      	lsls	r2, r2, #4
 80033fc:	b2d2      	uxtb	r2, r2
 80033fe:	440b      	add	r3, r1
 8003400:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003404:	e00a      	b.n	800341c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	b2da      	uxtb	r2, r3
 800340a:	4908      	ldr	r1, [pc, #32]	@ (800342c <__NVIC_SetPriority+0x50>)
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	3b04      	subs	r3, #4
 8003414:	0112      	lsls	r2, r2, #4
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	440b      	add	r3, r1
 800341a:	761a      	strb	r2, [r3, #24]
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	e000e100 	.word	0xe000e100
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003430:	b480      	push	{r7}
 8003432:	b089      	sub	sp, #36	@ 0x24
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f1c3 0307 	rsb	r3, r3, #7
 800344a:	2b04      	cmp	r3, #4
 800344c:	bf28      	it	cs
 800344e:	2304      	movcs	r3, #4
 8003450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	3304      	adds	r3, #4
 8003456:	2b06      	cmp	r3, #6
 8003458:	d902      	bls.n	8003460 <NVIC_EncodePriority+0x30>
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	3b03      	subs	r3, #3
 800345e:	e000      	b.n	8003462 <NVIC_EncodePriority+0x32>
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003464:	f04f 32ff 	mov.w	r2, #4294967295
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43da      	mvns	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	401a      	ands	r2, r3
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003478:	f04f 31ff 	mov.w	r1, #4294967295
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	fa01 f303 	lsl.w	r3, r1, r3
 8003482:	43d9      	mvns	r1, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003488:	4313      	orrs	r3, r2
         );
}
 800348a:	4618      	mov	r0, r3
 800348c:	3724      	adds	r7, #36	@ 0x24
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
	...

08003498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034a8:	d301      	bcc.n	80034ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034aa:	2301      	movs	r3, #1
 80034ac:	e00f      	b.n	80034ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ae:	4a0a      	ldr	r2, [pc, #40]	@ (80034d8 <SysTick_Config+0x40>)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034b6:	210f      	movs	r1, #15
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295
 80034bc:	f7ff ff8e 	bl	80033dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034c0:	4b05      	ldr	r3, [pc, #20]	@ (80034d8 <SysTick_Config+0x40>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034c6:	4b04      	ldr	r3, [pc, #16]	@ (80034d8 <SysTick_Config+0x40>)
 80034c8:	2207      	movs	r2, #7
 80034ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	e000e010 	.word	0xe000e010

080034dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff fec9 	bl	800327c <__NVIC_SetPriorityGrouping>
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b086      	sub	sp, #24
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	4603      	mov	r3, r0
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003500:	f7ff fee0 	bl	80032c4 <__NVIC_GetPriorityGrouping>
 8003504:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	6978      	ldr	r0, [r7, #20]
 800350c:	f7ff ff90 	bl	8003430 <NVIC_EncodePriority>
 8003510:	4602      	mov	r2, r0
 8003512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003516:	4611      	mov	r1, r2
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff ff5f 	bl	80033dc <__NVIC_SetPriority>
}
 800351e:	bf00      	nop
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
 800352c:	4603      	mov	r3, r0
 800352e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff fed3 	bl	80032e0 <__NVIC_EnableIRQ>
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b082      	sub	sp, #8
 8003546:	af00      	add	r7, sp, #0
 8003548:	4603      	mov	r3, r0
 800354a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800354c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff fee3 	bl	800331c <__NVIC_DisableIRQ>
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b082      	sub	sp, #8
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff ff96 	bl	8003498 <SysTick_Config>
 800356c:	4603      	mov	r3, r0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	4603      	mov	r3, r0
 800357e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff feed 	bl	8003364 <__NVIC_SetPendingIRQ>
}
 800358a:	bf00      	nop
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	4603      	mov	r3, r0
 800359a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800359c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff fefd 	bl	80033a0 <__NVIC_ClearPendingIRQ>
}
 80035a6:	bf00      	nop
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80035be:	4b1c      	ldr	r3, [pc, #112]	@ (8003630 <HAL_FLASH_Program+0x80>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d101      	bne.n	80035ca <HAL_FLASH_Program+0x1a>
 80035c6:	2302      	movs	r3, #2
 80035c8:	e02d      	b.n	8003626 <HAL_FLASH_Program+0x76>
 80035ca:	4b19      	ldr	r3, [pc, #100]	@ (8003630 <HAL_FLASH_Program+0x80>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80035d0:	4b17      	ldr	r3, [pc, #92]	@ (8003630 <HAL_FLASH_Program+0x80>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80035d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80035da:	f000 f869 	bl	80036b0 <FLASH_WaitForLastOperation>
 80035de:	4603      	mov	r3, r0
 80035e0:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80035e2:	7dfb      	ldrb	r3, [r7, #23]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d11a      	bne.n	800361e <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d105      	bne.n	80035fa <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80035ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035f2:	68b8      	ldr	r0, [r7, #8]
 80035f4:	f000 f8ca 	bl	800378c <FLASH_Program_DoubleWord>
 80035f8:	e004      	b.n	8003604 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	4619      	mov	r1, r3
 80035fe:	68b8      	ldr	r0, [r7, #8]
 8003600:	f007 fb4a 	bl	800ac98 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003604:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003608:	f000 f852 	bl	80036b0 <FLASH_WaitForLastOperation>
 800360c:	4603      	mov	r3, r0
 800360e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8003610:	4b08      	ldr	r3, [pc, #32]	@ (8003634 <HAL_FLASH_Program+0x84>)
 8003612:	695a      	ldr	r2, [r3, #20]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	43db      	mvns	r3, r3
 8003618:	4906      	ldr	r1, [pc, #24]	@ (8003634 <HAL_FLASH_Program+0x84>)
 800361a:	4013      	ands	r3, r2
 800361c:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800361e:	4b04      	ldr	r3, [pc, #16]	@ (8003630 <HAL_FLASH_Program+0x80>)
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8003624:	7dfb      	ldrb	r3, [r7, #23]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20000388 	.word	0x20000388
 8003634:	58004000 	.word	0x58004000

08003638 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003642:	4b0b      	ldr	r3, [pc, #44]	@ (8003670 <HAL_FLASH_Unlock+0x38>)
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	2b00      	cmp	r3, #0
 8003648:	da0b      	bge.n	8003662 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800364a:	4b09      	ldr	r3, [pc, #36]	@ (8003670 <HAL_FLASH_Unlock+0x38>)
 800364c:	4a09      	ldr	r2, [pc, #36]	@ (8003674 <HAL_FLASH_Unlock+0x3c>)
 800364e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003650:	4b07      	ldr	r3, [pc, #28]	@ (8003670 <HAL_FLASH_Unlock+0x38>)
 8003652:	4a09      	ldr	r2, [pc, #36]	@ (8003678 <HAL_FLASH_Unlock+0x40>)
 8003654:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003656:	4b06      	ldr	r3, [pc, #24]	@ (8003670 <HAL_FLASH_Unlock+0x38>)
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	2b00      	cmp	r3, #0
 800365c:	da01      	bge.n	8003662 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003662:	79fb      	ldrb	r3, [r7, #7]
}
 8003664:	4618      	mov	r0, r3
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	58004000 	.word	0x58004000
 8003674:	45670123 	.word	0x45670123
 8003678:	cdef89ab 	.word	0xcdef89ab

0800367c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003686:	4b09      	ldr	r3, [pc, #36]	@ (80036ac <HAL_FLASH_Lock+0x30>)
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	4a08      	ldr	r2, [pc, #32]	@ (80036ac <HAL_FLASH_Lock+0x30>)
 800368c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003690:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8003692:	4b06      	ldr	r3, [pc, #24]	@ (80036ac <HAL_FLASH_Lock+0x30>)
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	2b00      	cmp	r3, #0
 8003698:	db01      	blt.n	800369e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800369e:	79fb      	ldrb	r3, [r7, #7]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	58004000 	.word	0x58004000

080036b0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80036b8:	f7fe fb2e 	bl	8001d18 <HAL_GetTick>
 80036bc:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80036be:	e009      	b.n	80036d4 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80036c0:	f7fe fb2a 	bl	8001d18 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d801      	bhi.n	80036d4 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e053      	b.n	800377c <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80036d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003784 <FLASH_WaitForLastOperation+0xd4>)
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036e0:	d0ee      	beq.n	80036c0 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 80036e2:	4b28      	ldr	r3, [pc, #160]	@ (8003784 <FLASH_WaitForLastOperation+0xd4>)
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80036f2:	4b24      	ldr	r3, [pc, #144]	@ (8003784 <FLASH_WaitForLastOperation+0xd4>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d007      	beq.n	8003712 <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003702:	4b20      	ldr	r3, [pc, #128]	@ (8003784 <FLASH_WaitForLastOperation+0xd4>)
 8003704:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003708:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003710:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8003718:	4013      	ands	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003722:	d307      	bcc.n	8003734 <FLASH_WaitForLastOperation+0x84>
 8003724:	4b17      	ldr	r3, [pc, #92]	@ (8003784 <FLASH_WaitForLastOperation+0xd4>)
 8003726:	699a      	ldr	r2, [r3, #24]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800372e:	4915      	ldr	r1, [pc, #84]	@ (8003784 <FLASH_WaitForLastOperation+0xd4>)
 8003730:	4313      	orrs	r3, r2
 8003732:	618b      	str	r3, [r1, #24]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d004      	beq.n	8003748 <FLASH_WaitForLastOperation+0x98>
 800373e:	4a11      	ldr	r2, [pc, #68]	@ (8003784 <FLASH_WaitForLastOperation+0xd4>)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003746:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00e      	beq.n	800376c <FLASH_WaitForLastOperation+0xbc>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800374e:	4a0e      	ldr	r2, [pc, #56]	@ (8003788 <FLASH_WaitForLastOperation+0xd8>)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e011      	b.n	800377c <FLASH_WaitForLastOperation+0xcc>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003758:	f7fe fade 	bl	8001d18 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	429a      	cmp	r2, r3
 8003766:	d801      	bhi.n	800376c <FLASH_WaitForLastOperation+0xbc>
    {
      return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e007      	b.n	800377c <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800376c:	4b05      	ldr	r3, [pc, #20]	@ (8003784 <FLASH_WaitForLastOperation+0xd4>)
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003774:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003778:	d0ee      	beq.n	8003758 <FLASH_WaitForLastOperation+0xa8>
    }
  }

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	58004000 	.word	0x58004000
 8003788:	20000388 	.word	0x20000388

0800378c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003798:	4b0e      	ldr	r3, [pc, #56]	@ (80037d4 <FLASH_Program_DoubleWord+0x48>)
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	4a0d      	ldr	r2, [pc, #52]	@ (80037d4 <FLASH_Program_DoubleWord+0x48>)
 800379e:	f043 0301 	orr.w	r3, r3, #1
 80037a2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80037aa:	f3bf 8f6f 	isb	sy
}
 80037ae:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80037b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	000a      	movs	r2, r1
 80037be:	2300      	movs	r3, #0
 80037c0:	68f9      	ldr	r1, [r7, #12]
 80037c2:	3104      	adds	r1, #4
 80037c4:	4613      	mov	r3, r2
 80037c6:	600b      	str	r3, [r1, #0]
}
 80037c8:	bf00      	nop
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	58004000 	.word	0x58004000

080037d8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80037e2:	4b24      	ldr	r3, [pc, #144]	@ (8003874 <HAL_FLASHEx_Erase+0x9c>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_FLASHEx_Erase+0x16>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e03d      	b.n	800386a <HAL_FLASHEx_Erase+0x92>
 80037ee:	4b21      	ldr	r3, [pc, #132]	@ (8003874 <HAL_FLASHEx_Erase+0x9c>)
 80037f0:	2201      	movs	r2, #1
 80037f2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80037f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003874 <HAL_FLASHEx_Erase+0x9c>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80037fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80037fe:	f7ff ff57 	bl	80036b0 <FLASH_WaitForLastOperation>
 8003802:	4603      	mov	r3, r0
 8003804:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003806:	7bfb      	ldrb	r3, [r7, #15]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d12a      	bne.n	8003862 <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2b02      	cmp	r3, #2
 8003812:	d124      	bne.n	800385e <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	f04f 32ff 	mov.w	r2, #4294967295
 800381a:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	60bb      	str	r3, [r7, #8]
 8003822:	e012      	b.n	800384a <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8003824:	68b8      	ldr	r0, [r7, #8]
 8003826:	f000 f827 	bl	8003878 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800382a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800382e:	f7ff ff3f 	bl	80036b0 <FLASH_WaitForLastOperation>
 8003832:	4603      	mov	r3, r0
 8003834:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8003836:	7bfb      	ldrb	r3, [r7, #15]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	601a      	str	r2, [r3, #0]
          break;
 8003842:	e00a      	b.n	800385a <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	3301      	adds	r3, #1
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	4413      	add	r3, r2
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	429a      	cmp	r2, r3
 8003858:	d3e4      	bcc.n	8003824 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800385a:	f000 f86f 	bl	800393c <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800385e:	f000 f825 	bl	80038ac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003862:	4b04      	ldr	r3, [pc, #16]	@ (8003874 <HAL_FLASHEx_Erase+0x9c>)
 8003864:	2200      	movs	r2, #0
 8003866:	701a      	strb	r2, [r3, #0]

  return status;
 8003868:	7bfb      	ldrb	r3, [r7, #15]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	20000388 	.word	0x20000388

08003878 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8003880:	4b09      	ldr	r3, [pc, #36]	@ (80038a8 <FLASH_PageErase+0x30>)
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4313      	orrs	r3, r2
 800388e:	4a06      	ldr	r2, [pc, #24]	@ (80038a8 <FLASH_PageErase+0x30>)
 8003890:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003894:	f043 0302 	orr.w	r3, r3, #2
 8003898:	6153      	str	r3, [r2, #20]
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	58004000 	.word	0x58004000

080038ac <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 80038b0:	4b21      	ldr	r3, [pc, #132]	@ (8003938 <FLASH_FlushCaches+0x8c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038bc:	d117      	bne.n	80038ee <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80038be:	4b1e      	ldr	r3, [pc, #120]	@ (8003938 <FLASH_FlushCaches+0x8c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003938 <FLASH_FlushCaches+0x8c>)
 80038c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038c8:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80038ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003938 <FLASH_FlushCaches+0x8c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003938 <FLASH_FlushCaches+0x8c>)
 80038d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	4b18      	ldr	r3, [pc, #96]	@ (8003938 <FLASH_FlushCaches+0x8c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a17      	ldr	r2, [pc, #92]	@ (8003938 <FLASH_FlushCaches+0x8c>)
 80038dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038e0:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038e2:	4b15      	ldr	r3, [pc, #84]	@ (8003938 <FLASH_FlushCaches+0x8c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a14      	ldr	r2, [pc, #80]	@ (8003938 <FLASH_FlushCaches+0x8c>)
 80038e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038ec:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 80038ee:	4b12      	ldr	r3, [pc, #72]	@ (8003938 <FLASH_FlushCaches+0x8c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038fa:	d117      	bne.n	800392c <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80038fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003938 <FLASH_FlushCaches+0x8c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a0d      	ldr	r2, [pc, #52]	@ (8003938 <FLASH_FlushCaches+0x8c>)
 8003902:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003906:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003908:	4b0b      	ldr	r3, [pc, #44]	@ (8003938 <FLASH_FlushCaches+0x8c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a0a      	ldr	r2, [pc, #40]	@ (8003938 <FLASH_FlushCaches+0x8c>)
 800390e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	4b08      	ldr	r3, [pc, #32]	@ (8003938 <FLASH_FlushCaches+0x8c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a07      	ldr	r2, [pc, #28]	@ (8003938 <FLASH_FlushCaches+0x8c>)
 800391a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800391e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003920:	4b05      	ldr	r3, [pc, #20]	@ (8003938 <FLASH_FlushCaches+0x8c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a04      	ldr	r2, [pc, #16]	@ (8003938 <FLASH_FlushCaches+0x8c>)
 8003926:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800392a:	6013      	str	r3, [r2, #0]
  }
}
 800392c:	bf00      	nop
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	58004000 	.word	0x58004000

0800393c <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003940:	4b06      	ldr	r3, [pc, #24]	@ (800395c <FLASH_AcknowledgePageErase+0x20>)
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	4a05      	ldr	r2, [pc, #20]	@ (800395c <FLASH_AcknowledgePageErase+0x20>)
 8003946:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800394a:	f023 0302 	bic.w	r3, r3, #2
 800394e:	6153      	str	r3, [r2, #20]
}
 8003950:	bf00      	nop
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	58004000 	.word	0x58004000

08003960 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800396e:	e14c      	b.n	8003c0a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	2101      	movs	r1, #1
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	fa01 f303 	lsl.w	r3, r1, r3
 800397c:	4013      	ands	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 813e 	beq.w	8003c04 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	2b01      	cmp	r3, #1
 8003992:	d005      	beq.n	80039a0 <HAL_GPIO_Init+0x40>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f003 0303 	and.w	r3, r3, #3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d130      	bne.n	8003a02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	2203      	movs	r2, #3
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4013      	ands	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039d6:	2201      	movs	r2, #1
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	43db      	mvns	r3, r3
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4013      	ands	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	091b      	lsrs	r3, r3, #4
 80039ec:	f003 0201 	and.w	r2, r3, #1
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	2b03      	cmp	r3, #3
 8003a0c:	d017      	beq.n	8003a3e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	2203      	movs	r2, #3
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4013      	ands	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d123      	bne.n	8003a92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	08da      	lsrs	r2, r3, #3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3208      	adds	r2, #8
 8003a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	220f      	movs	r2, #15
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43db      	mvns	r3, r3
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	691a      	ldr	r2, [r3, #16]
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	08da      	lsrs	r2, r3, #3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3208      	adds	r2, #8
 8003a8c:	6939      	ldr	r1, [r7, #16]
 8003a8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f003 0203 	and.w	r2, r3, #3
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 8098 	beq.w	8003c04 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003ad4:	4a54      	ldr	r2, [pc, #336]	@ (8003c28 <HAL_GPIO_Init+0x2c8>)
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	089b      	lsrs	r3, r3, #2
 8003ada:	3302      	adds	r3, #2
 8003adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	220f      	movs	r2, #15
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	43db      	mvns	r3, r3
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4013      	ands	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003afe:	d019      	beq.n	8003b34 <HAL_GPIO_Init+0x1d4>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a4a      	ldr	r2, [pc, #296]	@ (8003c2c <HAL_GPIO_Init+0x2cc>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d013      	beq.n	8003b30 <HAL_GPIO_Init+0x1d0>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a49      	ldr	r2, [pc, #292]	@ (8003c30 <HAL_GPIO_Init+0x2d0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00d      	beq.n	8003b2c <HAL_GPIO_Init+0x1cc>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a48      	ldr	r2, [pc, #288]	@ (8003c34 <HAL_GPIO_Init+0x2d4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d007      	beq.n	8003b28 <HAL_GPIO_Init+0x1c8>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a47      	ldr	r2, [pc, #284]	@ (8003c38 <HAL_GPIO_Init+0x2d8>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d101      	bne.n	8003b24 <HAL_GPIO_Init+0x1c4>
 8003b20:	2304      	movs	r3, #4
 8003b22:	e008      	b.n	8003b36 <HAL_GPIO_Init+0x1d6>
 8003b24:	2307      	movs	r3, #7
 8003b26:	e006      	b.n	8003b36 <HAL_GPIO_Init+0x1d6>
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e004      	b.n	8003b36 <HAL_GPIO_Init+0x1d6>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e002      	b.n	8003b36 <HAL_GPIO_Init+0x1d6>
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <HAL_GPIO_Init+0x1d6>
 8003b34:	2300      	movs	r3, #0
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	f002 0203 	and.w	r2, r2, #3
 8003b3c:	0092      	lsls	r2, r2, #2
 8003b3e:	4093      	lsls	r3, r2
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b46:	4938      	ldr	r1, [pc, #224]	@ (8003c28 <HAL_GPIO_Init+0x2c8>)
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	089b      	lsrs	r3, r3, #2
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b54:	4b39      	ldr	r3, [pc, #228]	@ (8003c3c <HAL_GPIO_Init+0x2dc>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	4013      	ands	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b78:	4a30      	ldr	r2, [pc, #192]	@ (8003c3c <HAL_GPIO_Init+0x2dc>)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b7e:	4b2f      	ldr	r3, [pc, #188]	@ (8003c3c <HAL_GPIO_Init+0x2dc>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	43db      	mvns	r3, r3
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ba2:	4a26      	ldr	r2, [pc, #152]	@ (8003c3c <HAL_GPIO_Init+0x2dc>)
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003ba8:	4b24      	ldr	r3, [pc, #144]	@ (8003c3c <HAL_GPIO_Init+0x2dc>)
 8003baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bce:	4a1b      	ldr	r2, [pc, #108]	@ (8003c3c <HAL_GPIO_Init+0x2dc>)
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8003bd6:	4b19      	ldr	r3, [pc, #100]	@ (8003c3c <HAL_GPIO_Init+0x2dc>)
 8003bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	43db      	mvns	r3, r3
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4013      	ands	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bfc:	4a0f      	ldr	r2, [pc, #60]	@ (8003c3c <HAL_GPIO_Init+0x2dc>)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	3301      	adds	r3, #1
 8003c08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	fa22 f303 	lsr.w	r3, r2, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f47f aeab 	bne.w	8003970 <HAL_GPIO_Init+0x10>
  }
}
 8003c1a:	bf00      	nop
 8003c1c:	bf00      	nop
 8003c1e:	371c      	adds	r7, #28
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	40010000 	.word	0x40010000
 8003c2c:	48000400 	.word	0x48000400
 8003c30:	48000800 	.word	0x48000800
 8003c34:	48000c00 	.word	0x48000c00
 8003c38:	48001000 	.word	0x48001000
 8003c3c:	58000800 	.word	0x58000800

08003c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	807b      	strh	r3, [r7, #2]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c50:	787b      	ldrb	r3, [r7, #1]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c56:	887a      	ldrh	r2, [r7, #2]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c5c:	e002      	b.n	8003c64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c5e:	887a      	ldrh	r2, [r7, #2]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c82:	887a      	ldrh	r2, [r7, #2]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4013      	ands	r3, r2
 8003c88:	041a      	lsls	r2, r3, #16
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	43d9      	mvns	r1, r3
 8003c8e:	887b      	ldrh	r3, [r7, #2]
 8003c90:	400b      	ands	r3, r1
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	619a      	str	r2, [r3, #24]
}
 8003c98:	bf00      	nop
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003cae:	4b08      	ldr	r3, [pc, #32]	@ (8003cd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	88fb      	ldrh	r3, [r7, #6]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d006      	beq.n	8003cc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cba:	4a05      	ldr	r2, [pc, #20]	@ (8003cd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cbc:	88fb      	ldrh	r3, [r7, #6]
 8003cbe:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cc0:	88fb      	ldrh	r3, [r7, #6]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fd fc67 	bl	8001596 <HAL_GPIO_EXTI_Callback>
  }
}
 8003cc8:	bf00      	nop
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	58000800 	.word	0x58000800

08003cd4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003cda:	4b0a      	ldr	r3, [pc, #40]	@ (8003d04 <HAL_HSEM_IRQHandler+0x30>)
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003ce0:	4b08      	ldr	r3, [pc, #32]	@ (8003d04 <HAL_HSEM_IRQHandler+0x30>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	4906      	ldr	r1, [pc, #24]	@ (8003d04 <HAL_HSEM_IRQHandler+0x30>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003cee:	4a05      	ldr	r2, [pc, #20]	@ (8003d04 <HAL_HSEM_IRQHandler+0x30>)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f807 	bl	8003d08 <HAL_HSEM_FreeCallback>
}
 8003cfa:	bf00      	nop
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	58001500 	.word	0x58001500

08003d08 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e08d      	b.n	8003e4a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fd fdae 	bl	80018a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2224      	movs	r2, #36	@ 0x24
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0201 	bic.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d107      	bne.n	8003d96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d92:	609a      	str	r2, [r3, #8]
 8003d94:	e006      	b.n	8003da4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689a      	ldr	r2, [r3, #8]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003da2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d108      	bne.n	8003dbe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dba:	605a      	str	r2, [r3, #4]
 8003dbc:	e007      	b.n	8003dce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dcc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6812      	ldr	r2, [r2, #0]
 8003dd8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ddc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003de0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003df0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691a      	ldr	r2, [r3, #16]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	69d9      	ldr	r1, [r3, #28]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a1a      	ldr	r2, [r3, #32]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	68f9      	ldr	r1, [r7, #12]
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	4798      	blx	r3
  }
}
 8003e7e:	bf00      	nop
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b20      	cmp	r3, #32
 8003e9a:	d138      	bne.n	8003f0e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d101      	bne.n	8003eaa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e032      	b.n	8003f10 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2224      	movs	r2, #36	@ 0x24
 8003eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0201 	bic.w	r2, r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ed8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6819      	ldr	r1, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f042 0201 	orr.w	r2, r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	e000      	b.n	8003f10 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f0e:	2302      	movs	r3, #2
  }
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b20      	cmp	r3, #32
 8003f30:	d139      	bne.n	8003fa6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d101      	bne.n	8003f40 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	e033      	b.n	8003fa8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2224      	movs	r2, #36	@ 0x24
 8003f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0201 	bic.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f6e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	021b      	lsls	r3, r3, #8
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f042 0201 	orr.w	r2, r2, #1
 8003f90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	e000      	b.n	8003fa8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fa6:	2302      	movs	r3, #2
  }
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d01e      	beq.n	8004004 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003fc6:	4b13      	ldr	r3, [pc, #76]	@ (8004014 <HAL_IPCC_Init+0x60>)
 8003fc8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d102      	bne.n	8003fdc <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7fd fcb4 	bl	8001944 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003fdc:	68b8      	ldr	r0, [r7, #8]
 8003fde:	f000 f85b 	bl	8004098 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f82c 	bl	800404c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8004002:	e001      	b.n	8004008 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004008:	7bfb      	ldrb	r3, [r7, #15]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	58000c00 	.word	0x58000c00

08004018 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	4613      	mov	r3, r2
 8004024:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004026:	bf00      	nop
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004032:	b480      	push	{r7}
 8004034:	b085      	sub	sp, #20
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	4613      	mov	r3, r2
 800403e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	e00f      	b.n	800407a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	4a0b      	ldr	r2, [pc, #44]	@ (8004090 <IPCC_SetDefaultCallbacks+0x44>)
 8004064:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	3306      	adds	r3, #6
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	4a08      	ldr	r2, [pc, #32]	@ (8004094 <IPCC_SetDefaultCallbacks+0x48>)
 8004072:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	3301      	adds	r3, #1
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2b05      	cmp	r3, #5
 800407e:	d9ec      	bls.n	800405a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004080:	bf00      	nop
 8004082:	bf00      	nop
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	08004019 	.word	0x08004019
 8004094:	08004033 	.word	0x08004033

08004098 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 80040ac:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	223f      	movs	r2, #63	@ 0x3f
 80040b2:	609a      	str	r2, [r3, #8]
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040c4:	4b05      	ldr	r3, [pc, #20]	@ (80040dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a04      	ldr	r2, [pc, #16]	@ (80040dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040ce:	6013      	str	r3, [r2, #0]
}
 80040d0:	bf00      	nop
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	58000400 	.word	0x58000400

080040e0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80040e4:	4b04      	ldr	r3, [pc, #16]	@ (80040f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	58000400 	.word	0x58000400

080040fc <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	4603      	mov	r3, r0
 8004104:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8004106:	4b11      	ldr	r3, [pc, #68]	@ (800414c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f023 0307 	bic.w	r3, r3, #7
 800410e:	4a0f      	ldr	r2, [pc, #60]	@ (800414c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004110:	f043 0302 	orr.w	r3, r3, #2
 8004114:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004116:	4b0e      	ldr	r3, [pc, #56]	@ (8004150 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	4a0d      	ldr	r2, [pc, #52]	@ (8004150 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800411c:	f043 0304 	orr.w	r3, r3, #4
 8004120:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004122:	79fb      	ldrb	r3, [r7, #7]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004128:	bf30      	wfi
 800412a:	e002      	b.n	8004132 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800412c:	bf40      	sev
    __WFE();
 800412e:	bf20      	wfe
    __WFE();
 8004130:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004132:	4b07      	ldr	r3, [pc, #28]	@ (8004150 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	4a06      	ldr	r2, [pc, #24]	@ (8004150 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8004138:	f023 0304 	bic.w	r3, r3, #4
 800413c:	6113      	str	r3, [r2, #16]
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	58000400 	.word	0x58000400
 8004150:	e000ed00 	.word	0xe000ed00

08004154 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004162:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004166:	d101      	bne.n	800416c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004168:	2301      	movs	r3, #1
 800416a:	e000      	b.n	800416e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <LL_RCC_HSE_Enable>:
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800417c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004186:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800418a:	6013      	str	r3, [r2, #0]
}
 800418c:	bf00      	nop
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <LL_RCC_HSE_Disable>:
{
 8004196:	b480      	push	{r7}
 8004198:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800419a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041a8:	6013      	str	r3, [r2, #0]
}
 80041aa:	bf00      	nop
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <LL_RCC_HSE_IsReady>:
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80041b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041c6:	d101      	bne.n	80041cc <LL_RCC_HSE_IsReady+0x18>
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <LL_RCC_HSE_IsReady+0x1a>
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <LL_RCC_HSI_Enable>:
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80041dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041ea:	6013      	str	r3, [r2, #0]
}
 80041ec:	bf00      	nop
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <LL_RCC_HSI_Disable>:
{
 80041f6:	b480      	push	{r7}
 80041f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80041fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004204:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004208:	6013      	str	r3, [r2, #0]
}
 800420a:	bf00      	nop
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <LL_RCC_HSI_IsReady>:
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004218:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004226:	d101      	bne.n	800422c <LL_RCC_HSI_IsReady+0x18>
 8004228:	2301      	movs	r3, #1
 800422a:	e000      	b.n	800422e <LL_RCC_HSI_IsReady+0x1a>
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004240:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	061b      	lsls	r3, r3, #24
 800424e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004252:	4313      	orrs	r3, r2
 8004254:	604b      	str	r3, [r1, #4]
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <LL_RCC_HSI48_Enable>:
{
 8004262:	b480      	push	{r7}
 8004264:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004266:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800426a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800426e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004272:	f043 0301 	orr.w	r3, r3, #1
 8004276:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800427a:	bf00      	nop
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <LL_RCC_HSI48_Disable>:
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800428c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004290:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004294:	f023 0301 	bic.w	r3, r3, #1
 8004298:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800429c:	bf00      	nop
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <LL_RCC_HSI48_IsReady>:
{
 80042a6:	b480      	push	{r7}
 80042a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80042aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d101      	bne.n	80042be <LL_RCC_HSI48_IsReady+0x18>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <LL_RCC_HSI48_IsReady+0x1a>
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <LL_RCC_LSE_Enable>:
{
 80042ca:	b480      	push	{r7}
 80042cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80042ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042da:	f043 0301 	orr.w	r3, r3, #1
 80042de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80042e2:	bf00      	nop
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <LL_RCC_LSE_Disable>:
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80042f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004304:	bf00      	nop
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <LL_RCC_LSE_EnableBypass>:
{
 800430e:	b480      	push	{r7}
 8004310:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004312:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800431a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800431e:	f043 0304 	orr.w	r3, r3, #4
 8004322:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004326:	bf00      	nop
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <LL_RCC_LSE_DisableBypass>:
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004334:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800433c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004340:	f023 0304 	bic.w	r3, r3, #4
 8004344:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004348:	bf00      	nop
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <LL_RCC_LSE_IsReady>:
{
 8004352:	b480      	push	{r7}
 8004354:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004356:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800435a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b02      	cmp	r3, #2
 8004364:	d101      	bne.n	800436a <LL_RCC_LSE_IsReady+0x18>
 8004366:	2301      	movs	r3, #1
 8004368:	e000      	b.n	800436c <LL_RCC_LSE_IsReady+0x1a>
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <LL_RCC_LSI1_Enable>:
{
 8004376:	b480      	push	{r7}
 8004378:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800437a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800437e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004382:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800438e:	bf00      	nop
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <LL_RCC_LSI1_Disable>:
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800439c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043a8:	f023 0301 	bic.w	r3, r3, #1
 80043ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80043b0:	bf00      	nop
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <LL_RCC_LSI1_IsReady>:
{
 80043ba:	b480      	push	{r7}
 80043bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80043be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d101      	bne.n	80043d2 <LL_RCC_LSI1_IsReady+0x18>
 80043ce:	2301      	movs	r3, #1
 80043d0:	e000      	b.n	80043d4 <LL_RCC_LSI1_IsReady+0x1a>
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <LL_RCC_LSI2_Enable>:
{
 80043de:	b480      	push	{r7}
 80043e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80043e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043ee:	f043 0304 	orr.w	r3, r3, #4
 80043f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80043f6:	bf00      	nop
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <LL_RCC_LSI2_Disable>:
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004404:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004408:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800440c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004410:	f023 0304 	bic.w	r3, r3, #4
 8004414:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004418:	bf00      	nop
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <LL_RCC_LSI2_IsReady>:
{
 8004422:	b480      	push	{r7}
 8004424:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004426:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800442a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b08      	cmp	r3, #8
 8004434:	d101      	bne.n	800443a <LL_RCC_LSI2_IsReady+0x18>
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <LL_RCC_LSI2_IsReady+0x1a>
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <LL_RCC_LSI2_SetTrimming>:
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800444e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004452:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004456:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	021b      	lsls	r3, r3, #8
 800445e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <LL_RCC_MSI_Enable>:
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004478:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004482:	f043 0301 	orr.w	r3, r3, #1
 8004486:	6013      	str	r3, [r2, #0]
}
 8004488:	bf00      	nop
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <LL_RCC_MSI_Disable>:
{
 8004492:	b480      	push	{r7}
 8004494:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004496:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044a0:	f023 0301 	bic.w	r3, r3, #1
 80044a4:	6013      	str	r3, [r2, #0]
}
 80044a6:	bf00      	nop
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <LL_RCC_MSI_IsReady>:
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80044b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d101      	bne.n	80044c6 <LL_RCC_MSI_IsReady+0x16>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <LL_RCC_MSI_IsReady+0x18>
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <LL_RCC_MSI_SetRange>:
{
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80044da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	600b      	str	r3, [r1, #0]
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <LL_RCC_MSI_GetRange>:
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004500:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800450a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2bb0      	cmp	r3, #176	@ 0xb0
 8004510:	d901      	bls.n	8004516 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004512:	23b0      	movs	r3, #176	@ 0xb0
 8004514:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004516:	687b      	ldr	r3, [r7, #4]
}
 8004518:	4618      	mov	r0, r3
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800452c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800453e:	4313      	orrs	r3, r2
 8004540:	604b      	str	r3, [r1, #4]
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <LL_RCC_SetSysClkSource>:
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004556:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f023 0203 	bic.w	r2, r3, #3
 8004560:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4313      	orrs	r3, r2
 8004568:	608b      	str	r3, [r1, #8]
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <LL_RCC_GetSysClkSource>:
{
 8004576:	b480      	push	{r7}
 8004578:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800457a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f003 030c 	and.w	r3, r3, #12
}
 8004584:	4618      	mov	r0, r3
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <LL_RCC_SetAHBPrescaler>:
{
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004596:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	608b      	str	r3, [r1, #8]
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80045be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80045c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <LL_RCC_SetAHB4Prescaler>:
{
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80045ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80045f2:	f023 020f 	bic.w	r2, r3, #15
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	091b      	lsrs	r3, r3, #4
 80045fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <LL_RCC_SetAPB1Prescaler>:
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004618:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004622:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4313      	orrs	r3, r2
 800462a:	608b      	str	r3, [r1, #8]
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <LL_RCC_SetAPB2Prescaler>:
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004640:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800464a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4313      	orrs	r3, r2
 8004652:	608b      	str	r3, [r1, #8]
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <LL_RCC_GetAHBPrescaler>:
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004664:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800466e:	4618      	mov	r0, r3
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <LL_RCC_GetAHB4Prescaler>:
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800467c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004680:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800468a:	4618      	mov	r0, r3
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004698:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046a6:	6013      	str	r3, [r2, #0]
}
 80046a8:	bf00      	nop
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80046b2:	b480      	push	{r7}
 80046b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80046b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046c4:	6013      	str	r3, [r2, #0]
}
 80046c6:	bf00      	nop
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80046d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046e2:	d101      	bne.n	80046e8 <LL_RCC_PLL_IsReady+0x18>
 80046e4:	2301      	movs	r3, #1
 80046e6:	e000      	b.n	80046ea <LL_RCC_PLL_IsReady+0x1a>
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80046f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	0a1b      	lsrs	r3, r3, #8
 8004700:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004704:	4618      	mov	r0, r3
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800470e:	b480      	push	{r7}
 8004710:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004712:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800471c:	4618      	mov	r0, r3
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004726:	b480      	push	{r7}
 8004728:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800472a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8004734:	4618      	mov	r0, r3
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800473e:	b480      	push	{r7}
 8004740:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f003 0303 	and.w	r3, r3, #3
}
 800474c:	4618      	mov	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004756:	b480      	push	{r7}
 8004758:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800475a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004768:	d101      	bne.n	800476e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800477a:	b480      	push	{r7}
 800477c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800477e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004782:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800478a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800478e:	d101      	bne.n	8004794 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004790:	2301      	movs	r3, #1
 8004792:	e000      	b.n	8004796 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80047a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80047ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047b4:	d101      	bne.n	80047ba <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80047b6:	2301      	movs	r3, #1
 80047b8:	e000      	b.n	80047bc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80047c6:	b480      	push	{r7}
 80047c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80047ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047d8:	d101      	bne.n	80047de <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80047da:	2301      	movs	r3, #1
 80047dc:	e000      	b.n	80047e0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80047ea:	b480      	push	{r7}
 80047ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80047ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047fc:	d101      	bne.n	8004802 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80047fe:	2301      	movs	r3, #1
 8004800:	e000      	b.n	8004804 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
	...

08004810 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004810:	b590      	push	{r4, r7, lr}
 8004812:	b08d      	sub	sp, #52	@ 0x34
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e363      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0320 	and.w	r3, r3, #32
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 808d 	beq.w	800494a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004830:	f7ff fea1 	bl	8004576 <LL_RCC_GetSysClkSource>
 8004834:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004836:	f7ff ff82 	bl	800473e <LL_RCC_PLL_GetMainSource>
 800483a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800483c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800483e:	2b00      	cmp	r3, #0
 8004840:	d005      	beq.n	800484e <HAL_RCC_OscConfig+0x3e>
 8004842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004844:	2b0c      	cmp	r3, #12
 8004846:	d147      	bne.n	80048d8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484a:	2b01      	cmp	r3, #1
 800484c:	d144      	bne.n	80048d8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e347      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800485e:	f7ff fe4c 	bl	80044fa <LL_RCC_MSI_GetRange>
 8004862:	4603      	mov	r3, r0
 8004864:	429c      	cmp	r4, r3
 8004866:	d914      	bls.n	8004892 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486c:	4618      	mov	r0, r3
 800486e:	f000 fd03 	bl	8005278 <RCC_SetFlashLatencyFromMSIRange>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e336      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff fe26 	bl	80044d2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff fe4a 	bl	8004524 <LL_RCC_MSI_SetCalibTrimming>
 8004890:	e013      	b.n	80048ba <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff fe1b 	bl	80044d2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff fe3f 	bl	8004524 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fce4 	bl	8005278 <RCC_SetFlashLatencyFromMSIRange>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e317      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80048ba:	f000 fcc9 	bl	8005250 <HAL_RCC_GetHCLKFreq>
 80048be:	4603      	mov	r3, r0
 80048c0:	4aa4      	ldr	r2, [pc, #656]	@ (8004b54 <HAL_RCC_OscConfig+0x344>)
 80048c2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80048c4:	4ba4      	ldr	r3, [pc, #656]	@ (8004b58 <HAL_RCC_OscConfig+0x348>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7fd f9d7 	bl	8001c7c <HAL_InitTick>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d039      	beq.n	8004948 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e308      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01e      	beq.n	800491e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048e0:	f7ff fdc8 	bl	8004474 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048e4:	f7fd fa18 	bl	8001d18 <HAL_GetTick>
 80048e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048ec:	f7fd fa14 	bl	8001d18 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e2f5      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80048fe:	f7ff fdd7 	bl	80044b0 <LL_RCC_MSI_IsReady>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0f1      	beq.n	80048ec <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490c:	4618      	mov	r0, r3
 800490e:	f7ff fde0 	bl	80044d2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff fe04 	bl	8004524 <LL_RCC_MSI_SetCalibTrimming>
 800491c:	e015      	b.n	800494a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800491e:	f7ff fdb8 	bl	8004492 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004922:	f7fd f9f9 	bl	8001d18 <HAL_GetTick>
 8004926:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004928:	e008      	b.n	800493c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800492a:	f7fd f9f5 	bl	8001d18 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e2d6      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800493c:	f7ff fdb8 	bl	80044b0 <LL_RCC_MSI_IsReady>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1f1      	bne.n	800492a <HAL_RCC_OscConfig+0x11a>
 8004946:	e000      	b.n	800494a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004948:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d047      	beq.n	80049e6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004956:	f7ff fe0e 	bl	8004576 <LL_RCC_GetSysClkSource>
 800495a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800495c:	f7ff feef 	bl	800473e <LL_RCC_PLL_GetMainSource>
 8004960:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	2b08      	cmp	r3, #8
 8004966:	d005      	beq.n	8004974 <HAL_RCC_OscConfig+0x164>
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	2b0c      	cmp	r3, #12
 800496c:	d108      	bne.n	8004980 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	2b03      	cmp	r3, #3
 8004972:	d105      	bne.n	8004980 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d134      	bne.n	80049e6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e2b4      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004988:	d102      	bne.n	8004990 <HAL_RCC_OscConfig+0x180>
 800498a:	f7ff fbf5 	bl	8004178 <LL_RCC_HSE_Enable>
 800498e:	e001      	b.n	8004994 <HAL_RCC_OscConfig+0x184>
 8004990:	f7ff fc01 	bl	8004196 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d012      	beq.n	80049c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499c:	f7fd f9bc 	bl	8001d18 <HAL_GetTick>
 80049a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049a4:	f7fd f9b8 	bl	8001d18 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b64      	cmp	r3, #100	@ 0x64
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e299      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80049b6:	f7ff fbfd 	bl	80041b4 <LL_RCC_HSE_IsReady>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0f1      	beq.n	80049a4 <HAL_RCC_OscConfig+0x194>
 80049c0:	e011      	b.n	80049e6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c2:	f7fd f9a9 	bl	8001d18 <HAL_GetTick>
 80049c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049ca:	f7fd f9a5 	bl	8001d18 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b64      	cmp	r3, #100	@ 0x64
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e286      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80049dc:	f7ff fbea 	bl	80041b4 <LL_RCC_HSE_IsReady>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f1      	bne.n	80049ca <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d04c      	beq.n	8004a8c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049f2:	f7ff fdc0 	bl	8004576 <LL_RCC_GetSysClkSource>
 80049f6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049f8:	f7ff fea1 	bl	800473e <LL_RCC_PLL_GetMainSource>
 80049fc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d005      	beq.n	8004a10 <HAL_RCC_OscConfig+0x200>
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	2b0c      	cmp	r3, #12
 8004a08:	d10e      	bne.n	8004a28 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d10b      	bne.n	8004a28 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e266      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff fc09 	bl	8004238 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004a26:	e031      	b.n	8004a8c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d019      	beq.n	8004a64 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a30:	f7ff fbd2 	bl	80041d8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a34:	f7fd f970 	bl	8001d18 <HAL_GetTick>
 8004a38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a3c:	f7fd f96c 	bl	8001d18 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e24d      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004a4e:	f7ff fbe1 	bl	8004214 <LL_RCC_HSI_IsReady>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0f1      	beq.n	8004a3c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff fbeb 	bl	8004238 <LL_RCC_HSI_SetCalibTrimming>
 8004a62:	e013      	b.n	8004a8c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a64:	f7ff fbc7 	bl	80041f6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a68:	f7fd f956 	bl	8001d18 <HAL_GetTick>
 8004a6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a70:	f7fd f952 	bl	8001d18 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e233      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004a82:	f7ff fbc7 	bl	8004214 <LL_RCC_HSI_IsReady>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1f1      	bne.n	8004a70 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0308 	and.w	r3, r3, #8
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d106      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 80a3 	beq.w	8004bec <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d076      	beq.n	8004b9c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0310 	and.w	r3, r3, #16
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d046      	beq.n	8004b48 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004aba:	f7ff fc7e 	bl	80043ba <LL_RCC_LSI1_IsReady>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d113      	bne.n	8004aec <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004ac4:	f7ff fc57 	bl	8004376 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ac8:	f7fd f926 	bl	8001d18 <HAL_GetTick>
 8004acc:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004ad0:	f7fd f922 	bl	8001d18 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e203      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004ae2:	f7ff fc6a 	bl	80043ba <LL_RCC_LSI1_IsReady>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0f1      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004aec:	f7ff fc77 	bl	80043de <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af0:	f7fd f912 	bl	8001d18 <HAL_GetTick>
 8004af4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004af8:	f7fd f90e 	bl	8001d18 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e1ef      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004b0a:	f7ff fc8a 	bl	8004422 <LL_RCC_LSI2_IsReady>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d0f1      	beq.n	8004af8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff fc94 	bl	8004446 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004b1e:	f7ff fc3b 	bl	8004398 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b22:	f7fd f8f9 	bl	8001d18 <HAL_GetTick>
 8004b26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004b2a:	f7fd f8f5 	bl	8001d18 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e1d6      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004b3c:	f7ff fc3d 	bl	80043ba <LL_RCC_LSI1_IsReady>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f1      	bne.n	8004b2a <HAL_RCC_OscConfig+0x31a>
 8004b46:	e051      	b.n	8004bec <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004b48:	f7ff fc15 	bl	8004376 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4c:	f7fd f8e4 	bl	8001d18 <HAL_GetTick>
 8004b50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004b52:	e00c      	b.n	8004b6e <HAL_RCC_OscConfig+0x35e>
 8004b54:	20000028 	.word	0x20000028
 8004b58:	2000002c 	.word	0x2000002c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004b5c:	f7fd f8dc 	bl	8001d18 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e1bd      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004b6e:	f7ff fc24 	bl	80043ba <LL_RCC_LSI1_IsReady>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0f1      	beq.n	8004b5c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004b78:	f7ff fc42 	bl	8004400 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004b7e:	f7fd f8cb 	bl	8001d18 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b03      	cmp	r3, #3
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e1ac      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004b90:	f7ff fc47 	bl	8004422 <LL_RCC_LSI2_IsReady>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1f1      	bne.n	8004b7e <HAL_RCC_OscConfig+0x36e>
 8004b9a:	e027      	b.n	8004bec <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004b9c:	f7ff fc30 	bl	8004400 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba0:	f7fd f8ba 	bl	8001d18 <HAL_GetTick>
 8004ba4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004ba8:	f7fd f8b6 	bl	8001d18 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b03      	cmp	r3, #3
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e197      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004bba:	f7ff fc32 	bl	8004422 <LL_RCC_LSI2_IsReady>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1f1      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004bc4:	f7ff fbe8 	bl	8004398 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc8:	f7fd f8a6 	bl	8001d18 <HAL_GetTick>
 8004bcc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004bd0:	f7fd f8a2 	bl	8001d18 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e183      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004be2:	f7ff fbea 	bl	80043ba <LL_RCC_LSI1_IsReady>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1f1      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d05b      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bf8:	4ba7      	ldr	r3, [pc, #668]	@ (8004e98 <HAL_RCC_OscConfig+0x688>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d114      	bne.n	8004c2e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004c04:	f7ff fa5c 	bl	80040c0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c08:	f7fd f886 	bl	8001d18 <HAL_GetTick>
 8004c0c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c10:	f7fd f882 	bl	8001d18 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e163      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c22:	4b9d      	ldr	r3, [pc, #628]	@ (8004e98 <HAL_RCC_OscConfig+0x688>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f0      	beq.n	8004c10 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d102      	bne.n	8004c3c <HAL_RCC_OscConfig+0x42c>
 8004c36:	f7ff fb48 	bl	80042ca <LL_RCC_LSE_Enable>
 8004c3a:	e00c      	b.n	8004c56 <HAL_RCC_OscConfig+0x446>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	2b05      	cmp	r3, #5
 8004c42:	d104      	bne.n	8004c4e <HAL_RCC_OscConfig+0x43e>
 8004c44:	f7ff fb63 	bl	800430e <LL_RCC_LSE_EnableBypass>
 8004c48:	f7ff fb3f 	bl	80042ca <LL_RCC_LSE_Enable>
 8004c4c:	e003      	b.n	8004c56 <HAL_RCC_OscConfig+0x446>
 8004c4e:	f7ff fb4d 	bl	80042ec <LL_RCC_LSE_Disable>
 8004c52:	f7ff fb6d 	bl	8004330 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d014      	beq.n	8004c88 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c5e:	f7fd f85b 	bl	8001d18 <HAL_GetTick>
 8004c62:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004c64:	e00a      	b.n	8004c7c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c66:	f7fd f857 	bl	8001d18 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e136      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004c7c:	f7ff fb69 	bl	8004352 <LL_RCC_LSE_IsReady>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0ef      	beq.n	8004c66 <HAL_RCC_OscConfig+0x456>
 8004c86:	e013      	b.n	8004cb0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c88:	f7fd f846 	bl	8001d18 <HAL_GetTick>
 8004c8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004c8e:	e00a      	b.n	8004ca6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c90:	f7fd f842 	bl	8001d18 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e121      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004ca6:	f7ff fb54 	bl	8004352 <LL_RCC_LSE_IsReady>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1ef      	bne.n	8004c90 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d02c      	beq.n	8004d16 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d014      	beq.n	8004cee <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004cc4:	f7ff facd 	bl	8004262 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc8:	f7fd f826 	bl	8001d18 <HAL_GetTick>
 8004ccc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cd0:	f7fd f822 	bl	8001d18 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e103      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004ce2:	f7ff fae0 	bl	80042a6 <LL_RCC_HSI48_IsReady>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0f1      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x4c0>
 8004cec:	e013      	b.n	8004d16 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004cee:	f7ff fac9 	bl	8004284 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf2:	f7fd f811 	bl	8001d18 <HAL_GetTick>
 8004cf6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004cf8:	e008      	b.n	8004d0c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cfa:	f7fd f80d 	bl	8001d18 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e0ee      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004d0c:	f7ff facb 	bl	80042a6 <LL_RCC_HSI48_IsReady>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1f1      	bne.n	8004cfa <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 80e4 	beq.w	8004ee8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d20:	f7ff fc29 	bl	8004576 <LL_RCC_GetSysClkSource>
 8004d24:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004d26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	f040 80b4 	bne.w	8004ea0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f003 0203 	and.w	r2, r3, #3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d123      	bne.n	8004d8e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d11c      	bne.n	8004d8e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	0a1b      	lsrs	r3, r3, #8
 8004d58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d114      	bne.n	8004d8e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d10d      	bne.n	8004d8e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d106      	bne.n	8004d8e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d05d      	beq.n	8004e4a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	2b0c      	cmp	r3, #12
 8004d92:	d058      	beq.n	8004e46 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004d94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e0a1      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004da6:	f7ff fc84 	bl	80046b2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004daa:	f7fc ffb5 	bl	8001d18 <HAL_GetTick>
 8004dae:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db2:	f7fc ffb1 	bl	8001d18 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e092      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1ef      	bne.n	8004db2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dd6:	68da      	ldr	r2, [r3, #12]
 8004dd8:	4b30      	ldr	r3, [pc, #192]	@ (8004e9c <HAL_RCC_OscConfig+0x68c>)
 8004dda:	4013      	ands	r3, r2
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004de4:	4311      	orrs	r1, r2
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004dea:	0212      	lsls	r2, r2, #8
 8004dec:	4311      	orrs	r1, r2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004df2:	4311      	orrs	r1, r2
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004df8:	4311      	orrs	r1, r2
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e04:	4313      	orrs	r3, r2
 8004e06:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e08:	f7ff fc44 	bl	8004694 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e1c:	f7fc ff7c 	bl	8001d18 <HAL_GetTick>
 8004e20:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e24:	f7fc ff78 	bl	8001d18 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e059      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0ef      	beq.n	8004e24 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e44:	e050      	b.n	8004ee8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e04f      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d147      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e58:	f7ff fc1c 	bl	8004694 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e6c:	f7fc ff54 	bl	8001d18 <HAL_GetTick>
 8004e70:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e72:	e008      	b.n	8004e86 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e74:	f7fc ff50 	bl	8001d18 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e031      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0ef      	beq.n	8004e74 <HAL_RCC_OscConfig+0x664>
 8004e94:	e028      	b.n	8004ee8 <HAL_RCC_OscConfig+0x6d8>
 8004e96:	bf00      	nop
 8004e98:	58000400 	.word	0x58000400
 8004e9c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	2b0c      	cmp	r3, #12
 8004ea4:	d01e      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea6:	f7ff fc04 	bl	80046b2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eaa:	f7fc ff35 	bl	8001d18 <HAL_GetTick>
 8004eae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb2:	f7fc ff31 	bl	8001d18 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e012      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ec4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1ef      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004ed2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004edc:	4b05      	ldr	r3, [pc, #20]	@ (8004ef4 <HAL_RCC_OscConfig+0x6e4>)
 8004ede:	4013      	ands	r3, r2
 8004ee0:	60cb      	str	r3, [r1, #12]
 8004ee2:	e001      	b.n	8004ee8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e000      	b.n	8004eea <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3734      	adds	r7, #52	@ 0x34
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd90      	pop	{r4, r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	eefefffc 	.word	0xeefefffc

08004ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e12d      	b.n	8005168 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f0c:	4b98      	ldr	r3, [pc, #608]	@ (8005170 <HAL_RCC_ClockConfig+0x278>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0307 	and.w	r3, r3, #7
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d91b      	bls.n	8004f52 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1a:	4b95      	ldr	r3, [pc, #596]	@ (8005170 <HAL_RCC_ClockConfig+0x278>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f023 0207 	bic.w	r2, r3, #7
 8004f22:	4993      	ldr	r1, [pc, #588]	@ (8005170 <HAL_RCC_ClockConfig+0x278>)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f2a:	f7fc fef5 	bl	8001d18 <HAL_GetTick>
 8004f2e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004f32:	f7fc fef1 	bl	8001d18 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e111      	b.n	8005168 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f44:	4b8a      	ldr	r3, [pc, #552]	@ (8005170 <HAL_RCC_ClockConfig+0x278>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d1ef      	bne.n	8004f32 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d016      	beq.n	8004f8c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7ff fb13 	bl	800458e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f68:	f7fc fed6 	bl	8001d18 <HAL_GetTick>
 8004f6c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f70:	f7fc fed2 	bl	8001d18 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e0f2      	b.n	8005168 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004f82:	f7ff fbe8 	bl	8004756 <LL_RCC_IsActiveFlag_HPRE>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0f1      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0320 	and.w	r3, r3, #32
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d016      	beq.n	8004fc6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff fb0a 	bl	80045b6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004fa2:	f7fc feb9 	bl	8001d18 <HAL_GetTick>
 8004fa6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004faa:	f7fc feb5 	bl	8001d18 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e0d5      	b.n	8005168 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004fbc:	f7ff fbdd 	bl	800477a <LL_RCC_IsActiveFlag_C2HPRE>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0f1      	beq.n	8004faa <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d016      	beq.n	8005000 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7ff fb03 	bl	80045e2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004fdc:	f7fc fe9c 	bl	8001d18 <HAL_GetTick>
 8004fe0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004fe4:	f7fc fe98 	bl	8001d18 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e0b8      	b.n	8005168 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004ff6:	f7ff fbd3 	bl	80047a0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0f1      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b00      	cmp	r3, #0
 800500a:	d016      	beq.n	800503a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	4618      	mov	r0, r3
 8005012:	f7ff fafd 	bl	8004610 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005016:	f7fc fe7f 	bl	8001d18 <HAL_GetTick>
 800501a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800501c:	e008      	b.n	8005030 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800501e:	f7fc fe7b 	bl	8001d18 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e09b      	b.n	8005168 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005030:	f7ff fbc9 	bl	80047c6 <LL_RCC_IsActiveFlag_PPRE1>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d0f1      	beq.n	800501e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0308 	and.w	r3, r3, #8
 8005042:	2b00      	cmp	r3, #0
 8005044:	d017      	beq.n	8005076 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	4618      	mov	r0, r3
 800504e:	f7ff faf3 	bl	8004638 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005052:	f7fc fe61 	bl	8001d18 <HAL_GetTick>
 8005056:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005058:	e008      	b.n	800506c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800505a:	f7fc fe5d 	bl	8001d18 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e07d      	b.n	8005168 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800506c:	f7ff fbbd 	bl	80047ea <LL_RCC_IsActiveFlag_PPRE2>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0f1      	beq.n	800505a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d043      	beq.n	800510a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b02      	cmp	r3, #2
 8005088:	d106      	bne.n	8005098 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800508a:	f7ff f893 	bl	80041b4 <LL_RCC_HSE_IsReady>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d11e      	bne.n	80050d2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e067      	b.n	8005168 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2b03      	cmp	r3, #3
 800509e:	d106      	bne.n	80050ae <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80050a0:	f7ff fb16 	bl	80046d0 <LL_RCC_PLL_IsReady>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d113      	bne.n	80050d2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e05c      	b.n	8005168 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d106      	bne.n	80050c4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80050b6:	f7ff f9fb 	bl	80044b0 <LL_RCC_MSI_IsReady>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d108      	bne.n	80050d2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e051      	b.n	8005168 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80050c4:	f7ff f8a6 	bl	8004214 <LL_RCC_HSI_IsReady>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e04a      	b.n	8005168 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff fa39 	bl	800454e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050dc:	f7fc fe1c 	bl	8001d18 <HAL_GetTick>
 80050e0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e2:	e00a      	b.n	80050fa <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e4:	f7fc fe18 	bl	8001d18 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e036      	b.n	8005168 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fa:	f7ff fa3c 	bl	8004576 <LL_RCC_GetSysClkSource>
 80050fe:	4602      	mov	r2, r0
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	429a      	cmp	r2, r3
 8005108:	d1ec      	bne.n	80050e4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800510a:	4b19      	ldr	r3, [pc, #100]	@ (8005170 <HAL_RCC_ClockConfig+0x278>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	429a      	cmp	r2, r3
 8005116:	d21b      	bcs.n	8005150 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005118:	4b15      	ldr	r3, [pc, #84]	@ (8005170 <HAL_RCC_ClockConfig+0x278>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f023 0207 	bic.w	r2, r3, #7
 8005120:	4913      	ldr	r1, [pc, #76]	@ (8005170 <HAL_RCC_ClockConfig+0x278>)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	4313      	orrs	r3, r2
 8005126:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005128:	f7fc fdf6 	bl	8001d18 <HAL_GetTick>
 800512c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800512e:	e008      	b.n	8005142 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005130:	f7fc fdf2 	bl	8001d18 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e012      	b.n	8005168 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005142:	4b0b      	ldr	r3, [pc, #44]	@ (8005170 <HAL_RCC_ClockConfig+0x278>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d1ef      	bne.n	8005130 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005150:	f000 f87e 	bl	8005250 <HAL_RCC_GetHCLKFreq>
 8005154:	4603      	mov	r3, r0
 8005156:	4a07      	ldr	r2, [pc, #28]	@ (8005174 <HAL_RCC_ClockConfig+0x27c>)
 8005158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800515a:	f7fc fde9 	bl	8001d30 <HAL_GetTickPrio>
 800515e:	4603      	mov	r3, r0
 8005160:	4618      	mov	r0, r3
 8005162:	f7fc fd8b 	bl	8001c7c <HAL_InitTick>
 8005166:	4603      	mov	r3, r0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	58004000 	.word	0x58004000
 8005174:	20000028 	.word	0x20000028

08005178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005178:	b590      	push	{r4, r7, lr}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800517e:	f7ff f9fa 	bl	8004576 <LL_RCC_GetSysClkSource>
 8005182:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10a      	bne.n	80051a0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800518a:	f7ff f9b6 	bl	80044fa <LL_RCC_MSI_GetRange>
 800518e:	4603      	mov	r3, r0
 8005190:	091b      	lsrs	r3, r3, #4
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	4a2b      	ldr	r2, [pc, #172]	@ (8005244 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	e04b      	b.n	8005238 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d102      	bne.n	80051ac <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051a6:	4b28      	ldr	r3, [pc, #160]	@ (8005248 <HAL_RCC_GetSysClockFreq+0xd0>)
 80051a8:	60fb      	str	r3, [r7, #12]
 80051aa:	e045      	b.n	8005238 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b08      	cmp	r3, #8
 80051b0:	d10a      	bne.n	80051c8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80051b2:	f7fe ffcf 	bl	8004154 <LL_RCC_HSE_IsEnabledDiv2>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d102      	bne.n	80051c2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80051bc:	4b22      	ldr	r3, [pc, #136]	@ (8005248 <HAL_RCC_GetSysClockFreq+0xd0>)
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	e03a      	b.n	8005238 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80051c2:	4b22      	ldr	r3, [pc, #136]	@ (800524c <HAL_RCC_GetSysClockFreq+0xd4>)
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	e037      	b.n	8005238 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80051c8:	f7ff fab9 	bl	800473e <LL_RCC_PLL_GetMainSource>
 80051cc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d003      	beq.n	80051dc <HAL_RCC_GetSysClockFreq+0x64>
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	2b03      	cmp	r3, #3
 80051d8:	d003      	beq.n	80051e2 <HAL_RCC_GetSysClockFreq+0x6a>
 80051da:	e00d      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80051dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005248 <HAL_RCC_GetSysClockFreq+0xd0>)
 80051de:	60bb      	str	r3, [r7, #8]
        break;
 80051e0:	e015      	b.n	800520e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80051e2:	f7fe ffb7 	bl	8004154 <LL_RCC_HSE_IsEnabledDiv2>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d102      	bne.n	80051f2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80051ec:	4b16      	ldr	r3, [pc, #88]	@ (8005248 <HAL_RCC_GetSysClockFreq+0xd0>)
 80051ee:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80051f0:	e00d      	b.n	800520e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80051f2:	4b16      	ldr	r3, [pc, #88]	@ (800524c <HAL_RCC_GetSysClockFreq+0xd4>)
 80051f4:	60bb      	str	r3, [r7, #8]
        break;
 80051f6:	e00a      	b.n	800520e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80051f8:	f7ff f97f 	bl	80044fa <LL_RCC_MSI_GetRange>
 80051fc:	4603      	mov	r3, r0
 80051fe:	091b      	lsrs	r3, r3, #4
 8005200:	f003 030f 	and.w	r3, r3, #15
 8005204:	4a0f      	ldr	r2, [pc, #60]	@ (8005244 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800520a:	60bb      	str	r3, [r7, #8]
        break;
 800520c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800520e:	f7ff fa71 	bl	80046f4 <LL_RCC_PLL_GetN>
 8005212:	4602      	mov	r2, r0
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	fb03 f402 	mul.w	r4, r3, r2
 800521a:	f7ff fa84 	bl	8004726 <LL_RCC_PLL_GetDivider>
 800521e:	4603      	mov	r3, r0
 8005220:	091b      	lsrs	r3, r3, #4
 8005222:	3301      	adds	r3, #1
 8005224:	fbb4 f4f3 	udiv	r4, r4, r3
 8005228:	f7ff fa71 	bl	800470e <LL_RCC_PLL_GetR>
 800522c:	4603      	mov	r3, r0
 800522e:	0f5b      	lsrs	r3, r3, #29
 8005230:	3301      	adds	r3, #1
 8005232:	fbb4 f3f3 	udiv	r3, r4, r3
 8005236:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005238:	68fb      	ldr	r3, [r7, #12]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	bd90      	pop	{r4, r7, pc}
 8005242:	bf00      	nop
 8005244:	0800aea0 	.word	0x0800aea0
 8005248:	00f42400 	.word	0x00f42400
 800524c:	01e84800 	.word	0x01e84800

08005250 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005250:	b598      	push	{r3, r4, r7, lr}
 8005252:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005254:	f7ff ff90 	bl	8005178 <HAL_RCC_GetSysClockFreq>
 8005258:	4604      	mov	r4, r0
 800525a:	f7ff fa01 	bl	8004660 <LL_RCC_GetAHBPrescaler>
 800525e:	4603      	mov	r3, r0
 8005260:	091b      	lsrs	r3, r3, #4
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	4a03      	ldr	r2, [pc, #12]	@ (8005274 <HAL_RCC_GetHCLKFreq+0x24>)
 8005268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800526c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005270:	4618      	mov	r0, r3
 8005272:	bd98      	pop	{r3, r4, r7, pc}
 8005274:	0800ae60 	.word	0x0800ae60

08005278 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005278:	b590      	push	{r4, r7, lr}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2bb0      	cmp	r3, #176	@ 0xb0
 8005284:	d903      	bls.n	800528e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005286:	4b15      	ldr	r3, [pc, #84]	@ (80052dc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	e007      	b.n	800529e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	091b      	lsrs	r3, r3, #4
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	4a11      	ldr	r2, [pc, #68]	@ (80052dc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800529c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800529e:	f7ff f9eb 	bl	8004678 <LL_RCC_GetAHB4Prescaler>
 80052a2:	4603      	mov	r3, r0
 80052a4:	091b      	lsrs	r3, r3, #4
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	4a0d      	ldr	r2, [pc, #52]	@ (80052e0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80052ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4a0a      	ldr	r2, [pc, #40]	@ (80052e4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80052bc:	fba2 2303 	umull	r2, r3, r2, r3
 80052c0:	0c9c      	lsrs	r4, r3, #18
 80052c2:	f7fe ff0d 	bl	80040e0 <HAL_PWREx_GetVoltageRange>
 80052c6:	4603      	mov	r3, r0
 80052c8:	4619      	mov	r1, r3
 80052ca:	4620      	mov	r0, r4
 80052cc:	f000 f80c 	bl	80052e8 <RCC_SetFlashLatency>
 80052d0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd90      	pop	{r4, r7, pc}
 80052da:	bf00      	nop
 80052dc:	0800aea0 	.word	0x0800aea0
 80052e0:	0800ae60 	.word	0x0800ae60
 80052e4:	431bde83 	.word	0x431bde83

080052e8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80052e8:	b590      	push	{r4, r7, lr}
 80052ea:	b093      	sub	sp, #76	@ 0x4c
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80052f2:	4b37      	ldr	r3, [pc, #220]	@ (80053d0 <RCC_SetFlashLatency+0xe8>)
 80052f4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80052f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80052fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80052fe:	4a35      	ldr	r2, [pc, #212]	@ (80053d4 <RCC_SetFlashLatency+0xec>)
 8005300:	f107 031c 	add.w	r3, r7, #28
 8005304:	ca07      	ldmia	r2, {r0, r1, r2}
 8005306:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800530a:	4b33      	ldr	r3, [pc, #204]	@ (80053d8 <RCC_SetFlashLatency+0xf0>)
 800530c:	f107 040c 	add.w	r4, r7, #12
 8005310:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005312:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005316:	2300      	movs	r3, #0
 8005318:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005320:	d11a      	bne.n	8005358 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005322:	2300      	movs	r3, #0
 8005324:	643b      	str	r3, [r7, #64]	@ 0x40
 8005326:	e013      	b.n	8005350 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	3348      	adds	r3, #72	@ 0x48
 800532e:	443b      	add	r3, r7
 8005330:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	429a      	cmp	r2, r3
 8005338:	d807      	bhi.n	800534a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800533a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	3348      	adds	r3, #72	@ 0x48
 8005340:	443b      	add	r3, r7
 8005342:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005346:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8005348:	e020      	b.n	800538c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800534a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800534c:	3301      	adds	r3, #1
 800534e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005350:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005352:	2b03      	cmp	r3, #3
 8005354:	d9e8      	bls.n	8005328 <RCC_SetFlashLatency+0x40>
 8005356:	e019      	b.n	800538c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005358:	2300      	movs	r3, #0
 800535a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800535c:	e013      	b.n	8005386 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800535e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	3348      	adds	r3, #72	@ 0x48
 8005364:	443b      	add	r3, r7
 8005366:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	429a      	cmp	r2, r3
 800536e:	d807      	bhi.n	8005380 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	3348      	adds	r3, #72	@ 0x48
 8005376:	443b      	add	r3, r7
 8005378:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800537c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800537e:	e005      	b.n	800538c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005382:	3301      	adds	r3, #1
 8005384:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005388:	2b02      	cmp	r3, #2
 800538a:	d9e8      	bls.n	800535e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800538c:	4b13      	ldr	r3, [pc, #76]	@ (80053dc <RCC_SetFlashLatency+0xf4>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f023 0207 	bic.w	r2, r3, #7
 8005394:	4911      	ldr	r1, [pc, #68]	@ (80053dc <RCC_SetFlashLatency+0xf4>)
 8005396:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005398:	4313      	orrs	r3, r2
 800539a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800539c:	f7fc fcbc 	bl	8001d18 <HAL_GetTick>
 80053a0:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80053a2:	e008      	b.n	80053b6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80053a4:	f7fc fcb8 	bl	8001d18 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d901      	bls.n	80053b6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e007      	b.n	80053c6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80053b6:	4b09      	ldr	r3, [pc, #36]	@ (80053dc <RCC_SetFlashLatency+0xf4>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d1ef      	bne.n	80053a4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	374c      	adds	r7, #76	@ 0x4c
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd90      	pop	{r4, r7, pc}
 80053ce:	bf00      	nop
 80053d0:	0800acbc 	.word	0x0800acbc
 80053d4:	0800accc 	.word	0x0800accc
 80053d8:	0800acd8 	.word	0x0800acd8
 80053dc:	58004000 	.word	0x58004000

080053e0 <LL_RCC_LSE_IsEnabled>:
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80053e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <LL_RCC_LSE_IsEnabled+0x18>
 80053f4:	2301      	movs	r3, #1
 80053f6:	e000      	b.n	80053fa <LL_RCC_LSE_IsEnabled+0x1a>
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <LL_RCC_LSE_IsReady>:
{
 8005404:	b480      	push	{r7}
 8005406:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800540c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b02      	cmp	r3, #2
 8005416:	d101      	bne.n	800541c <LL_RCC_LSE_IsReady+0x18>
 8005418:	2301      	movs	r3, #1
 800541a:	e000      	b.n	800541e <LL_RCC_LSE_IsReady+0x1a>
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <LL_RCC_SetRFWKPClockSource>:
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005430:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005434:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005438:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800543c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4313      	orrs	r3, r2
 8005444:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <LL_RCC_SetSMPSClockSource>:
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800545c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005462:	f023 0203 	bic.w	r2, r3, #3
 8005466:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4313      	orrs	r3, r2
 800546e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <LL_RCC_SetSMPSPrescaler>:
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800548e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4313      	orrs	r3, r2
 8005496:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <LL_RCC_SetUSARTClockSource>:
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80054ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b4:	f023 0203 	bic.w	r2, r3, #3
 80054b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4313      	orrs	r3, r2
 80054c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <LL_RCC_SetLPUARTClockSource>:
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80054d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80054e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <LL_RCC_SetI2CClockSource>:
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005504:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005508:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	091b      	lsrs	r3, r3, #4
 8005510:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005514:	43db      	mvns	r3, r3
 8005516:	401a      	ands	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	011b      	lsls	r3, r3, #4
 800551c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005520:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005524:	4313      	orrs	r3, r2
 8005526:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <LL_RCC_SetLPTIMClockSource>:
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800553e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005542:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	0c1b      	lsrs	r3, r3, #16
 800554a:	041b      	lsls	r3, r3, #16
 800554c:	43db      	mvns	r3, r3
 800554e:	401a      	ands	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	041b      	lsls	r3, r3, #16
 8005554:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005558:	4313      	orrs	r3, r2
 800555a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800555e:	bf00      	nop
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <LL_RCC_SetSAIClockSource>:
{
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005572:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800557a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800557e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4313      	orrs	r3, r2
 8005586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <LL_RCC_SetRNGClockSource>:
{
 8005596:	b480      	push	{r7}
 8005598:	b083      	sub	sp, #12
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800559e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80055aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80055b6:	bf00      	nop
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <LL_RCC_SetCLK48ClockSource>:
{
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80055ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4313      	orrs	r3, r2
 80055de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80055e2:	bf00      	nop
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <LL_RCC_SetUSBClockSource>:
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b082      	sub	sp, #8
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7ff ffe3 	bl	80055c2 <LL_RCC_SetCLK48ClockSource>
}
 80055fc:	bf00      	nop
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <LL_RCC_SetADCClockSource>:
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800560c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005614:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005618:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4313      	orrs	r3, r2
 8005620:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <LL_RCC_SetRTCClockSource>:
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005638:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800563c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005640:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005644:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4313      	orrs	r3, r2
 800564c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <LL_RCC_GetRTCClockSource>:
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005660:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005668:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800566c:	4618      	mov	r0, r3
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <LL_RCC_ForceBackupDomainReset>:
{
 8005676:	b480      	push	{r7}
 8005678:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800567a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800567e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005682:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800568a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800568e:	bf00      	nop
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005698:	b480      	push	{r7}
 800569a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800569c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80056b0:	bf00      	nop
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <LL_RCC_PLLSAI1_Enable>:
{
 80056ba:	b480      	push	{r7}
 80056bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80056be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80056cc:	6013      	str	r3, [r2, #0]
}
 80056ce:	bf00      	nop
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <LL_RCC_PLLSAI1_Disable>:
{
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80056dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80056ea:	6013      	str	r3, [r2, #0]
}
 80056ec:	bf00      	nop
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <LL_RCC_PLLSAI1_IsReady>:
{
 80056f6:	b480      	push	{r7}
 80056f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80056fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005704:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005708:	d101      	bne.n	800570e <LL_RCC_PLLSAI1_IsReady+0x18>
 800570a:	2301      	movs	r3, #1
 800570c:	e000      	b.n	8005710 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b088      	sub	sp, #32
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005722:	2300      	movs	r3, #0
 8005724:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005726:	2300      	movs	r3, #0
 8005728:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005732:	2b00      	cmp	r3, #0
 8005734:	d034      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800573e:	d021      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005740:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005744:	d81b      	bhi.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005746:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800574a:	d01d      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800574c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005750:	d815      	bhi.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00b      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005756:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800575a:	d110      	bne.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800575c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800576a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800576c:	e00d      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	3304      	adds	r3, #4
 8005772:	4618      	mov	r0, r3
 8005774:	f000 f947 	bl	8005a06 <RCCEx_PLLSAI1_ConfigNP>
 8005778:	4603      	mov	r3, r0
 800577a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800577c:	e005      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	77fb      	strb	r3, [r7, #31]
        break;
 8005782:	e002      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005784:	bf00      	nop
 8005786:	e000      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005788:	bf00      	nop
    }

    if (ret == HAL_OK)
 800578a:	7ffb      	ldrb	r3, [r7, #31]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d105      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005794:	4618      	mov	r0, r3
 8005796:	f7ff fee8 	bl	800556a <LL_RCC_SetSAIClockSource>
 800579a:	e001      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800579c:	7ffb      	ldrb	r3, [r7, #31]
 800579e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d046      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80057ac:	f7ff ff56 	bl	800565c <LL_RCC_GetRTCClockSource>
 80057b0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d03c      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80057bc:	f7fe fc80 	bl	80040c0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d105      	bne.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7ff ff30 	bl	8005630 <LL_RCC_SetRTCClockSource>
 80057d0:	e02e      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80057d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057da:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80057dc:	f7ff ff4b 	bl	8005676 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80057e0:	f7ff ff5a 	bl	8005698 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ee:	4313      	orrs	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80057f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80057fc:	f7ff fdf0 	bl	80053e0 <LL_RCC_LSE_IsEnabled>
 8005800:	4603      	mov	r3, r0
 8005802:	2b01      	cmp	r3, #1
 8005804:	d114      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005806:	f7fc fa87 	bl	8001d18 <HAL_GetTick>
 800580a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800580c:	e00b      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800580e:	f7fc fa83 	bl	8001d18 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800581c:	4293      	cmp	r3, r2
 800581e:	d902      	bls.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	77fb      	strb	r3, [r7, #31]
              break;
 8005824:	e004      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005826:	f7ff fded 	bl	8005404 <LL_RCC_LSE_IsReady>
 800582a:	4603      	mov	r3, r0
 800582c:	2b01      	cmp	r3, #1
 800582e:	d1ee      	bne.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005830:	7ffb      	ldrb	r3, [r7, #31]
 8005832:	77bb      	strb	r3, [r7, #30]
 8005834:	e001      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005836:	7ffb      	ldrb	r3, [r7, #31]
 8005838:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d004      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	4618      	mov	r0, r3
 800584c:	f7ff fe2a 	bl	80054a4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d004      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	69db      	ldr	r3, [r3, #28]
 8005860:	4618      	mov	r0, r3
 8005862:	f7ff fe35 	bl	80054d0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0310 	and.w	r3, r3, #16
 800586e:	2b00      	cmp	r3, #0
 8005870:	d004      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff fe5d 	bl	8005536 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0320 	and.w	r3, r3, #32
 8005884:	2b00      	cmp	r3, #0
 8005886:	d004      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588c:	4618      	mov	r0, r3
 800588e:	f7ff fe52 	bl	8005536 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b00      	cmp	r3, #0
 800589c:	d004      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7ff fe2a 	bl	80054fc <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0308 	and.w	r3, r3, #8
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d004      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7ff fe1f 	bl	80054fc <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d022      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7ff fe8d 	bl	80055ee <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058dc:	d107      	bne.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80058de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058ec:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058f6:	d10b      	bne.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3304      	adds	r3, #4
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 f8dd 	bl	8005abc <RCCEx_PLLSAI1_ConfigNQ>
 8005902:	4603      	mov	r3, r0
 8005904:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005906:	7ffb      	ldrb	r3, [r7, #31]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800590c:	7ffb      	ldrb	r3, [r7, #31]
 800590e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005918:	2b00      	cmp	r3, #0
 800591a:	d02b      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005920:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005924:	d008      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800592a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800592e:	d003      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005934:	2b00      	cmp	r3, #0
 8005936:	d105      	bne.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800593c:	4618      	mov	r0, r3
 800593e:	f7ff fe2a 	bl	8005596 <LL_RCC_SetRNGClockSource>
 8005942:	e00a      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005948:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800594c:	60fb      	str	r3, [r7, #12]
 800594e:	2000      	movs	r0, #0
 8005950:	f7ff fe21 	bl	8005596 <LL_RCC_SetRNGClockSource>
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f7ff fe34 	bl	80055c2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800595e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005962:	d107      	bne.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005964:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800596e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005972:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800597c:	2b00      	cmp	r3, #0
 800597e:	d022      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff fe3d 	bl	8005604 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800598e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005992:	d107      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005994:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800599e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059a2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059ac:	d10b      	bne.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	3304      	adds	r3, #4
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 f8dd 	bl	8005b72 <RCCEx_PLLSAI1_ConfigNR>
 80059b8:	4603      	mov	r3, r0
 80059ba:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80059bc:	7ffb      	ldrb	r3, [r7, #31]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80059c2:	7ffb      	ldrb	r3, [r7, #31]
 80059c4:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d004      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7ff fd26 	bl	8005428 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d009      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7ff fd45 	bl	800547c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff fd2c 	bl	8005454 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80059fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3720      	adds	r7, #32
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b084      	sub	sp, #16
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005a12:	f7ff fe61 	bl	80056d8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a16:	f7fc f97f 	bl	8001d18 <HAL_GetTick>
 8005a1a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005a1c:	e009      	b.n	8005a32 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a1e:	f7fc f97b 	bl	8001d18 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d902      	bls.n	8005a32 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a30:	e004      	b.n	8005a3c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005a32:	f7ff fe60 	bl	80056f6 <LL_RCC_PLLSAI1_IsReady>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1f0      	bne.n	8005a1e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d137      	bne.n	8005ab2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005a42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	021b      	lsls	r3, r3, #8
 8005a52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a56:	4313      	orrs	r3, r2
 8005a58:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005a5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005a70:	f7ff fe23 	bl	80056ba <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a74:	f7fc f950 	bl	8001d18 <HAL_GetTick>
 8005a78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005a7a:	e009      	b.n	8005a90 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a7c:	f7fc f94c 	bl	8001d18 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d902      	bls.n	8005a90 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	73fb      	strb	r3, [r7, #15]
        break;
 8005a8e:	e004      	b.n	8005a9a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005a90:	f7ff fe31 	bl	80056f6 <LL_RCC_PLLSAI1_IsReady>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d1f0      	bne.n	8005a7c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d108      	bne.n	8005ab2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005aa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aa4:	691a      	ldr	r2, [r3, #16]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005ac8:	f7ff fe06 	bl	80056d8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005acc:	f7fc f924 	bl	8001d18 <HAL_GetTick>
 8005ad0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ad2:	e009      	b.n	8005ae8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ad4:	f7fc f920 	bl	8001d18 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d902      	bls.n	8005ae8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	73fb      	strb	r3, [r7, #15]
      break;
 8005ae6:	e004      	b.n	8005af2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ae8:	f7ff fe05 	bl	80056f6 <LL_RCC_PLLSAI1_IsReady>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1f0      	bne.n	8005ad4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d137      	bne.n	8005b68 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	021b      	lsls	r3, r3, #8
 8005b08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005b10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b22:	4313      	orrs	r3, r2
 8005b24:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005b26:	f7ff fdc8 	bl	80056ba <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b2a:	f7fc f8f5 	bl	8001d18 <HAL_GetTick>
 8005b2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b30:	e009      	b.n	8005b46 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b32:	f7fc f8f1 	bl	8001d18 <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d902      	bls.n	8005b46 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	73fb      	strb	r3, [r7, #15]
        break;
 8005b44:	e004      	b.n	8005b50 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b46:	f7ff fdd6 	bl	80056f6 <LL_RCC_PLLSAI1_IsReady>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d1f0      	bne.n	8005b32 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d108      	bne.n	8005b68 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005b56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b5a:	691a      	ldr	r2, [r3, #16]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b64:	4313      	orrs	r3, r2
 8005b66:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b084      	sub	sp, #16
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005b7e:	f7ff fdab 	bl	80056d8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b82:	f7fc f8c9 	bl	8001d18 <HAL_GetTick>
 8005b86:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005b88:	e009      	b.n	8005b9e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b8a:	f7fc f8c5 	bl	8001d18 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d902      	bls.n	8005b9e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b9c:	e004      	b.n	8005ba8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005b9e:	f7ff fdaa 	bl	80056f6 <LL_RCC_PLLSAI1_IsReady>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1f0      	bne.n	8005b8a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d137      	bne.n	8005c1e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005bae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	021b      	lsls	r3, r3, #8
 8005bbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005bc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005bdc:	f7ff fd6d 	bl	80056ba <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be0:	f7fc f89a 	bl	8001d18 <HAL_GetTick>
 8005be4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005be6:	e009      	b.n	8005bfc <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005be8:	f7fc f896 	bl	8001d18 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d902      	bls.n	8005bfc <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	73fb      	strb	r3, [r7, #15]
        break;
 8005bfa:	e004      	b.n	8005c06 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005bfc:	f7ff fd7b 	bl	80056f6 <LL_RCC_PLLSAI1_IsReady>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d1f0      	bne.n	8005be8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005c06:	7bfb      	ldrb	r3, [r7, #15]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d108      	bne.n	8005c1e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c10:	691a      	ldr	r2, [r3, #16]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e07a      	b.n	8005d30 <HAL_RTC_Init+0x108>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7fb fe9c 	bl	800198c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2202      	movs	r2, #2
 8005c58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f003 0310 	and.w	r3, r3, #16
 8005c66:	2b10      	cmp	r3, #16
 8005c68:	d058      	beq.n	8005d1c <HAL_RTC_Init+0xf4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	22ca      	movs	r2, #202	@ 0xca
 8005c70:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2253      	movs	r2, #83	@ 0x53
 8005c78:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fc5a 	bl	8006534 <RTC_EnterInitMode>
 8005c80:	4603      	mov	r3, r0
 8005c82:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d12c      	bne.n	8005ce4 <HAL_RTC_Init+0xbc>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6812      	ldr	r2, [r2, #0]
 8005c94:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005c98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c9c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6899      	ldr	r1, [r3, #8]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	431a      	orrs	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	68d2      	ldr	r2, [r2, #12]
 8005cc4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6919      	ldr	r1, [r3, #16]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	041a      	lsls	r2, r3, #16
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fc62 	bl	80065a4 <RTC_ExitInitMode>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005ce4:	7bfb      	ldrb	r3, [r7, #15]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d113      	bne.n	8005d12 <HAL_RTC_Init+0xea>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 0203 	bic.w	r2, r2, #3
 8005cf8:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	69da      	ldr	r2, [r3, #28]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	22ff      	movs	r2, #255	@ 0xff
 8005d18:	625a      	str	r2, [r3, #36]	@ 0x24
 8005d1a:	e001      	b.n	8005d20 <HAL_RTC_Init+0xf8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d103      	bne.n	8005d2e <HAL_RTC_Init+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8005d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <HAL_RTC_DeInit>:
  *                the configuration information for RTC.
  * @note   This function does not reset the RTC Backup Data registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	22ca      	movs	r2, #202	@ 0xca
 8005d4e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2253      	movs	r2, #83	@ 0x53
 8005d56:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fbeb 	bl	8006534 <RTC_EnterInitMode>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005d62:	7bfb      	ldrb	r3, [r7, #15]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d132      	bne.n	8005dce <HAL_RTC_DeInit+0x96>
  {
    /* Reset RTC registers */
    hrtc->Instance->TR = 0x00000000U;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	601a      	str	r2, [r3, #0]
    hrtc->Instance->DR = (RTC_DR_WDU_0 | RTC_DR_MU_0 | RTC_DR_DU_0);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f242 1201 	movw	r2, #8449	@ 0x2101
 8005d78:	605a      	str	r2, [r3, #4]
    hrtc->Instance->CR = 0x00000000U;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	609a      	str	r2, [r3, #8]
    hrtc->Instance->WUTR = RTC_WUTR_WUT;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d8a:	615a      	str	r2, [r3, #20]
    hrtc->Instance->PRER = (uint32_t)(RTC_PRER_PREDIV_A | 0x000000FFU);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a1e      	ldr	r2, [pc, #120]	@ (8005e0c <HAL_RTC_DeInit+0xd4>)
 8005d92:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ALRMAR   = 0x00000000U;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	61da      	str	r2, [r3, #28]
    hrtc->Instance->ALRMBR   = 0x00000000U;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2200      	movs	r2, #0
 8005da2:	621a      	str	r2, [r3, #32]
    hrtc->Instance->CALR     = 0x00000000U;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2200      	movs	r2, #0
 8005daa:	63da      	str	r2, [r3, #60]	@ 0x3c
    hrtc->Instance->SHIFTR   = 0x00000000U;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2200      	movs	r2, #0
 8005db2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hrtc->Instance->ALRMASSR = 0x00000000U;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2200      	movs	r2, #0
 8005dba:	645a      	str	r2, [r3, #68]	@ 0x44
    hrtc->Instance->ALRMBSSR = 0x00000000U;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fbed 	bl	80065a4 <RTC_ExitInitMode>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	22ff      	movs	r2, #255	@ 0xff
 8005dd4:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005dd6:	7bfb      	ldrb	r3, [r7, #15]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10e      	bne.n	8005dfa <HAL_RTC_DeInit+0xc2>
  {
    /* Reset Tamper and alternate functions configuration register */
    hrtc->Instance->TAMPCR = 0x00000000U;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2200      	movs	r2, #0
 8005de2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Reset Option register */
    hrtc->Instance->OR = 0x00000000U;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2200      	movs	r2, #0
 8005dea:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* DeInit the low level hardware: CLOCK, NVIC.*/
    hrtc->MspDeInitCallback(hrtc);
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
    /* De-Initialize RTC MSP */
    HAL_RTC_MspDeInit(hrtc);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7fb fe03 	bl	80019f8 <HAL_RTC_MspDeInit>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    hrtc->State = HAL_RTC_STATE_RESET;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Release Lock */
  __HAL_UNLOCK(hrtc);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	007f00ff 	.word	0x007f00ff

08005e10 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e10:	b590      	push	{r4, r7, lr}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d101      	bne.n	8005e2e <HAL_RTC_SetTime+0x1e>
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	e08b      	b.n	8005f46 <HAL_RTC_SetTime+0x136>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2202      	movs	r2, #2
 8005e3a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d126      	bne.n	8005e92 <HAL_RTC_SetTime+0x82>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d102      	bne.n	8005e58 <HAL_RTC_SetTime+0x48>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	2200      	movs	r2, #0
 8005e56:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 fbc7 	bl	80065f0 <RTC_ByteToBcd2>
 8005e62:	4603      	mov	r3, r0
 8005e64:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	785b      	ldrb	r3, [r3, #1]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fbc0 	bl	80065f0 <RTC_ByteToBcd2>
 8005e70:	4603      	mov	r3, r0
 8005e72:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005e74:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	789b      	ldrb	r3, [r3, #2]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 fbb8 	bl	80065f0 <RTC_ByteToBcd2>
 8005e80:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005e82:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	78db      	ldrb	r3, [r3, #3]
 8005e8a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	617b      	str	r3, [r7, #20]
 8005e90:	e018      	b.n	8005ec4 <HAL_RTC_SetTime+0xb4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d102      	bne.n	8005ea6 <HAL_RTC_SetTime+0x96>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	785b      	ldrb	r3, [r3, #1]
 8005eb0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005eb2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005eb8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	78db      	ldrb	r3, [r3, #3]
 8005ebe:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	22ca      	movs	r2, #202	@ 0xca
 8005eca:	625a      	str	r2, [r3, #36]	@ 0x24
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2253      	movs	r2, #83	@ 0x53
 8005ed2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f000 fb2d 	bl	8006534 <RTC_EnterInitMode>
 8005eda:	4603      	mov	r3, r0
 8005edc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005ede:	7cfb      	ldrb	r3, [r7, #19]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d120      	bne.n	8005f26 <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005eee:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005ef2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689a      	ldr	r2, [r3, #8]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005f02:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6899      	ldr	r1, [r3, #8]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	68da      	ldr	r2, [r3, #12]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	431a      	orrs	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 fb41 	bl	80065a4 <RTC_ExitInitMode>
 8005f22:	4603      	mov	r3, r0
 8005f24:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005f26:	7cfb      	ldrb	r3, [r7, #19]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d103      	bne.n	8005f34 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	22ff      	movs	r2, #255	@ 0xff
 8005f3a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005f44:	7cfb      	ldrb	r3, [r7, #19]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	371c      	adds	r7, #28
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd90      	pop	{r4, r7, pc}

08005f4e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b086      	sub	sp, #24
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	60f8      	str	r0, [r7, #12]
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005f80:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005f84:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	0c1b      	lsrs	r3, r3, #16
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	0a1b      	lsrs	r3, r3, #8
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	0d9b      	lsrs	r3, r3, #22
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d11a      	bne.n	8006000 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 fb2c 	bl	800662c <RTC_Bcd2ToByte>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	785b      	ldrb	r3, [r3, #1]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 fb23 	bl	800662c <RTC_Bcd2ToByte>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	461a      	mov	r2, r3
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	789b      	ldrb	r3, [r3, #2]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 fb1a 	bl	800662c <RTC_Bcd2ToByte>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800600a:	b590      	push	{r4, r7, lr}
 800600c:	b087      	sub	sp, #28
 800600e:	af00      	add	r7, sp, #0
 8006010:	60f8      	str	r0, [r7, #12]
 8006012:	60b9      	str	r1, [r7, #8]
 8006014:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d101      	bne.n	8006028 <HAL_RTC_SetDate+0x1e>
 8006024:	2302      	movs	r3, #2
 8006026:	e075      	b.n	8006114 <HAL_RTC_SetDate+0x10a>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10e      	bne.n	800605c <HAL_RTC_SetDate+0x52>
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	785b      	ldrb	r3, [r3, #1]
 8006042:	f003 0310 	and.w	r3, r3, #16
 8006046:	2b00      	cmp	r3, #0
 8006048:	d008      	beq.n	800605c <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	785b      	ldrb	r3, [r3, #1]
 800604e:	f023 0310 	bic.w	r3, r3, #16
 8006052:	b2db      	uxtb	r3, r3
 8006054:	330a      	adds	r3, #10
 8006056:	b2da      	uxtb	r2, r3
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d11c      	bne.n	800609c <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	78db      	ldrb	r3, [r3, #3]
 8006066:	4618      	mov	r0, r3
 8006068:	f000 fac2 	bl	80065f0 <RTC_ByteToBcd2>
 800606c:	4603      	mov	r3, r0
 800606e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	785b      	ldrb	r3, [r3, #1]
 8006074:	4618      	mov	r0, r3
 8006076:	f000 fabb 	bl	80065f0 <RTC_ByteToBcd2>
 800607a:	4603      	mov	r3, r0
 800607c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800607e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	789b      	ldrb	r3, [r3, #2]
 8006084:	4618      	mov	r0, r3
 8006086:	f000 fab3 	bl	80065f0 <RTC_ByteToBcd2>
 800608a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800608c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006096:	4313      	orrs	r3, r2
 8006098:	617b      	str	r3, [r7, #20]
 800609a:	e00e      	b.n	80060ba <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	78db      	ldrb	r3, [r3, #3]
 80060a0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	785b      	ldrb	r3, [r3, #1]
 80060a6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80060a8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80060ae:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80060b6:	4313      	orrs	r3, r2
 80060b8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	22ca      	movs	r2, #202	@ 0xca
 80060c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2253      	movs	r2, #83	@ 0x53
 80060c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f000 fa32 	bl	8006534 <RTC_EnterInitMode>
 80060d0:	4603      	mov	r3, r0
 80060d2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80060d4:	7cfb      	ldrb	r3, [r7, #19]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10c      	bne.n	80060f4 <HAL_RTC_SetDate+0xea>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80060e4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80060e8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 fa5a 	bl	80065a4 <RTC_ExitInitMode>
 80060f0:	4603      	mov	r3, r0
 80060f2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80060f4:	7cfb      	ldrb	r3, [r7, #19]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d103      	bne.n	8006102 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	22ff      	movs	r2, #255	@ 0xff
 8006108:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006112:	7cfb      	ldrb	r3, [r7, #19]
}
 8006114:	4618      	mov	r0, r3
 8006116:	371c      	adds	r7, #28
 8006118:	46bd      	mov	sp, r7
 800611a:	bd90      	pop	{r4, r7, pc}

0800611c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006128:	2300      	movs	r3, #0
 800612a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006136:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800613a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	0c1b      	lsrs	r3, r3, #16
 8006140:	b2da      	uxtb	r2, r3
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	0a1b      	lsrs	r3, r3, #8
 800614a:	b2db      	uxtb	r3, r3
 800614c:	f003 031f 	and.w	r3, r3, #31
 8006150:	b2da      	uxtb	r2, r3
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	b2db      	uxtb	r3, r3
 800615a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800615e:	b2da      	uxtb	r2, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	0b5b      	lsrs	r3, r3, #13
 8006168:	b2db      	uxtb	r3, r3
 800616a:	f003 0307 	and.w	r3, r3, #7
 800616e:	b2da      	uxtb	r2, r3
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d11a      	bne.n	80061b0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	78db      	ldrb	r3, [r3, #3]
 800617e:	4618      	mov	r0, r3
 8006180:	f000 fa54 	bl	800662c <RTC_Bcd2ToByte>
 8006184:	4603      	mov	r3, r0
 8006186:	461a      	mov	r2, r3
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	785b      	ldrb	r3, [r3, #1]
 8006190:	4618      	mov	r0, r3
 8006192:	f000 fa4b 	bl	800662c <RTC_Bcd2ToByte>
 8006196:	4603      	mov	r3, r0
 8006198:	461a      	mov	r2, r3
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	789b      	ldrb	r3, [r3, #2]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 fa42 	bl	800662c <RTC_Bcd2ToByte>
 80061a8:	4603      	mov	r3, r0
 80061aa:	461a      	mov	r2, r3
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3718      	adds	r7, #24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
	...

080061bc <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80061bc:	b590      	push	{r4, r7, lr}
 80061be:	b089      	sub	sp, #36	@ 0x24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80061c8:	4ba1      	ldr	r3, [pc, #644]	@ (8006450 <HAL_RTC_SetAlarm_IT+0x294>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4aa1      	ldr	r2, [pc, #644]	@ (8006454 <HAL_RTC_SetAlarm_IT+0x298>)
 80061ce:	fba2 2303 	umull	r2, r3, r2, r3
 80061d2:	0adb      	lsrs	r3, r3, #11
 80061d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80061d8:	fb02 f303 	mul.w	r3, r2, r3
 80061dc:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80061de:	2300      	movs	r3, #0
 80061e0:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <HAL_RTC_SetAlarm_IT+0x38>
 80061f0:	2302      	movs	r3, #2
 80061f2:	e128      	b.n	8006446 <HAL_RTC_SetAlarm_IT+0x28a>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d137      	bne.n	800627a <HAL_RTC_SetAlarm_IT+0xbe>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006214:	2b00      	cmp	r3, #0
 8006216:	d102      	bne.n	800621e <HAL_RTC_SetAlarm_IT+0x62>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2200      	movs	r2, #0
 800621c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	4618      	mov	r0, r3
 8006224:	f000 f9e4 	bl	80065f0 <RTC_ByteToBcd2>
 8006228:	4603      	mov	r3, r0
 800622a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	785b      	ldrb	r3, [r3, #1]
 8006230:	4618      	mov	r0, r3
 8006232:	f000 f9dd 	bl	80065f0 <RTC_ByteToBcd2>
 8006236:	4603      	mov	r3, r0
 8006238:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800623a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	789b      	ldrb	r3, [r3, #2]
 8006240:	4618      	mov	r0, r3
 8006242:	f000 f9d5 	bl	80065f0 <RTC_ByteToBcd2>
 8006246:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006248:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	78db      	ldrb	r3, [r3, #3]
 8006250:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006252:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	f893 3020 	ldrb.w	r3, [r3, #32]
 800625c:	4618      	mov	r0, r3
 800625e:	f000 f9c7 	bl	80065f0 <RTC_ByteToBcd2>
 8006262:	4603      	mov	r3, r0
 8006264:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8006266:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800626e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006274:	4313      	orrs	r3, r2
 8006276:	61fb      	str	r3, [r7, #28]
 8006278:	e023      	b.n	80062c2 <HAL_RTC_SetAlarm_IT+0x106>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006284:	2b00      	cmp	r3, #0
 8006286:	d102      	bne.n	800628e <HAL_RTC_SetAlarm_IT+0xd2>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2200      	movs	r2, #0
 800628c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	785b      	ldrb	r3, [r3, #1]
 8006298:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800629a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80062a0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	78db      	ldrb	r3, [r3, #3]
 80062a6:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80062a8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80062b0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 80062b2:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80062b8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80062be:	4313      	orrs	r3, r2
 80062c0:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80062ca:	4313      	orrs	r3, r2
 80062cc:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	22ca      	movs	r2, #202	@ 0xca
 80062d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2253      	movs	r2, #83	@ 0x53
 80062dc:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062e6:	d144      	bne.n	8006372 <HAL_RTC_SetAlarm_IT+0x1b6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689a      	ldr	r2, [r3, #8]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062f6:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8006308:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	3b01      	subs	r3, #1
 800630e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10d      	bne.n	8006332 <HAL_RTC_SetAlarm_IT+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	22ff      	movs	r2, #255	@ 0xff
 800631c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2203      	movs	r2, #3
 8006322:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e089      	b.n	8006446 <HAL_RTC_SetAlarm_IT+0x28a>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	2b00      	cmp	r3, #0
 800633e:	d0e4      	beq.n	800630a <HAL_RTC_SetAlarm_IT+0x14e>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	69fa      	ldr	r2, [r7, #28]
 8006346:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689a      	ldr	r2, [r3, #8]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800635e:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689a      	ldr	r2, [r3, #8]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800636e:	609a      	str	r2, [r3, #8]
 8006370:	e04e      	b.n	8006410 <HAL_RTC_SetAlarm_IT+0x254>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006380:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	b2da      	uxtb	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8006392:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006394:	4b2e      	ldr	r3, [pc, #184]	@ (8006450 <HAL_RTC_SetAlarm_IT+0x294>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a2e      	ldr	r2, [pc, #184]	@ (8006454 <HAL_RTC_SetAlarm_IT+0x298>)
 800639a:	fba2 2303 	umull	r2, r3, r2, r3
 800639e:	0adb      	lsrs	r3, r3, #11
 80063a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80063a4:	fb02 f303 	mul.w	r3, r2, r3
 80063a8:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	3b01      	subs	r3, #1
 80063ae:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10d      	bne.n	80063d2 <HAL_RTC_SetAlarm_IT+0x216>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	22ff      	movs	r2, #255	@ 0xff
 80063bc:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2203      	movs	r2, #3
 80063c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e039      	b.n	8006446 <HAL_RTC_SetAlarm_IT+0x28a>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	f003 0302 	and.w	r3, r3, #2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0e4      	beq.n	80063aa <HAL_RTC_SetAlarm_IT+0x1ee>

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	69fa      	ldr	r2, [r7, #28]
 80063e6:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689a      	ldr	r2, [r3, #8]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063fe:	609a      	str	r2, [r3, #8]
    /* Enable Alarm B interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689a      	ldr	r2, [r3, #8]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800640e:	609a      	str	r2, [r3, #8]
  }

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006410:	4b11      	ldr	r3, [pc, #68]	@ (8006458 <HAL_RTC_SetAlarm_IT+0x29c>)
 8006412:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006416:	4a10      	ldr	r2, [pc, #64]	@ (8006458 <HAL_RTC_SetAlarm_IT+0x29c>)
 8006418:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800641c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006420:	4b0d      	ldr	r3, [pc, #52]	@ (8006458 <HAL_RTC_SetAlarm_IT+0x29c>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a0c      	ldr	r2, [pc, #48]	@ (8006458 <HAL_RTC_SetAlarm_IT+0x29c>)
 8006426:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800642a:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	22ff      	movs	r2, #255	@ 0xff
 8006432:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3724      	adds	r7, #36	@ 0x24
 800644a:	46bd      	mov	sp, r7
 800644c:	bd90      	pop	{r4, r7, pc}
 800644e:	bf00      	nop
 8006450:	20000028 	.word	0x20000028
 8006454:	10624dd3 	.word	0x10624dd3
 8006458:	58000800 	.word	0x58000800

0800645c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006464:	4b1f      	ldr	r3, [pc, #124]	@ (80064e4 <HAL_RTC_AlarmIRQHandler+0x88>)
 8006466:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800646a:	60da      	str	r2, [r3, #12]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d012      	beq.n	80064a0 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00b      	beq.n	80064a0 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	b2da      	uxtb	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8006498:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7fb f912 	bl	80016c4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d012      	beq.n	80064d4 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00b      	beq.n	80064d4 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80064cc:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f970 	bl	80067b4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 80064dc:	bf00      	nop
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	58000800 	.word	0x58000800

080064e8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a0d      	ldr	r2, [pc, #52]	@ (8006530 <HAL_RTC_WaitForSynchro+0x48>)
 80064fa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064fc:	f7fb fc0c 	bl	8001d18 <HAL_GetTick>
 8006500:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006502:	e009      	b.n	8006518 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006504:	f7fb fc08 	bl	8001d18 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006512:	d901      	bls.n	8006518 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e007      	b.n	8006528 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	f003 0320 	and.w	r3, r3, #32
 8006522:	2b00      	cmp	r3, #0
 8006524:	d0ee      	beq.n	8006504 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	0001ff5f 	.word	0x0001ff5f

08006534 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800653c:	2300      	movs	r3, #0
 800653e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006540:	2300      	movs	r3, #0
 8006542:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800654e:	2b00      	cmp	r3, #0
 8006550:	d123      	bne.n	800659a <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68da      	ldr	r2, [r3, #12]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006560:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006562:	f7fb fbd9 	bl	8001d18 <HAL_GetTick>
 8006566:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006568:	e00d      	b.n	8006586 <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800656a:	f7fb fbd5 	bl	8001d18 <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006578:	d905      	bls.n	8006586 <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2204      	movs	r2, #4
 800657e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006590:	2b00      	cmp	r3, #0
 8006592:	d102      	bne.n	800659a <RTC_EnterInitMode+0x66>
 8006594:	7bfb      	ldrb	r3, [r7, #15]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d1e7      	bne.n	800656a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800659a:	7bfb      	ldrb	r3, [r7, #15]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065ac:	2300      	movs	r3, #0
 80065ae:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065be:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f003 0320 	and.w	r3, r3, #32
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10b      	bne.n	80065e6 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7ff ff8a 	bl	80064e8 <HAL_RTC_WaitForSynchro>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d005      	beq.n	80065e6 <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2204      	movs	r2, #4
 80065de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80065e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	4603      	mov	r3, r0
 80065f8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80065fa:	2300      	movs	r3, #0
 80065fc:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80065fe:	e005      	b.n	800660c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	3301      	adds	r3, #1
 8006604:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8006606:	79fb      	ldrb	r3, [r7, #7]
 8006608:	3b0a      	subs	r3, #10
 800660a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800660c:	79fb      	ldrb	r3, [r7, #7]
 800660e:	2b09      	cmp	r3, #9
 8006610:	d8f6      	bhi.n	8006600 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	b2db      	uxtb	r3, r3
 8006616:	011b      	lsls	r3, r3, #4
 8006618:	b2da      	uxtb	r2, r3
 800661a:	79fb      	ldrb	r3, [r7, #7]
 800661c:	4313      	orrs	r3, r2
 800661e:	b2db      	uxtb	r3, r3
}
 8006620:	4618      	mov	r0, r3
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	4603      	mov	r3, r0
 8006634:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8006636:	2300      	movs	r3, #0
 8006638:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800663a:	79fb      	ldrb	r3, [r7, #7]
 800663c:	091b      	lsrs	r3, r3, #4
 800663e:	b2db      	uxtb	r3, r3
 8006640:	461a      	mov	r2, r3
 8006642:	4613      	mov	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	005b      	lsls	r3, r3, #1
 800664a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	b2da      	uxtb	r2, r3
 8006650:	79fb      	ldrb	r3, [r7, #7]
 8006652:	f003 030f 	and.w	r3, r3, #15
 8006656:	b2db      	uxtb	r3, r3
 8006658:	4413      	add	r3, r2
 800665a:	b2db      	uxtb	r3, r3
}
 800665c:	4618      	mov	r0, r3
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006674:	2300      	movs	r3, #0
 8006676:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d101      	bne.n	8006686 <HAL_RTCEx_SetWakeUpTimer+0x1e>
 8006682:	2302      	movs	r3, #2
 8006684:	e092      	b.n	80067ac <HAL_RTCEx_SetWakeUpTimer+0x144>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2202      	movs	r2, #2
 8006692:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	22ca      	movs	r2, #202	@ 0xca
 800669c:	625a      	str	r2, [r3, #36]	@ 0x24
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2253      	movs	r2, #83	@ 0x53
 80066a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d020      	beq.n	80066f6 <HAL_RTCEx_SetWakeUpTimer+0x8e>
  {
    tickstart = HAL_GetTick();
 80066b4:	f7fb fb30 	bl	8001d18 <HAL_GetTick>
 80066b8:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 80066ba:	e015      	b.n	80066e8 <HAL_RTCEx_SetWakeUpTimer+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80066bc:	f7fb fb2c 	bl	8001d18 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80066ca:	d90d      	bls.n	80066e8 <HAL_RTCEx_SetWakeUpTimer+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	22ff      	movs	r2, #255	@ 0xff
 80066d2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2203      	movs	r2, #3
 80066d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e061      	b.n	80067ac <HAL_RTCEx_SetWakeUpTimer+0x144>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	f003 0304 	and.w	r3, r3, #4
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1e2      	bne.n	80066bc <HAL_RTCEx_SetWakeUpTimer+0x54>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006704:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	b2da      	uxtb	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8006716:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006718:	f7fb fafe 	bl	8001d18 <HAL_GetTick>
 800671c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800671e:	e015      	b.n	800674c <HAL_RTCEx_SetWakeUpTimer+0xe4>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006720:	f7fb fafa 	bl	8001d18 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800672e:	d90d      	bls.n	800674c <HAL_RTCEx_SetWakeUpTimer+0xe4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	22ff      	movs	r2, #255	@ 0xff
 8006736:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2203      	movs	r2, #3
 800673c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e02f      	b.n	80067ac <HAL_RTCEx_SetWakeUpTimer+0x144>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	f003 0304 	and.w	r3, r3, #4
 8006756:	2b00      	cmp	r3, #0
 8006758:	d0e2      	beq.n	8006720 <HAL_RTCEx_SetWakeUpTimer+0xb8>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	689a      	ldr	r2, [r3, #8]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f022 0207 	bic.w	r2, r2, #7
 8006768:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	6899      	ldr	r1, [r3, #8]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	430a      	orrs	r2, r1
 8006778:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	689a      	ldr	r2, [r3, #8]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006790:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	22ff      	movs	r2, #255	@ 0xff
 8006798:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e049      	b.n	800686e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d106      	bne.n	80067f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f7fb f91a 	bl	8001a28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	3304      	adds	r3, #4
 8006804:	4619      	mov	r1, r3
 8006806:	4610      	mov	r0, r2
 8006808:	f000 fa7c 	bl	8006d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
	...

08006878 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b01      	cmp	r3, #1
 800688a:	d001      	beq.n	8006890 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e036      	b.n	80068fe <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2202      	movs	r2, #2
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f042 0201 	orr.w	r2, r2, #1
 80068a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a17      	ldr	r2, [pc, #92]	@ (800690c <HAL_TIM_Base_Start_IT+0x94>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d004      	beq.n	80068bc <HAL_TIM_Base_Start_IT+0x44>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068ba:	d115      	bne.n	80068e8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689a      	ldr	r2, [r3, #8]
 80068c2:	4b13      	ldr	r3, [pc, #76]	@ (8006910 <HAL_TIM_Base_Start_IT+0x98>)
 80068c4:	4013      	ands	r3, r2
 80068c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2b06      	cmp	r3, #6
 80068cc:	d015      	beq.n	80068fa <HAL_TIM_Base_Start_IT+0x82>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068d4:	d011      	beq.n	80068fa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f042 0201 	orr.w	r2, r2, #1
 80068e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068e6:	e008      	b.n	80068fa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f042 0201 	orr.w	r2, r2, #1
 80068f6:	601a      	str	r2, [r3, #0]
 80068f8:	e000      	b.n	80068fc <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	40012c00 	.word	0x40012c00
 8006910:	00010007 	.word	0x00010007

08006914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d020      	beq.n	8006978 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f003 0302 	and.w	r3, r3, #2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d01b      	beq.n	8006978 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f06f 0202 	mvn.w	r2, #2
 8006948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	f003 0303 	and.w	r3, r3, #3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f9b2 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 8006964:	e005      	b.n	8006972 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f9a4 	bl	8006cb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f9b5 	bl	8006cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f003 0304 	and.w	r3, r3, #4
 800697e:	2b00      	cmp	r3, #0
 8006980:	d020      	beq.n	80069c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b00      	cmp	r3, #0
 800698a:	d01b      	beq.n	80069c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f06f 0204 	mvn.w	r2, #4
 8006994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2202      	movs	r2, #2
 800699a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f98c 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 80069b0:	e005      	b.n	80069be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f97e 	bl	8006cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f98f 	bl	8006cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f003 0308 	and.w	r3, r3, #8
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d020      	beq.n	8006a10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f003 0308 	and.w	r3, r3, #8
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d01b      	beq.n	8006a10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f06f 0208 	mvn.w	r2, #8
 80069e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2204      	movs	r2, #4
 80069e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f966 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 80069fc:	e005      	b.n	8006a0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f958 	bl	8006cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f969 	bl	8006cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	f003 0310 	and.w	r3, r3, #16
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d020      	beq.n	8006a5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f003 0310 	and.w	r3, r3, #16
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d01b      	beq.n	8006a5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f06f 0210 	mvn.w	r2, #16
 8006a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2208      	movs	r2, #8
 8006a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d003      	beq.n	8006a4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f940 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 8006a48:	e005      	b.n	8006a56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f932 	bl	8006cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f943 	bl	8006cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00c      	beq.n	8006a80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d007      	beq.n	8006a80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f06f 0201 	mvn.w	r2, #1
 8006a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7fa fcf6 	bl	800146c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d104      	bne.n	8006a94 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00c      	beq.n	8006aae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d007      	beq.n	8006aae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fa9b 	bl	8006fe4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00c      	beq.n	8006ad2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d007      	beq.n	8006ad2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fa93 	bl	8006ff8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00c      	beq.n	8006af6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d007      	beq.n	8006af6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f8fd 	bl	8006cf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	f003 0320 	and.w	r3, r3, #32
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00c      	beq.n	8006b1a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f003 0320 	and.w	r3, r3, #32
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d007      	beq.n	8006b1a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f06f 0220 	mvn.w	r2, #32
 8006b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fa5b 	bl	8006fd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b1a:	bf00      	nop
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b084      	sub	sp, #16
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d101      	bne.n	8006b3e <HAL_TIM_ConfigClockSource+0x1c>
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	e0b6      	b.n	8006cac <HAL_TIM_ConfigClockSource+0x18a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2202      	movs	r2, #2
 8006b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006b5c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006b60:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b68:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b7a:	d03e      	beq.n	8006bfa <HAL_TIM_ConfigClockSource+0xd8>
 8006b7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b80:	f200 8087 	bhi.w	8006c92 <HAL_TIM_ConfigClockSource+0x170>
 8006b84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b88:	f000 8086 	beq.w	8006c98 <HAL_TIM_ConfigClockSource+0x176>
 8006b8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b90:	d87f      	bhi.n	8006c92 <HAL_TIM_ConfigClockSource+0x170>
 8006b92:	2b70      	cmp	r3, #112	@ 0x70
 8006b94:	d01a      	beq.n	8006bcc <HAL_TIM_ConfigClockSource+0xaa>
 8006b96:	2b70      	cmp	r3, #112	@ 0x70
 8006b98:	d87b      	bhi.n	8006c92 <HAL_TIM_ConfigClockSource+0x170>
 8006b9a:	2b60      	cmp	r3, #96	@ 0x60
 8006b9c:	d050      	beq.n	8006c40 <HAL_TIM_ConfigClockSource+0x11e>
 8006b9e:	2b60      	cmp	r3, #96	@ 0x60
 8006ba0:	d877      	bhi.n	8006c92 <HAL_TIM_ConfigClockSource+0x170>
 8006ba2:	2b50      	cmp	r3, #80	@ 0x50
 8006ba4:	d03c      	beq.n	8006c20 <HAL_TIM_ConfigClockSource+0xfe>
 8006ba6:	2b50      	cmp	r3, #80	@ 0x50
 8006ba8:	d873      	bhi.n	8006c92 <HAL_TIM_ConfigClockSource+0x170>
 8006baa:	2b40      	cmp	r3, #64	@ 0x40
 8006bac:	d058      	beq.n	8006c60 <HAL_TIM_ConfigClockSource+0x13e>
 8006bae:	2b40      	cmp	r3, #64	@ 0x40
 8006bb0:	d86f      	bhi.n	8006c92 <HAL_TIM_ConfigClockSource+0x170>
 8006bb2:	2b30      	cmp	r3, #48	@ 0x30
 8006bb4:	d064      	beq.n	8006c80 <HAL_TIM_ConfigClockSource+0x15e>
 8006bb6:	2b30      	cmp	r3, #48	@ 0x30
 8006bb8:	d86b      	bhi.n	8006c92 <HAL_TIM_ConfigClockSource+0x170>
 8006bba:	2b20      	cmp	r3, #32
 8006bbc:	d060      	beq.n	8006c80 <HAL_TIM_ConfigClockSource+0x15e>
 8006bbe:	2b20      	cmp	r3, #32
 8006bc0:	d867      	bhi.n	8006c92 <HAL_TIM_ConfigClockSource+0x170>
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d05c      	beq.n	8006c80 <HAL_TIM_ConfigClockSource+0x15e>
 8006bc6:	2b10      	cmp	r3, #16
 8006bc8:	d05a      	beq.n	8006c80 <HAL_TIM_ConfigClockSource+0x15e>
 8006bca:	e062      	b.n	8006c92 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006bdc:	f000 f978 	bl	8006ed0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006bee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	609a      	str	r2, [r3, #8]
      break;
 8006bf8:	e04f      	b.n	8006c9a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c0a:	f000 f961 	bl	8006ed0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c1c:	609a      	str	r2, [r3, #8]
      break;
 8006c1e:	e03c      	b.n	8006c9a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	f000 f8d3 	bl	8006dd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2150      	movs	r1, #80	@ 0x50
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 f92c 	bl	8006e96 <TIM_ITRx_SetConfig>
      break;
 8006c3e:	e02c      	b.n	8006c9a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	f000 f8f2 	bl	8006e36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2160      	movs	r1, #96	@ 0x60
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 f91c 	bl	8006e96 <TIM_ITRx_SetConfig>
      break;
 8006c5e:	e01c      	b.n	8006c9a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	f000 f8b3 	bl	8006dd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2140      	movs	r1, #64	@ 0x40
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 f90c 	bl	8006e96 <TIM_ITRx_SetConfig>
      break;
 8006c7e:	e00c      	b.n	8006c9a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4610      	mov	r0, r2
 8006c8c:	f000 f903 	bl	8006e96 <TIM_ITRx_SetConfig>
      break;
 8006c90:	e003      	b.n	8006c9a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	73fb      	strb	r3, [r7, #15]
      break;
 8006c96:	e000      	b.n	8006c9a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006c98:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a2d      	ldr	r2, [pc, #180]	@ (8006dcc <TIM_Base_SetConfig+0xc8>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d003      	beq.n	8006d24 <TIM_Base_SetConfig+0x20>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d22:	d108      	bne.n	8006d36 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a24      	ldr	r2, [pc, #144]	@ (8006dcc <TIM_Base_SetConfig+0xc8>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d00b      	beq.n	8006d56 <TIM_Base_SetConfig+0x52>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d44:	d007      	beq.n	8006d56 <TIM_Base_SetConfig+0x52>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a21      	ldr	r2, [pc, #132]	@ (8006dd0 <TIM_Base_SetConfig+0xcc>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d003      	beq.n	8006d56 <TIM_Base_SetConfig+0x52>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a20      	ldr	r2, [pc, #128]	@ (8006dd4 <TIM_Base_SetConfig+0xd0>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d108      	bne.n	8006d68 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	689a      	ldr	r2, [r3, #8]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a10      	ldr	r2, [pc, #64]	@ (8006dcc <TIM_Base_SetConfig+0xc8>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d007      	beq.n	8006d9e <TIM_Base_SetConfig+0x9a>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a0f      	ldr	r2, [pc, #60]	@ (8006dd0 <TIM_Base_SetConfig+0xcc>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d003      	beq.n	8006d9e <TIM_Base_SetConfig+0x9a>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a0e      	ldr	r2, [pc, #56]	@ (8006dd4 <TIM_Base_SetConfig+0xd0>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d103      	bne.n	8006da6 <TIM_Base_SetConfig+0xa2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	691a      	ldr	r2, [r3, #16]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f043 0204 	orr.w	r2, r3, #4
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	601a      	str	r2, [r3, #0]
}
 8006dbe:	bf00      	nop
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	40012c00 	.word	0x40012c00
 8006dd0:	40014400 	.word	0x40014400
 8006dd4:	40014800 	.word	0x40014800

08006dd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	f023 0201 	bic.w	r2, r3, #1
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	011b      	lsls	r3, r3, #4
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f023 030a 	bic.w	r3, r3, #10
 8006e14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	621a      	str	r2, [r3, #32]
}
 8006e2a:	bf00      	nop
 8006e2c:	371c      	adds	r7, #28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b087      	sub	sp, #28
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	60f8      	str	r0, [r7, #12]
 8006e3e:	60b9      	str	r1, [r7, #8]
 8006e40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6a1b      	ldr	r3, [r3, #32]
 8006e4c:	f023 0210 	bic.w	r2, r3, #16
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	031b      	lsls	r3, r3, #12
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	011b      	lsls	r3, r3, #4
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	621a      	str	r2, [r3, #32]
}
 8006e8a:	bf00      	nop
 8006e8c:	371c      	adds	r7, #28
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b085      	sub	sp, #20
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006eac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006eb2:	683a      	ldr	r2, [r7, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	f043 0307 	orr.w	r3, r3, #7
 8006ebc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	609a      	str	r2, [r3, #8]
}
 8006ec4:	bf00      	nop
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b087      	sub	sp, #28
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006eea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	021a      	lsls	r2, r3, #8
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	609a      	str	r2, [r3, #8]
}
 8006f04:	bf00      	nop
 8006f06:	371c      	adds	r7, #28
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d101      	bne.n	8006f28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f24:	2302      	movs	r3, #2
 8006f26:	e04a      	b.n	8006fbe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2202      	movs	r2, #2
 8006f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a1f      	ldr	r2, [pc, #124]	@ (8006fcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d108      	bne.n	8006f64 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006f58:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a12      	ldr	r2, [pc, #72]	@ (8006fcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d004      	beq.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f90:	d10c      	bne.n	8006fac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	40012c00 	.word	0x40012c00

08006fd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fec:	bf00      	nop
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <aci_gap_set_non_discoverable>:
 */

#include "auto/ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b088      	sub	sp, #32
 8007010:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007012:	2300      	movs	r3, #0
 8007014:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007016:	f107 0308 	add.w	r3, r7, #8
 800701a:	2218      	movs	r2, #24
 800701c:	2100      	movs	r1, #0
 800701e:	4618      	mov	r0, r3
 8007020:	f001 f92d 	bl	800827e <Osal_MemSet>
  rq.ogf = 0x3f;
 8007024:	233f      	movs	r3, #63	@ 0x3f
 8007026:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8007028:	2381      	movs	r3, #129	@ 0x81
 800702a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800702c:	1dfb      	adds	r3, r7, #7
 800702e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007030:	2301      	movs	r3, #1
 8007032:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007034:	f107 0308 	add.w	r3, r7, #8
 8007038:	2100      	movs	r1, #0
 800703a:	4618      	mov	r0, r3
 800703c:	f001 fba8 	bl	8008790 <hci_send_req>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	da01      	bge.n	800704a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007046:	23ff      	movs	r3, #255	@ 0xff
 8007048:	e000      	b.n	800704c <aci_gap_set_non_discoverable+0x40>
  return status;
 800704a:	79fb      	ldrb	r3, [r7, #7]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3720      	adds	r7, #32
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8007054:	b5b0      	push	{r4, r5, r7, lr}
 8007056:	b0ce      	sub	sp, #312	@ 0x138
 8007058:	af00      	add	r7, sp, #0
 800705a:	4605      	mov	r5, r0
 800705c:	460c      	mov	r4, r1
 800705e:	4610      	mov	r0, r2
 8007060:	4619      	mov	r1, r3
 8007062:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007066:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800706a:	462a      	mov	r2, r5
 800706c:	701a      	strb	r2, [r3, #0]
 800706e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007072:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007076:	4622      	mov	r2, r4
 8007078:	801a      	strh	r2, [r3, #0]
 800707a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800707e:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8007082:	4602      	mov	r2, r0
 8007084:	801a      	strh	r2, [r3, #0]
 8007086:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800708a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800708e:	460a      	mov	r2, r1
 8007090:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8007092:	f107 0310 	add.w	r3, r7, #16
 8007096:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800709a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800709e:	3308      	adds	r3, #8
 80070a0:	f107 0210 	add.w	r2, r7, #16
 80070a4:	4413      	add	r3, r2
 80070a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80070aa:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80070ae:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80070b2:	4413      	add	r3, r2
 80070b4:	3309      	adds	r3, #9
 80070b6:	f107 0210 	add.w	r2, r7, #16
 80070ba:	4413      	add	r3, r2
 80070bc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80070c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070c4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80070c8:	2200      	movs	r2, #0
 80070ca:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 80070d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80070d6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80070da:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80070de:	7812      	ldrb	r2, [r2, #0]
 80070e0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80070e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80070e6:	3301      	adds	r3, #1
 80070e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80070ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80070f0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80070f4:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80070f8:	8812      	ldrh	r2, [r2, #0]
 80070fa:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80070fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007102:	3302      	adds	r3, #2
 8007104:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8007108:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800710c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007110:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8007114:	8812      	ldrh	r2, [r2, #0]
 8007116:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800711a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800711e:	3302      	adds	r3, #2
 8007120:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8007124:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007128:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800712c:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8007130:	7812      	ldrb	r2, [r2, #0]
 8007132:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007134:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007138:	3301      	adds	r3, #1
 800713a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800713e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007142:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8007146:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007148:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800714c:	3301      	adds	r3, #1
 800714e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8007152:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007156:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800715a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800715c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007160:	3301      	adds	r3, #1
 8007162:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8007166:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800716a:	3308      	adds	r3, #8
 800716c:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8007170:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8007174:	4618      	mov	r0, r3
 8007176:	f001 f872 	bl	800825e <Osal_MemCpy>
    index_input += Local_Name_Length;
 800717a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800717e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007182:	4413      	add	r3, r2
 8007184:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8007188:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800718c:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8007190:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007192:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007196:	3301      	adds	r3, #1
 8007198:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800719c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80071a0:	3301      	adds	r3, #1
 80071a2:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80071a6:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 80071aa:	4618      	mov	r0, r3
 80071ac:	f001 f857 	bl	800825e <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80071b0:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80071b4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80071b8:	4413      	add	r3, r2
 80071ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 80071be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80071c2:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 80071c6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80071c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80071cc:	3302      	adds	r3, #2
 80071ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 80071d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80071d6:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 80071da:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80071dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80071e0:	3302      	adds	r3, #2
 80071e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80071e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80071ea:	2218      	movs	r2, #24
 80071ec:	2100      	movs	r1, #0
 80071ee:	4618      	mov	r0, r3
 80071f0:	f001 f845 	bl	800827e <Osal_MemSet>
  rq.ogf = 0x3f;
 80071f4:	233f      	movs	r3, #63	@ 0x3f
 80071f6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 80071fa:	2383      	movs	r3, #131	@ 0x83
 80071fc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007200:	f107 0310 	add.w	r3, r7, #16
 8007204:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007208:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800720c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007210:	f107 030f 	add.w	r3, r7, #15
 8007214:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007218:	2301      	movs	r3, #1
 800721a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800721e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007222:	2100      	movs	r1, #0
 8007224:	4618      	mov	r0, r3
 8007226:	f001 fab3 	bl	8008790 <hci_send_req>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	da01      	bge.n	8007234 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8007230:	23ff      	movs	r3, #255	@ 0xff
 8007232:	e004      	b.n	800723e <aci_gap_set_discoverable+0x1ea>
  return status;
 8007234:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007238:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800723c:	781b      	ldrb	r3, [r3, #0]
}
 800723e:	4618      	mov	r0, r3
 8007240:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8007244:	46bd      	mov	sp, r7
 8007246:	bdb0      	pop	{r4, r5, r7, pc}

08007248 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b0cc      	sub	sp, #304	@ 0x130
 800724c:	af00      	add	r7, sp, #0
 800724e:	4602      	mov	r2, r0
 8007250:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007254:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007258:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800725a:	f107 0310 	add.w	r3, r7, #16
 800725e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007262:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007266:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800726a:	2200      	movs	r2, #0
 800726c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800726e:	2300      	movs	r3, #0
 8007270:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8007274:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007278:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800727c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007280:	7812      	ldrb	r2, [r2, #0]
 8007282:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007284:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007288:	3301      	adds	r3, #1
 800728a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800728e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007292:	2218      	movs	r2, #24
 8007294:	2100      	movs	r1, #0
 8007296:	4618      	mov	r0, r3
 8007298:	f000 fff1 	bl	800827e <Osal_MemSet>
  rq.ogf = 0x3f;
 800729c:	233f      	movs	r3, #63	@ 0x3f
 800729e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 80072a2:	2385      	movs	r3, #133	@ 0x85
 80072a4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80072a8:	f107 0310 	add.w	r3, r7, #16
 80072ac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80072b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80072b4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80072b8:	f107 030f 	add.w	r3, r7, #15
 80072bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80072c0:	2301      	movs	r3, #1
 80072c2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80072c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80072ca:	2100      	movs	r1, #0
 80072cc:	4618      	mov	r0, r3
 80072ce:	f001 fa5f 	bl	8008790 <hci_send_req>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	da01      	bge.n	80072dc <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80072d8:	23ff      	movs	r3, #255	@ 0xff
 80072da:	e004      	b.n	80072e6 <aci_gap_set_io_capability+0x9e>
  return status;
 80072dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80072e0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80072e4:	781b      	ldrb	r3, [r3, #0]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80072f0:	b5b0      	push	{r4, r5, r7, lr}
 80072f2:	b0cc      	sub	sp, #304	@ 0x130
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	4605      	mov	r5, r0
 80072f8:	460c      	mov	r4, r1
 80072fa:	4610      	mov	r0, r2
 80072fc:	4619      	mov	r1, r3
 80072fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007302:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007306:	462a      	mov	r2, r5
 8007308:	701a      	strb	r2, [r3, #0]
 800730a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800730e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007312:	4622      	mov	r2, r4
 8007314:	701a      	strb	r2, [r3, #0]
 8007316:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800731a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800731e:	4602      	mov	r2, r0
 8007320:	701a      	strb	r2, [r3, #0]
 8007322:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007326:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800732a:	460a      	mov	r2, r1
 800732c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800732e:	f107 0310 	add.w	r3, r7, #16
 8007332:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007336:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800733a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800733e:	2200      	movs	r2, #0
 8007340:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007342:	2300      	movs	r3, #0
 8007344:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8007348:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800734c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007350:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007354:	7812      	ldrb	r2, [r2, #0]
 8007356:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007358:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800735c:	3301      	adds	r3, #1
 800735e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8007362:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007366:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800736a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800736e:	7812      	ldrb	r2, [r2, #0]
 8007370:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007372:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007376:	3301      	adds	r3, #1
 8007378:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800737c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007380:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007384:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8007388:	7812      	ldrb	r2, [r2, #0]
 800738a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800738c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007390:	3301      	adds	r3, #1
 8007392:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8007396:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800739a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800739e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80073a2:	7812      	ldrb	r2, [r2, #0]
 80073a4:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80073a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80073aa:	3301      	adds	r3, #1
 80073ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80073b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80073b4:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 80073b8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80073ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80073be:	3301      	adds	r3, #1
 80073c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80073c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80073c8:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 80073cc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80073ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80073d2:	3301      	adds	r3, #1
 80073d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80073d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80073dc:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80073e0:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80073e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80073e6:	3301      	adds	r3, #1
 80073e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80073ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80073f0:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80073f4:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80073f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80073fc:	3304      	adds	r3, #4
 80073fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8007402:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007406:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800740a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800740c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007410:	3301      	adds	r3, #1
 8007412:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007416:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800741a:	2218      	movs	r2, #24
 800741c:	2100      	movs	r1, #0
 800741e:	4618      	mov	r0, r3
 8007420:	f000 ff2d 	bl	800827e <Osal_MemSet>
  rq.ogf = 0x3f;
 8007424:	233f      	movs	r3, #63	@ 0x3f
 8007426:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800742a:	2386      	movs	r3, #134	@ 0x86
 800742c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007430:	f107 0310 	add.w	r3, r7, #16
 8007434:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007438:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800743c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007440:	f107 030f 	add.w	r3, r7, #15
 8007444:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007448:	2301      	movs	r3, #1
 800744a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800744e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007452:	2100      	movs	r1, #0
 8007454:	4618      	mov	r0, r3
 8007456:	f001 f99b 	bl	8008790 <hci_send_req>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	da01      	bge.n	8007464 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8007460:	23ff      	movs	r3, #255	@ 0xff
 8007462:	e004      	b.n	800746e <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8007464:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007468:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800746c:	781b      	ldrb	r3, [r3, #0]
}
 800746e:	4618      	mov	r0, r3
 8007470:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007474:	46bd      	mov	sp, r7
 8007476:	bdb0      	pop	{r4, r5, r7, pc}

08007478 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b0cc      	sub	sp, #304	@ 0x130
 800747c:	af00      	add	r7, sp, #0
 800747e:	4602      	mov	r2, r0
 8007480:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007484:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007488:	6019      	str	r1, [r3, #0]
 800748a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800748e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007492:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8007494:	f107 0310 	add.w	r3, r7, #16
 8007498:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800749c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80074a0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80074a4:	2200      	movs	r2, #0
 80074a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80074a8:	2300      	movs	r3, #0
 80074aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80074ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80074b2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80074b6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80074ba:	8812      	ldrh	r2, [r2, #0]
 80074bc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80074be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80074c2:	3302      	adds	r3, #2
 80074c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 80074c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80074cc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80074d0:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80074d4:	6812      	ldr	r2, [r2, #0]
 80074d6:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80074da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80074de:	3304      	adds	r3, #4
 80074e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80074e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80074e8:	2218      	movs	r2, #24
 80074ea:	2100      	movs	r1, #0
 80074ec:	4618      	mov	r0, r3
 80074ee:	f000 fec6 	bl	800827e <Osal_MemSet>
  rq.ogf = 0x3f;
 80074f2:	233f      	movs	r3, #63	@ 0x3f
 80074f4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 80074f8:	2388      	movs	r3, #136	@ 0x88
 80074fa:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80074fe:	f107 0310 	add.w	r3, r7, #16
 8007502:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007506:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800750a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800750e:	f107 030f 	add.w	r3, r7, #15
 8007512:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007516:	2301      	movs	r3, #1
 8007518:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800751c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007520:	2100      	movs	r1, #0
 8007522:	4618      	mov	r0, r3
 8007524:	f001 f934 	bl	8008790 <hci_send_req>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	da01      	bge.n	8007532 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800752e:	23ff      	movs	r3, #255	@ 0xff
 8007530:	e004      	b.n	800753c <aci_gap_pass_key_resp+0xc4>
  return status;
 8007532:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007536:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800753a:	781b      	ldrb	r3, [r3, #0]
}
 800753c:	4618      	mov	r0, r3
 800753e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8007546:	b590      	push	{r4, r7, lr}
 8007548:	b0cd      	sub	sp, #308	@ 0x134
 800754a:	af00      	add	r7, sp, #0
 800754c:	4604      	mov	r4, r0
 800754e:	4608      	mov	r0, r1
 8007550:	4611      	mov	r1, r2
 8007552:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007556:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800755a:	6013      	str	r3, [r2, #0]
 800755c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007560:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007564:	4622      	mov	r2, r4
 8007566:	701a      	strb	r2, [r3, #0]
 8007568:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800756c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007570:	4602      	mov	r2, r0
 8007572:	701a      	strb	r2, [r3, #0]
 8007574:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007578:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800757c:	460a      	mov	r2, r1
 800757e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8007580:	f107 0310 	add.w	r3, r7, #16
 8007584:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007588:	f107 0308 	add.w	r3, r7, #8
 800758c:	2207      	movs	r2, #7
 800758e:	2100      	movs	r1, #0
 8007590:	4618      	mov	r0, r3
 8007592:	f000 fe74 	bl	800827e <Osal_MemSet>
  int index_input = 0;
 8007596:	2300      	movs	r3, #0
 8007598:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800759c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80075a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80075a4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80075a8:	7812      	ldrb	r2, [r2, #0]
 80075aa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80075ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80075b0:	3301      	adds	r3, #1
 80075b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 80075b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80075ba:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80075be:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80075c2:	7812      	ldrb	r2, [r2, #0]
 80075c4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80075c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80075ca:	3301      	adds	r3, #1
 80075cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 80075d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80075d4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80075d8:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80075dc:	7812      	ldrb	r2, [r2, #0]
 80075de:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80075e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80075e4:	3301      	adds	r3, #1
 80075e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80075ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80075ee:	2218      	movs	r2, #24
 80075f0:	2100      	movs	r1, #0
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 fe43 	bl	800827e <Osal_MemSet>
  rq.ogf = 0x3f;
 80075f8:	233f      	movs	r3, #63	@ 0x3f
 80075fa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 80075fe:	238a      	movs	r3, #138	@ 0x8a
 8007600:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007604:	f107 0310 	add.w	r3, r7, #16
 8007608:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800760c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007610:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8007614:	f107 0308 	add.w	r3, r7, #8
 8007618:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800761c:	2307      	movs	r3, #7
 800761e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007622:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007626:	2100      	movs	r1, #0
 8007628:	4618      	mov	r0, r3
 800762a:	f001 f8b1 	bl	8008790 <hci_send_req>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	da01      	bge.n	8007638 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8007634:	23ff      	movs	r3, #255	@ 0xff
 8007636:	e02e      	b.n	8007696 <aci_gap_init+0x150>
  if ( resp.Status )
 8007638:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800763c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d005      	beq.n	8007652 <aci_gap_init+0x10c>
    return resp.Status;
 8007646:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800764a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	e021      	b.n	8007696 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8007652:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007656:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800765a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800765e:	b29a      	uxth	r2, r3
 8007660:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007664:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800766c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007670:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007674:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007678:	b29a      	uxth	r2, r3
 800767a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800767e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8007680:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007684:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007688:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800768c:	b29a      	uxth	r2, r3
 800768e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007692:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800769c:	46bd      	mov	sp, r7
 800769e:	bd90      	pop	{r4, r7, pc}

080076a0 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b0cc      	sub	sp, #304	@ 0x130
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	4602      	mov	r2, r0
 80076a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80076ac:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80076b0:	6019      	str	r1, [r3, #0]
 80076b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80076b6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80076ba:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80076bc:	f107 0310 	add.w	r3, r7, #16
 80076c0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80076c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80076c8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80076cc:	2200      	movs	r2, #0
 80076ce:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80076d0:	2300      	movs	r3, #0
 80076d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 80076d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80076da:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80076de:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80076e2:	7812      	ldrb	r2, [r2, #0]
 80076e4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80076e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80076ea:	3301      	adds	r3, #1
 80076ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80076f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80076f4:	1c58      	adds	r0, r3, #1
 80076f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80076fa:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80076fe:	781a      	ldrb	r2, [r3, #0]
 8007700:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007704:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007708:	6819      	ldr	r1, [r3, #0]
 800770a:	f000 fda8 	bl	800825e <Osal_MemCpy>
  index_input += AdvDataLen;
 800770e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007712:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800771c:	4413      	add	r3, r2
 800771e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007722:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007726:	2218      	movs	r2, #24
 8007728:	2100      	movs	r1, #0
 800772a:	4618      	mov	r0, r3
 800772c:	f000 fda7 	bl	800827e <Osal_MemSet>
  rq.ogf = 0x3f;
 8007730:	233f      	movs	r3, #63	@ 0x3f
 8007732:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8007736:	238e      	movs	r3, #142	@ 0x8e
 8007738:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800773c:	f107 0310 	add.w	r3, r7, #16
 8007740:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007744:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007748:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800774c:	f107 030f 	add.w	r3, r7, #15
 8007750:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007754:	2301      	movs	r3, #1
 8007756:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800775a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800775e:	2100      	movs	r1, #0
 8007760:	4618      	mov	r0, r3
 8007762:	f001 f815 	bl	8008790 <hci_send_req>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	da01      	bge.n	8007770 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800776c:	23ff      	movs	r3, #255	@ 0xff
 800776e:	e004      	b.n	800777a <aci_gap_update_adv_data+0xda>
  return status;
 8007770:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007774:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007778:	781b      	ldrb	r3, [r3, #0]
}
 800777a:	4618      	mov	r0, r3
 800777c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b088      	sub	sp, #32
 8007788:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800778e:	f107 0308 	add.w	r3, r7, #8
 8007792:	2218      	movs	r2, #24
 8007794:	2100      	movs	r1, #0
 8007796:	4618      	mov	r0, r3
 8007798:	f000 fd71 	bl	800827e <Osal_MemSet>
  rq.ogf = 0x3f;
 800779c:	233f      	movs	r3, #63	@ 0x3f
 800779e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80077a0:	2392      	movs	r3, #146	@ 0x92
 80077a2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80077a4:	1dfb      	adds	r3, r7, #7
 80077a6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80077a8:	2301      	movs	r3, #1
 80077aa:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80077ac:	f107 0308 	add.w	r3, r7, #8
 80077b0:	2100      	movs	r1, #0
 80077b2:	4618      	mov	r0, r3
 80077b4:	f000 ffec 	bl	8008790 <hci_send_req>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	da01      	bge.n	80077c2 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 80077be:	23ff      	movs	r3, #255	@ 0xff
 80077c0:	e000      	b.n	80077c4 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 80077c2:	79fb      	ldrb	r3, [r7, #7]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3720      	adds	r7, #32
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <aci_gap_numeric_comparison_value_confirm_yesno>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b0cc      	sub	sp, #304	@ 0x130
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	4602      	mov	r2, r0
 80077d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80077d8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80077dc:	801a      	strh	r2, [r3, #0]
 80077de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80077e2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80077e6:	460a      	mov	r2, r1
 80077e8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80077ea:	f107 0310 	add.w	r3, r7, #16
 80077ee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80077f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80077f6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80077fa:	2200      	movs	r2, #0
 80077fc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80077fe:	2300      	movs	r3, #0
 8007800:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007804:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007808:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800780c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007810:	8812      	ldrh	r2, [r2, #0]
 8007812:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007814:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007818:	3302      	adds	r3, #2
 800781a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800781e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007822:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007826:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800782a:	7812      	ldrb	r2, [r2, #0]
 800782c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800782e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007832:	3301      	adds	r3, #1
 8007834:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007838:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800783c:	2218      	movs	r2, #24
 800783e:	2100      	movs	r1, #0
 8007840:	4618      	mov	r0, r3
 8007842:	f000 fd1c 	bl	800827e <Osal_MemSet>
  rq.ogf = 0x3f;
 8007846:	233f      	movs	r3, #63	@ 0x3f
 8007848:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800784c:	23a5      	movs	r3, #165	@ 0xa5
 800784e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007852:	f107 0310 	add.w	r3, r7, #16
 8007856:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800785a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800785e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007862:	f107 030f 	add.w	r3, r7, #15
 8007866:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800786a:	2301      	movs	r3, #1
 800786c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007870:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007874:	2100      	movs	r1, #0
 8007876:	4618      	mov	r0, r3
 8007878:	f000 ff8a 	bl	8008790 <hci_send_req>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	da01      	bge.n	8007886 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8007882:	23ff      	movs	r3, #255	@ 0xff
 8007884:	e004      	b.n	8007890 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8007886:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800788a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800788e:	781b      	ldrb	r3, [r3, #0]
}
 8007890:	4618      	mov	r0, r3
 8007892:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <aci_gatt_init>:
 */

#include "auto/ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b088      	sub	sp, #32
 800789e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80078a0:	2300      	movs	r3, #0
 80078a2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80078a4:	f107 0308 	add.w	r3, r7, #8
 80078a8:	2218      	movs	r2, #24
 80078aa:	2100      	movs	r1, #0
 80078ac:	4618      	mov	r0, r3
 80078ae:	f000 fce6 	bl	800827e <Osal_MemSet>
  rq.ogf = 0x3f;
 80078b2:	233f      	movs	r3, #63	@ 0x3f
 80078b4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80078b6:	f240 1301 	movw	r3, #257	@ 0x101
 80078ba:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80078bc:	1dfb      	adds	r3, r7, #7
 80078be:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80078c0:	2301      	movs	r3, #1
 80078c2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80078c4:	f107 0308 	add.w	r3, r7, #8
 80078c8:	2100      	movs	r1, #0
 80078ca:	4618      	mov	r0, r3
 80078cc:	f000 ff60 	bl	8008790 <hci_send_req>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	da01      	bge.n	80078da <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80078d6:	23ff      	movs	r3, #255	@ 0xff
 80078d8:	e000      	b.n	80078dc <aci_gatt_init+0x42>
  return status;
 80078da:	79fb      	ldrb	r3, [r7, #7]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3720      	adds	r7, #32
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80078e4:	b590      	push	{r4, r7, lr}
 80078e6:	b0cf      	sub	sp, #316	@ 0x13c
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	4604      	mov	r4, r0
 80078ec:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 80078f0:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 80078f4:	6001      	str	r1, [r0, #0]
 80078f6:	4610      	mov	r0, r2
 80078f8:	4619      	mov	r1, r3
 80078fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078fe:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8007902:	4622      	mov	r2, r4
 8007904:	701a      	strb	r2, [r3, #0]
 8007906:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800790a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800790e:	4602      	mov	r2, r0
 8007910:	701a      	strb	r2, [r3, #0]
 8007912:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007916:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800791a:	460a      	mov	r2, r1
 800791c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800791e:	f107 0310 	add.w	r3, r7, #16
 8007922:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8007926:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800792a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d00a      	beq.n	800794a <aci_gatt_add_service+0x66>
 8007934:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007938:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	2b02      	cmp	r3, #2
 8007940:	d101      	bne.n	8007946 <aci_gatt_add_service+0x62>
 8007942:	2311      	movs	r3, #17
 8007944:	e002      	b.n	800794c <aci_gatt_add_service+0x68>
 8007946:	2301      	movs	r3, #1
 8007948:	e000      	b.n	800794c <aci_gatt_add_service+0x68>
 800794a:	2303      	movs	r3, #3
 800794c:	f107 0210 	add.w	r2, r7, #16
 8007950:	4413      	add	r3, r2
 8007952:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007956:	f107 030c 	add.w	r3, r7, #12
 800795a:	2203      	movs	r2, #3
 800795c:	2100      	movs	r1, #0
 800795e:	4618      	mov	r0, r3
 8007960:	f000 fc8d 	bl	800827e <Osal_MemSet>
  int index_input = 0;
 8007964:	2300      	movs	r3, #0
 8007966:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800796a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800796e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007972:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8007976:	7812      	ldrb	r2, [r2, #0]
 8007978:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800797a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800797e:	3301      	adds	r3, #1
 8007980:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8007984:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007988:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d002      	beq.n	8007998 <aci_gatt_add_service+0xb4>
 8007992:	2b02      	cmp	r3, #2
 8007994:	d004      	beq.n	80079a0 <aci_gatt_add_service+0xbc>
 8007996:	e007      	b.n	80079a8 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8007998:	2302      	movs	r3, #2
 800799a:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800799e:	e005      	b.n	80079ac <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80079a0:	2310      	movs	r3, #16
 80079a2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80079a6:	e001      	b.n	80079ac <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80079a8:	2397      	movs	r3, #151	@ 0x97
 80079aa:	e06c      	b.n	8007a86 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80079ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80079b0:	1c58      	adds	r0, r3, #1
 80079b2:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 80079b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079ba:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80079be:	6819      	ldr	r1, [r3, #0]
 80079c0:	f000 fc4d 	bl	800825e <Osal_MemCpy>
    index_input += size;
 80079c4:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 80079c8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80079cc:	4413      	add	r3, r2
 80079ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 80079d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80079d6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80079da:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80079de:	7812      	ldrb	r2, [r2, #0]
 80079e0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80079e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80079e6:	3301      	adds	r3, #1
 80079e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80079ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80079f0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80079f4:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80079f8:	7812      	ldrb	r2, [r2, #0]
 80079fa:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80079fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007a00:	3301      	adds	r3, #1
 8007a02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007a0a:	2218      	movs	r2, #24
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 fc35 	bl	800827e <Osal_MemSet>
  rq.ogf = 0x3f;
 8007a14:	233f      	movs	r3, #63	@ 0x3f
 8007a16:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8007a1a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8007a1e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007a22:	f107 0310 	add.w	r3, r7, #16
 8007a26:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007a2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007a2e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8007a32:	f107 030c 	add.w	r3, r7, #12
 8007a36:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007a44:	2100      	movs	r1, #0
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 fea2 	bl	8008790 <hci_send_req>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	da01      	bge.n	8007a56 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8007a52:	23ff      	movs	r3, #255	@ 0xff
 8007a54:	e017      	b.n	8007a86 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8007a56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a5a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d005      	beq.n	8007a70 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8007a64:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a68:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	e00a      	b.n	8007a86 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8007a70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a74:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a78:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8007a82:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd90      	pop	{r4, r7, pc}

08007a90 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8007a90:	b590      	push	{r4, r7, lr}
 8007a92:	b0d1      	sub	sp, #324	@ 0x144
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	4604      	mov	r4, r0
 8007a98:	4608      	mov	r0, r1
 8007a9a:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8007a9e:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8007aa2:	600a      	str	r2, [r1, #0]
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007aaa:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8007aae:	4622      	mov	r2, r4
 8007ab0:	801a      	strh	r2, [r3, #0]
 8007ab2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007ab6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8007aba:	4602      	mov	r2, r0
 8007abc:	701a      	strb	r2, [r3, #0]
 8007abe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007ac2:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8007ac6:	460a      	mov	r2, r1
 8007ac8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8007aca:	f107 0318 	add.w	r3, r7, #24
 8007ace:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8007ad2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007ad6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d00a      	beq.n	8007af6 <aci_gatt_add_char+0x66>
 8007ae0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007ae4:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d101      	bne.n	8007af2 <aci_gatt_add_char+0x62>
 8007aee:	2313      	movs	r3, #19
 8007af0:	e002      	b.n	8007af8 <aci_gatt_add_char+0x68>
 8007af2:	2303      	movs	r3, #3
 8007af4:	e000      	b.n	8007af8 <aci_gatt_add_char+0x68>
 8007af6:	2305      	movs	r3, #5
 8007af8:	f107 0218 	add.w	r2, r7, #24
 8007afc:	4413      	add	r3, r2
 8007afe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007b02:	f107 0314 	add.w	r3, r7, #20
 8007b06:	2203      	movs	r2, #3
 8007b08:	2100      	movs	r1, #0
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 fbb7 	bl	800827e <Osal_MemSet>
  int index_input = 0;
 8007b10:	2300      	movs	r3, #0
 8007b12:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8007b16:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8007b1a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8007b1e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8007b22:	8812      	ldrh	r2, [r2, #0]
 8007b24:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007b26:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007b2a:	3302      	adds	r3, #2
 8007b2c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8007b30:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8007b34:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8007b38:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8007b3c:	7812      	ldrb	r2, [r2, #0]
 8007b3e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007b40:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007b44:	3301      	adds	r3, #1
 8007b46:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8007b4a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007b4e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d002      	beq.n	8007b5e <aci_gatt_add_char+0xce>
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d004      	beq.n	8007b66 <aci_gatt_add_char+0xd6>
 8007b5c:	e007      	b.n	8007b6e <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8007b5e:	2302      	movs	r3, #2
 8007b60:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8007b64:	e005      	b.n	8007b72 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8007b66:	2310      	movs	r3, #16
 8007b68:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8007b6c:	e001      	b.n	8007b72 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8007b6e:	2397      	movs	r3, #151	@ 0x97
 8007b70:	e091      	b.n	8007c96 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8007b72:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8007b76:	1cd8      	adds	r0, r3, #3
 8007b78:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8007b7c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007b80:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007b84:	6819      	ldr	r1, [r3, #0]
 8007b86:	f000 fb6a 	bl	800825e <Osal_MemCpy>
    index_input += size;
 8007b8a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8007b8e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007b92:	4413      	add	r3, r2
 8007b94:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8007b98:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007b9c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8007ba0:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8007ba4:	8812      	ldrh	r2, [r2, #0]
 8007ba6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007ba8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007bac:	3302      	adds	r3, #2
 8007bae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8007bb2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007bb6:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8007bba:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8007bbc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8007bc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007bca:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8007bce:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8007bd0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8007bda:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007bde:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8007be2:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8007be4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007be8:	3301      	adds	r3, #1
 8007bea:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8007bee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007bf2:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8007bf6:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8007bf8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8007c02:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c06:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8007c0a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8007c0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007c10:	3301      	adds	r3, #1
 8007c12:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c16:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007c1a:	2218      	movs	r2, #24
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f000 fb2d 	bl	800827e <Osal_MemSet>
  rq.ogf = 0x3f;
 8007c24:	233f      	movs	r3, #63	@ 0x3f
 8007c26:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8007c2a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8007c2e:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8007c32:	f107 0318 	add.w	r3, r7, #24
 8007c36:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8007c3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007c3e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8007c42:	f107 0314 	add.w	r3, r7, #20
 8007c46:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007c50:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007c54:	2100      	movs	r1, #0
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 fd9a 	bl	8008790 <hci_send_req>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	da01      	bge.n	8007c66 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8007c62:	23ff      	movs	r3, #255	@ 0xff
 8007c64:	e017      	b.n	8007c96 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8007c66:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007c6a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d005      	beq.n	8007c80 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8007c74:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007c78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	e00a      	b.n	8007c96 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8007c80:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007c84:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007c88:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8007c92:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd90      	pop	{r4, r7, pc}

08007ca0 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8007ca0:	b5b0      	push	{r4, r5, r7, lr}
 8007ca2:	b0cc      	sub	sp, #304	@ 0x130
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	4605      	mov	r5, r0
 8007ca8:	460c      	mov	r4, r1
 8007caa:	4610      	mov	r0, r2
 8007cac:	4619      	mov	r1, r3
 8007cae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007cb2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007cb6:	462a      	mov	r2, r5
 8007cb8:	801a      	strh	r2, [r3, #0]
 8007cba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007cbe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cc2:	4622      	mov	r2, r4
 8007cc4:	801a      	strh	r2, [r3, #0]
 8007cc6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007cca:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8007cce:	4602      	mov	r2, r0
 8007cd0:	701a      	strb	r2, [r3, #0]
 8007cd2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007cd6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8007cda:	460a      	mov	r2, r1
 8007cdc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8007cde:	f107 0310 	add.w	r3, r7, #16
 8007ce2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007ce6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007cea:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007cee:	2200      	movs	r2, #0
 8007cf0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8007cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007cfc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007d00:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007d04:	8812      	ldrh	r2, [r2, #0]
 8007d06:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007d08:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007d0c:	3302      	adds	r3, #2
 8007d0e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8007d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007d16:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007d1a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8007d1e:	8812      	ldrh	r2, [r2, #0]
 8007d20:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007d22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007d26:	3302      	adds	r3, #2
 8007d28:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8007d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007d30:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007d34:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8007d38:	7812      	ldrb	r2, [r2, #0]
 8007d3a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007d3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007d40:	3301      	adds	r3, #1
 8007d42:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8007d46:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007d4a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007d4e:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8007d52:	7812      	ldrb	r2, [r2, #0]
 8007d54:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007d56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8007d60:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007d64:	1d98      	adds	r0, r3, #6
 8007d66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007d6a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	461a      	mov	r2, r3
 8007d72:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8007d76:	f000 fa72 	bl	800825e <Osal_MemCpy>
  index_input += Char_Value_Length;
 8007d7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007d7e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007d88:	4413      	add	r3, r2
 8007d8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007d92:	2218      	movs	r2, #24
 8007d94:	2100      	movs	r1, #0
 8007d96:	4618      	mov	r0, r3
 8007d98:	f000 fa71 	bl	800827e <Osal_MemSet>
  rq.ogf = 0x3f;
 8007d9c:	233f      	movs	r3, #63	@ 0x3f
 8007d9e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8007da2:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8007da6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007daa:	f107 0310 	add.w	r3, r7, #16
 8007dae:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007db2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007db6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007dba:	f107 030f 	add.w	r3, r7, #15
 8007dbe:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007dc8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007dcc:	2100      	movs	r1, #0
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f000 fcde 	bl	8008790 <hci_send_req>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	da01      	bge.n	8007dde <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8007dda:	23ff      	movs	r3, #255	@ 0xff
 8007ddc:	e004      	b.n	8007de8 <aci_gatt_update_char_value+0x148>
  return status;
 8007dde:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007de2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007de6:	781b      	ldrb	r3, [r3, #0]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bdb0      	pop	{r4, r5, r7, pc}

08007df2 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b0cc      	sub	sp, #304	@ 0x130
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	4602      	mov	r2, r0
 8007dfa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007dfe:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007e02:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8007e04:	f107 0310 	add.w	r3, r7, #16
 8007e08:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007e0c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007e10:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007e14:	2200      	movs	r2, #0
 8007e16:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007e22:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007e26:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007e2a:	8812      	ldrh	r2, [r2, #0]
 8007e2c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007e2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007e32:	3302      	adds	r3, #2
 8007e34:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007e38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007e3c:	2218      	movs	r2, #24
 8007e3e:	2100      	movs	r1, #0
 8007e40:	4618      	mov	r0, r3
 8007e42:	f000 fa1c 	bl	800827e <Osal_MemSet>
  rq.ogf = 0x3f;
 8007e46:	233f      	movs	r3, #63	@ 0x3f
 8007e48:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8007e4c:	f240 1325 	movw	r3, #293	@ 0x125
 8007e50:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007e54:	f107 0310 	add.w	r3, r7, #16
 8007e58:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007e5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007e60:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007e64:	f107 030f 	add.w	r3, r7, #15
 8007e68:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007e76:	2100      	movs	r1, #0
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 fc89 	bl	8008790 <hci_send_req>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	da01      	bge.n	8007e88 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8007e84:	23ff      	movs	r3, #255	@ 0xff
 8007e86:	e004      	b.n	8007e92 <aci_gatt_confirm_indication+0xa0>
  return status;
 8007e88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007e8c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007e90:	781b      	ldrb	r3, [r3, #0]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <aci_hal_write_config_data>:
#include "auto/ble_hal_aci.h"

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b0cc      	sub	sp, #304	@ 0x130
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007ea6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007eaa:	601a      	str	r2, [r3, #0]
 8007eac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007eb0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	701a      	strb	r2, [r3, #0]
 8007eb8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007ebc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007ec0:	460a      	mov	r2, r1
 8007ec2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8007ec4:	f107 0310 	add.w	r3, r7, #16
 8007ec8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007ecc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007ed0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8007ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007ee2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007ee6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007eea:	7812      	ldrb	r2, [r2, #0]
 8007eec:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007eee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8007ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007efc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007f00:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007f04:	7812      	ldrb	r2, [r2, #0]
 8007f06:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007f08:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007f16:	1c98      	adds	r0, r3, #2
 8007f18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007f1c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007f20:	781a      	ldrb	r2, [r3, #0]
 8007f22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007f26:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007f2a:	6819      	ldr	r1, [r3, #0]
 8007f2c:	f000 f997 	bl	800825e <Osal_MemCpy>
  index_input += Length;
 8007f30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007f34:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007f3e:	4413      	add	r3, r2
 8007f40:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007f48:	2218      	movs	r2, #24
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f000 f996 	bl	800827e <Osal_MemSet>
  rq.ogf = 0x3f;
 8007f52:	233f      	movs	r3, #63	@ 0x3f
 8007f54:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8007f58:	230c      	movs	r3, #12
 8007f5a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007f5e:	f107 0310 	add.w	r3, r7, #16
 8007f62:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007f66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007f6a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007f6e:	f107 030f 	add.w	r3, r7, #15
 8007f72:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007f76:	2301      	movs	r3, #1
 8007f78:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007f80:	2100      	movs	r1, #0
 8007f82:	4618      	mov	r0, r3
 8007f84:	f000 fc04 	bl	8008790 <hci_send_req>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	da01      	bge.n	8007f92 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8007f8e:	23ff      	movs	r3, #255	@ 0xff
 8007f90:	e004      	b.n	8007f9c <aci_hal_write_config_data+0x100>
  return status;
 8007f92:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007f96:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007f9a:	781b      	ldrb	r3, [r3, #0]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b0cc      	sub	sp, #304	@ 0x130
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	4602      	mov	r2, r0
 8007fae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007fb2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007fb6:	701a      	strb	r2, [r3, #0]
 8007fb8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007fbc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007fc0:	460a      	mov	r2, r1
 8007fc2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007fc4:	f107 0310 	add.w	r3, r7, #16
 8007fc8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007fcc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007fd0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8007fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007fe2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007fe6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007fea:	7812      	ldrb	r2, [r2, #0]
 8007fec:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007fee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8007ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007ffc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008000:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008004:	7812      	ldrb	r2, [r2, #0]
 8008006:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008008:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800800c:	3301      	adds	r3, #1
 800800e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008012:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008016:	2218      	movs	r2, #24
 8008018:	2100      	movs	r1, #0
 800801a:	4618      	mov	r0, r3
 800801c:	f000 f92f 	bl	800827e <Osal_MemSet>
  rq.ogf = 0x3f;
 8008020:	233f      	movs	r3, #63	@ 0x3f
 8008022:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8008026:	230f      	movs	r3, #15
 8008028:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800802c:	f107 0310 	add.w	r3, r7, #16
 8008030:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008034:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008038:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800803c:	f107 030f 	add.w	r3, r7, #15
 8008040:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008044:	2301      	movs	r3, #1
 8008046:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800804a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800804e:	2100      	movs	r1, #0
 8008050:	4618      	mov	r0, r3
 8008052:	f000 fb9d 	bl	8008790 <hci_send_req>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	da01      	bge.n	8008060 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800805c:	23ff      	movs	r3, #255	@ 0xff
 800805e:	e004      	b.n	800806a <aci_hal_set_tx_power_level+0xc4>
  return status;
 8008060:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008064:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008068:	781b      	ldrb	r3, [r3, #0]
}
 800806a:	4618      	mov	r0, r3
 800806c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b0cc      	sub	sp, #304	@ 0x130
 8008078:	af00      	add	r7, sp, #0
 800807a:	4602      	mov	r2, r0
 800807c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008080:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008084:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8008086:	f107 0310 	add.w	r3, r7, #16
 800808a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800808e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008092:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008096:	2200      	movs	r2, #0
 8008098:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800809a:	2300      	movs	r3, #0
 800809c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80080a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80080a4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80080a8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80080ac:	8812      	ldrh	r2, [r2, #0]
 80080ae:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80080b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80080b4:	3302      	adds	r3, #2
 80080b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80080ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80080be:	2218      	movs	r2, #24
 80080c0:	2100      	movs	r1, #0
 80080c2:	4618      	mov	r0, r3
 80080c4:	f000 f8db 	bl	800827e <Osal_MemSet>
  rq.ogf = 0x3f;
 80080c8:	233f      	movs	r3, #63	@ 0x3f
 80080ca:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 80080ce:	2318      	movs	r3, #24
 80080d0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80080d4:	f107 0310 	add.w	r3, r7, #16
 80080d8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80080dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80080e0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80080e4:	f107 030f 	add.w	r3, r7, #15
 80080e8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80080ec:	2301      	movs	r3, #1
 80080ee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80080f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80080f6:	2100      	movs	r1, #0
 80080f8:	4618      	mov	r0, r3
 80080fa:	f000 fb49 	bl	8008790 <hci_send_req>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	da01      	bge.n	8008108 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8008104:	23ff      	movs	r3, #255	@ 0xff
 8008106:	e004      	b.n	8008112 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8008108:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800810c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008110:	781b      	ldrb	r3, [r3, #0]
}
 8008112:	4618      	mov	r0, r3
 8008114:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b088      	sub	sp, #32
 8008120:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008122:	2300      	movs	r3, #0
 8008124:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008126:	f107 0308 	add.w	r3, r7, #8
 800812a:	2218      	movs	r2, #24
 800812c:	2100      	movs	r1, #0
 800812e:	4618      	mov	r0, r3
 8008130:	f000 f8a5 	bl	800827e <Osal_MemSet>
  rq.ogf = 0x03;
 8008134:	2303      	movs	r3, #3
 8008136:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8008138:	2303      	movs	r3, #3
 800813a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800813c:	1dfb      	adds	r3, r7, #7
 800813e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008140:	2301      	movs	r3, #1
 8008142:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008144:	f107 0308 	add.w	r3, r7, #8
 8008148:	2100      	movs	r1, #0
 800814a:	4618      	mov	r0, r3
 800814c:	f000 fb20 	bl	8008790 <hci_send_req>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	da01      	bge.n	800815a <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008156:	23ff      	movs	r3, #255	@ 0xff
 8008158:	e000      	b.n	800815c <hci_reset+0x40>
  return status;
 800815a:	79fb      	ldrb	r3, [r7, #7]
}
 800815c:	4618      	mov	r0, r3
 800815e:	3720      	adds	r7, #32
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8008164:	b590      	push	{r4, r7, lr}
 8008166:	b0cd      	sub	sp, #308	@ 0x134
 8008168:	af00      	add	r7, sp, #0
 800816a:	4604      	mov	r4, r0
 800816c:	4608      	mov	r0, r1
 800816e:	4611      	mov	r1, r2
 8008170:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008174:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008178:	4622      	mov	r2, r4
 800817a:	701a      	strb	r2, [r3, #0]
 800817c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008180:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008184:	4602      	mov	r2, r0
 8008186:	701a      	strb	r2, [r3, #0]
 8008188:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800818c:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8008190:	460a      	mov	r2, r1
 8008192:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8008194:	f107 0310 	add.w	r3, r7, #16
 8008198:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800819c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80081a0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80081a4:	2200      	movs	r2, #0
 80081a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80081a8:	2300      	movs	r3, #0
 80081aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80081ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80081b2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80081b6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80081ba:	7812      	ldrb	r2, [r2, #0]
 80081bc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80081be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80081c2:	3301      	adds	r3, #1
 80081c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 80081c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80081cc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80081d0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80081d4:	7812      	ldrb	r2, [r2, #0]
 80081d6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80081d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80081dc:	3301      	adds	r3, #1
 80081de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 80081e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80081e6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80081ea:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80081ee:	7812      	ldrb	r2, [r2, #0]
 80081f0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80081f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80081f6:	3301      	adds	r3, #1
 80081f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80081fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008200:	2218      	movs	r2, #24
 8008202:	2100      	movs	r1, #0
 8008204:	4618      	mov	r0, r3
 8008206:	f000 f83a 	bl	800827e <Osal_MemSet>
  rq.ogf = 0x08;
 800820a:	2308      	movs	r3, #8
 800820c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8008210:	2331      	movs	r3, #49	@ 0x31
 8008212:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008216:	f107 0310 	add.w	r3, r7, #16
 800821a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800821e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008222:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008226:	f107 030f 	add.w	r3, r7, #15
 800822a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800822e:	2301      	movs	r3, #1
 8008230:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008234:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008238:	2100      	movs	r1, #0
 800823a:	4618      	mov	r0, r3
 800823c:	f000 faa8 	bl	8008790 <hci_send_req>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	da01      	bge.n	800824a <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8008246:	23ff      	movs	r3, #255	@ 0xff
 8008248:	e004      	b.n	8008254 <hci_le_set_default_phy+0xf0>
  return status;
 800824a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800824e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008252:	781b      	ldrb	r3, [r3, #0]
}
 8008254:	4618      	mov	r0, r3
 8008256:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800825a:	46bd      	mov	sp, r7
 800825c:	bd90      	pop	{r4, r7, pc}

0800825e <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	68b9      	ldr	r1, [r7, #8]
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f002 fcf6 	bl	800ac60 <memcpy>
 8008274:	4603      	mov	r3, r0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b084      	sub	sp, #16
 8008282:	af00      	add	r7, sp, #0
 8008284:	60f8      	str	r0, [r7, #12]
 8008286:	60b9      	str	r1, [r7, #8]
 8008288:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	68b9      	ldr	r1, [r7, #8]
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f002 fcb9 	bl	800ac06 <memset>
 8008294:	4603      	mov	r3, r0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800829e:	b480      	push	{r7}
 80082a0:	af00      	add	r7, sp, #0
  return;
 80082a2:	bf00      	nop
}
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80082ac:	b480      	push	{r7}
 80082ae:	af00      	add	r7, sp, #0
  return;
 80082b0:	bf00      	nop
}
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80082ba:	b480      	push	{r7}
 80082bc:	af00      	add	r7, sp, #0
  return;
 80082be:	bf00      	nop
}
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80082c8:	b480      	push	{r7}
 80082ca:	af00      	add	r7, sp, #0
  return;
 80082cc:	bf00      	nop
}
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80082d6:	b480      	push	{r7}
 80082d8:	af00      	add	r7, sp, #0
  return;
 80082da:	bf00      	nop
}
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80082e4:	b480      	push	{r7}
 80082e6:	af00      	add	r7, sp, #0
  return;
 80082e8:	bf00      	nop
}
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80082f2:	b480      	push	{r7}
 80082f4:	af00      	add	r7, sp, #0
  return;
 80082f6:	bf00      	nop
}
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8008300:	b480      	push	{r7}
 8008302:	af00      	add	r7, sp, #0
  return;
 8008304:	bf00      	nop
}
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr

0800830e <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800830e:	b480      	push	{r7}
 8008310:	af00      	add	r7, sp, #0
  return;
 8008312:	bf00      	nop
}
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800831c:	b480      	push	{r7}
 800831e:	af00      	add	r7, sp, #0
  return;
 8008320:	bf00      	nop
}
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800832a:	b480      	push	{r7}
 800832c:	af00      	add	r7, sp, #0
  return;
 800832e:	bf00      	nop
}
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8008338:	b480      	push	{r7}
 800833a:	af00      	add	r7, sp, #0
  return;
 800833c:	bf00      	nop
}
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8008346:	b480      	push	{r7}
 8008348:	af00      	add	r7, sp, #0
  return;
 800834a:	bf00      	nop
}
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8008354:	b480      	push	{r7}
 8008356:	af00      	add	r7, sp, #0
  return;
 8008358:	bf00      	nop
}
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr

08008362 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8008362:	b480      	push	{r7}
 8008364:	af00      	add	r7, sp, #0
  return;
 8008366:	bf00      	nop
}
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8008370:	b480      	push	{r7}
 8008372:	af00      	add	r7, sp, #0
  return;
 8008374:	bf00      	nop
}
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr

0800837e <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800837e:	b480      	push	{r7}
 8008380:	af00      	add	r7, sp, #0
  return;
 8008382:	bf00      	nop
}
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800838c:	b580      	push	{r7, lr}
 800838e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8008390:	4b04      	ldr	r3, [pc, #16]	@ (80083a4 <SVCCTL_Init+0x18>)
 8008392:	2200      	movs	r2, #0
 8008394:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8008396:	4b04      	ldr	r3, [pc, #16]	@ (80083a8 <SVCCTL_Init+0x1c>)
 8008398:	2200      	movs	r2, #0
 800839a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800839c:	f000 f806 	bl	80083ac <SVCCTL_SvcInit>

  return;
 80083a0:	bf00      	nop
}
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	200000d0 	.word	0x200000d0
 80083a8:	200000f0 	.word	0x200000f0

080083ac <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	af00      	add	r7, sp, #0
  BAS_Init();
 80083b0:	f7ff ff75 	bl	800829e <BAS_Init>

  BLS_Init();
 80083b4:	f7ff ff7a 	bl	80082ac <BLS_Init>

  CRS_STM_Init();
 80083b8:	f7ff ff7f 	bl	80082ba <CRS_STM_Init>

  DIS_Init();
 80083bc:	f7ff ff84 	bl	80082c8 <DIS_Init>

  EDS_STM_Init();
 80083c0:	f7ff ff89 	bl	80082d6 <EDS_STM_Init>

  HIDS_Init();
 80083c4:	f7ff ff8e 	bl	80082e4 <HIDS_Init>

  HRS_Init();
 80083c8:	f7ff ff93 	bl	80082f2 <HRS_Init>

  HTS_Init();
 80083cc:	f7ff ff98 	bl	8008300 <HTS_Init>

  IAS_Init();
 80083d0:	f7ff ff9d 	bl	800830e <IAS_Init>

  LLS_Init();
 80083d4:	f7ff ffa2 	bl	800831c <LLS_Init>

  TPS_Init();
 80083d8:	f7ff ffa7 	bl	800832a <TPS_Init>

  MOTENV_STM_Init();
 80083dc:	f7ff ffac 	bl	8008338 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80083e0:	f7ff ffb1 	bl	8008346 <P2PS_STM_Init>

  ZDD_STM_Init();
 80083e4:	f7ff ffb6 	bl	8008354 <ZDD_STM_Init>

  OTAS_STM_Init();
 80083e8:	f7ff ffbb 	bl	8008362 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80083ec:	f7ff ffc7 	bl	800837e <BVOPUS_STM_Init>

  MESH_Init();
 80083f0:	f7ff ffbe 	bl	8008370 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80083f4:	f001 fd4a 	bl	8009e8c <SVCCTL_InitCustomSvc>
  
  return;
 80083f8:	bf00      	nop
}
 80083fa:	bd80      	pop	{r7, pc}

080083fc <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8008404:	4b09      	ldr	r3, [pc, #36]	@ (800842c <SVCCTL_RegisterSvcHandler+0x30>)
 8008406:	7f1b      	ldrb	r3, [r3, #28]
 8008408:	4619      	mov	r1, r3
 800840a:	4a08      	ldr	r2, [pc, #32]	@ (800842c <SVCCTL_RegisterSvcHandler+0x30>)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8008412:	4b06      	ldr	r3, [pc, #24]	@ (800842c <SVCCTL_RegisterSvcHandler+0x30>)
 8008414:	7f1b      	ldrb	r3, [r3, #28]
 8008416:	3301      	adds	r3, #1
 8008418:	b2da      	uxtb	r2, r3
 800841a:	4b04      	ldr	r3, [pc, #16]	@ (800842c <SVCCTL_RegisterSvcHandler+0x30>)
 800841c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800841e:	bf00      	nop
}
 8008420:	370c      	adds	r7, #12
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	200000d0 	.word	0x200000d0

08008430 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	3301      	adds	r3, #1
 800843c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800843e:	2300      	movs	r3, #0
 8008440:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	2bff      	cmp	r3, #255	@ 0xff
 8008448:	d125      	bne.n	8008496 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	3302      	adds	r3, #2
 800844e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	881b      	ldrh	r3, [r3, #0]
 8008454:	b29b      	uxth	r3, r3
 8008456:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800845a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800845e:	d118      	bne.n	8008492 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008460:	2300      	movs	r3, #0
 8008462:	757b      	strb	r3, [r7, #21]
 8008464:	e00d      	b.n	8008482 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8008466:	7d7b      	ldrb	r3, [r7, #21]
 8008468:	4a1a      	ldr	r2, [pc, #104]	@ (80084d4 <SVCCTL_UserEvtRx+0xa4>)
 800846a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	4798      	blx	r3
 8008472:	4603      	mov	r3, r0
 8008474:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8008476:	7dfb      	ldrb	r3, [r7, #23]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d108      	bne.n	800848e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800847c:	7d7b      	ldrb	r3, [r7, #21]
 800847e:	3301      	adds	r3, #1
 8008480:	757b      	strb	r3, [r7, #21]
 8008482:	4b14      	ldr	r3, [pc, #80]	@ (80084d4 <SVCCTL_UserEvtRx+0xa4>)
 8008484:	7f1b      	ldrb	r3, [r3, #28]
 8008486:	7d7a      	ldrb	r2, [r7, #21]
 8008488:	429a      	cmp	r2, r3
 800848a:	d3ec      	bcc.n	8008466 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800848c:	e002      	b.n	8008494 <SVCCTL_UserEvtRx+0x64>
              break;
 800848e:	bf00      	nop
          break;
 8008490:	e000      	b.n	8008494 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8008492:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8008494:	e000      	b.n	8008498 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8008496:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8008498:	7dfb      	ldrb	r3, [r7, #23]
 800849a:	2b02      	cmp	r3, #2
 800849c:	d00f      	beq.n	80084be <SVCCTL_UserEvtRx+0x8e>
 800849e:	2b02      	cmp	r3, #2
 80084a0:	dc10      	bgt.n	80084c4 <SVCCTL_UserEvtRx+0x94>
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d002      	beq.n	80084ac <SVCCTL_UserEvtRx+0x7c>
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d006      	beq.n	80084b8 <SVCCTL_UserEvtRx+0x88>
 80084aa:	e00b      	b.n	80084c4 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 ff9f 	bl	80093f0 <SVCCTL_App_Notification>
 80084b2:	4603      	mov	r3, r0
 80084b4:	75bb      	strb	r3, [r7, #22]
      break;
 80084b6:	e008      	b.n	80084ca <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80084b8:	2301      	movs	r3, #1
 80084ba:	75bb      	strb	r3, [r7, #22]
      break;
 80084bc:	e005      	b.n	80084ca <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80084be:	2300      	movs	r3, #0
 80084c0:	75bb      	strb	r3, [r7, #22]
      break;
 80084c2:	e002      	b.n	80084ca <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80084c4:	2301      	movs	r3, #1
 80084c6:	75bb      	strb	r3, [r7, #22]
      break;
 80084c8:	bf00      	nop
  }

  return (return_status);
 80084ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3718      	adds	r7, #24
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	200000d0 	.word	0x200000d0

080084d8 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b088      	sub	sp, #32
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80084e0:	f107 030c 	add.w	r3, r7, #12
 80084e4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	212f      	movs	r1, #47	@ 0x2f
 80084f0:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 80084f4:	f000 fae8 	bl	8008ac8 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	330b      	adds	r3, #11
 80084fc:	78db      	ldrb	r3, [r3, #3]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3720      	adds	r7, #32
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b088      	sub	sp, #32
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800850e:	f107 030c 	add.w	r3, r7, #12
 8008512:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	210f      	movs	r1, #15
 800851e:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8008522:	f000 fad1 	bl	8008ac8 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	330b      	adds	r3, #11
 800852a:	78db      	ldrb	r3, [r3, #3]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3720      	adds	r7, #32
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b088      	sub	sp, #32
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800853c:	f107 030c 	add.w	r3, r7, #12
 8008540:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	2110      	movs	r1, #16
 8008548:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800854c:	f000 fabc 	bl	8008ac8 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	330b      	adds	r3, #11
 8008554:	78db      	ldrb	r3, [r3, #3]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3720      	adds	r7, #32
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
	...

08008560 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8008560:	b480      	push	{r7}
 8008562:	b08b      	sub	sp, #44	@ 0x2c
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8008568:	2300      	movs	r3, #0
 800856a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800856c:	2300      	movs	r3, #0
 800856e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8008570:	2300      	movs	r3, #0
 8008572:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8008574:	2300      	movs	r3, #0
 8008576:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8008578:	2300      	movs	r3, #0
 800857a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800857c:	2300      	movs	r3, #0
 800857e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8008580:	2300      	movs	r3, #0
 8008582:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8008584:	2300      	movs	r3, #0
 8008586:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8008588:	4b4a      	ldr	r3, [pc, #296]	@ (80086b4 <SHCI_GetWirelessFwInfo+0x154>)
 800858a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800858c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008590:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800859a:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a44      	ldr	r2, [pc, #272]	@ (80086b8 <SHCI_GetWirelessFwInfo+0x158>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d10f      	bne.n	80085cc <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	699b      	ldr	r3, [r3, #24]
 80085b6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	69db      	ldr	r3, [r3, #28]
 80085bc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	617b      	str	r3, [r7, #20]
 80085ca:	e01a      	b.n	8008602 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80085d4:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80085d8:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	695b      	ldr	r3, [r3, #20]
 80085e8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008604:	0e1b      	lsrs	r3, r3, #24
 8008606:	b2da      	uxtb	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800860c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860e:	0c1b      	lsrs	r3, r3, #16
 8008610:	b2da      	uxtb	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008618:	0a1b      	lsrs	r3, r3, #8
 800861a:	b2da      	uxtb	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8008620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008622:	091b      	lsrs	r3, r3, #4
 8008624:	b2db      	uxtb	r3, r3
 8008626:	f003 030f 	and.w	r3, r3, #15
 800862a:	b2da      	uxtb	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8008630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008632:	b2db      	uxtb	r3, r3
 8008634:	f003 030f 	and.w	r3, r3, #15
 8008638:	b2da      	uxtb	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800863e:	6a3b      	ldr	r3, [r7, #32]
 8008640:	0e1b      	lsrs	r3, r3, #24
 8008642:	b2da      	uxtb	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008648:	6a3b      	ldr	r3, [r7, #32]
 800864a:	0c1b      	lsrs	r3, r3, #16
 800864c:	b2da      	uxtb	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8008652:	6a3b      	ldr	r3, [r7, #32]
 8008654:	0a1b      	lsrs	r3, r3, #8
 8008656:	b2da      	uxtb	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800865c:	6a3b      	ldr	r3, [r7, #32]
 800865e:	b2da      	uxtb	r2, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	b2da      	uxtb	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	0e1b      	lsrs	r3, r3, #24
 8008670:	b2da      	uxtb	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	0c1b      	lsrs	r3, r3, #16
 800867a:	b2da      	uxtb	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	0a1b      	lsrs	r3, r3, #8
 8008684:	b2da      	uxtb	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	0e1b      	lsrs	r3, r3, #24
 800868e:	b2da      	uxtb	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	0c1b      	lsrs	r3, r3, #16
 8008698:	b2da      	uxtb	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	b2da      	uxtb	r2, r3
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	372c      	adds	r7, #44	@ 0x2c
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr
 80086b4:	58004000 	.word	0x58004000
 80086b8:	a94656b9 	.word	0xa94656b9

080086bc <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	4a08      	ldr	r2, [pc, #32]	@ (80086ec <hci_init+0x30>)
 80086cc:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80086ce:	4a08      	ldr	r2, [pc, #32]	@ (80086f0 <hci_init+0x34>)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80086d4:	4806      	ldr	r0, [pc, #24]	@ (80086f0 <hci_init+0x34>)
 80086d6:	f000 f979 	bl	80089cc <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4618      	mov	r0, r3
 80086e0:	f000 f8da 	bl	8008898 <TlInit>

  return;
 80086e4:	bf00      	nop
}
 80086e6:	3708      	adds	r7, #8
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	200003c8 	.word	0x200003c8
 80086f0:	200003a0 	.word	0x200003a0

080086f4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80086fa:	4822      	ldr	r0, [pc, #136]	@ (8008784 <hci_user_evt_proc+0x90>)
 80086fc:	f000 fd3e 	bl	800917c <LST_is_empty>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d12b      	bne.n	800875e <hci_user_evt_proc+0x6a>
 8008706:	4b20      	ldr	r3, [pc, #128]	@ (8008788 <hci_user_evt_proc+0x94>)
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d027      	beq.n	800875e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800870e:	f107 030c 	add.w	r3, r7, #12
 8008712:	4619      	mov	r1, r3
 8008714:	481b      	ldr	r0, [pc, #108]	@ (8008784 <hci_user_evt_proc+0x90>)
 8008716:	f000 fdc0 	bl	800929a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800871a:	4b1c      	ldr	r3, [pc, #112]	@ (800878c <hci_user_evt_proc+0x98>)
 800871c:	69db      	ldr	r3, [r3, #28]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00c      	beq.n	800873c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8008726:	2301      	movs	r3, #1
 8008728:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800872a:	4b18      	ldr	r3, [pc, #96]	@ (800878c <hci_user_evt_proc+0x98>)
 800872c:	69db      	ldr	r3, [r3, #28]
 800872e:	1d3a      	adds	r2, r7, #4
 8008730:	4610      	mov	r0, r2
 8008732:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008734:	793a      	ldrb	r2, [r7, #4]
 8008736:	4b14      	ldr	r3, [pc, #80]	@ (8008788 <hci_user_evt_proc+0x94>)
 8008738:	701a      	strb	r2, [r3, #0]
 800873a:	e002      	b.n	8008742 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800873c:	4b12      	ldr	r3, [pc, #72]	@ (8008788 <hci_user_evt_proc+0x94>)
 800873e:	2201      	movs	r2, #1
 8008740:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8008742:	4b11      	ldr	r3, [pc, #68]	@ (8008788 <hci_user_evt_proc+0x94>)
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d004      	beq.n	8008754 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	4618      	mov	r0, r3
 800874e:	f000 fc11 	bl	8008f74 <TL_MM_EvtDone>
 8008752:	e004      	b.n	800875e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	4619      	mov	r1, r3
 8008758:	480a      	ldr	r0, [pc, #40]	@ (8008784 <hci_user_evt_proc+0x90>)
 800875a:	f000 fd31 	bl	80091c0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800875e:	4809      	ldr	r0, [pc, #36]	@ (8008784 <hci_user_evt_proc+0x90>)
 8008760:	f000 fd0c 	bl	800917c <LST_is_empty>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d107      	bne.n	800877a <hci_user_evt_proc+0x86>
 800876a:	4b07      	ldr	r3, [pc, #28]	@ (8008788 <hci_user_evt_proc+0x94>)
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d003      	beq.n	800877a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8008772:	4804      	ldr	r0, [pc, #16]	@ (8008784 <hci_user_evt_proc+0x90>)
 8008774:	f001 f878 	bl	8009868 <hci_notify_asynch_evt>
  }


  return;
 8008778:	bf00      	nop
 800877a:	bf00      	nop
}
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	200000f8 	.word	0x200000f8
 8008788:	20000104 	.word	0x20000104
 800878c:	200003a0 	.word	0x200003a0

08008790 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b088      	sub	sp, #32
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	460b      	mov	r3, r1
 800879a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800879c:	2000      	movs	r0, #0
 800879e:	f000 f8d1 	bl	8008944 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80087a2:	2300      	movs	r3, #0
 80087a4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	885b      	ldrh	r3, [r3, #2]
 80087aa:	b21b      	sxth	r3, r3
 80087ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087b0:	b21a      	sxth	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	881b      	ldrh	r3, [r3, #0]
 80087b6:	b21b      	sxth	r3, r3
 80087b8:	029b      	lsls	r3, r3, #10
 80087ba:	b21b      	sxth	r3, r3
 80087bc:	4313      	orrs	r3, r2
 80087be:	b21b      	sxth	r3, r3
 80087c0:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 80087c2:	4b33      	ldr	r3, [pc, #204]	@ (8008890 <hci_send_req+0x100>)
 80087c4:	2201      	movs	r2, #1
 80087c6:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	b2d9      	uxtb	r1, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	689a      	ldr	r2, [r3, #8]
 80087d2:	8bbb      	ldrh	r3, [r7, #28]
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 f88f 	bl	80088f8 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80087da:	e04e      	b.n	800887a <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80087dc:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80087e0:	f001 f859 	bl	8009896 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80087e4:	e043      	b.n	800886e <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80087e6:	f107 030c 	add.w	r3, r7, #12
 80087ea:	4619      	mov	r1, r3
 80087ec:	4829      	ldr	r0, [pc, #164]	@ (8008894 <hci_send_req+0x104>)
 80087ee:	f000 fd54 	bl	800929a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	7a5b      	ldrb	r3, [r3, #9]
 80087f6:	2b0f      	cmp	r3, #15
 80087f8:	d114      	bne.n	8008824 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	330b      	adds	r3, #11
 80087fe:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	885b      	ldrh	r3, [r3, #2]
 8008804:	b29b      	uxth	r3, r3
 8008806:	8bba      	ldrh	r2, [r7, #28]
 8008808:	429a      	cmp	r2, r3
 800880a:	d104      	bne.n	8008816 <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	693a      	ldr	r2, [r7, #16]
 8008812:	7812      	ldrb	r2, [r2, #0]
 8008814:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	785b      	ldrb	r3, [r3, #1]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d027      	beq.n	800886e <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800881e:	2301      	movs	r3, #1
 8008820:	77fb      	strb	r3, [r7, #31]
 8008822:	e024      	b.n	800886e <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	330b      	adds	r3, #11
 8008828:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008830:	b29b      	uxth	r3, r3
 8008832:	8bba      	ldrh	r2, [r7, #28]
 8008834:	429a      	cmp	r2, r3
 8008836:	d114      	bne.n	8008862 <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	7a9b      	ldrb	r3, [r3, #10]
 800883c:	3b03      	subs	r3, #3
 800883e:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	695a      	ldr	r2, [r3, #20]
 8008844:	7dfb      	ldrb	r3, [r7, #23]
 8008846:	429a      	cmp	r2, r3
 8008848:	bfa8      	it	ge
 800884a:	461a      	movge	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6918      	ldr	r0, [r3, #16]
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	1cd9      	adds	r1, r3, #3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	695b      	ldr	r3, [r3, #20]
 800885c:	461a      	mov	r2, r3
 800885e:	f002 f9ff 	bl	800ac60 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d001      	beq.n	800886e <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800886a:	2301      	movs	r3, #1
 800886c:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800886e:	4809      	ldr	r0, [pc, #36]	@ (8008894 <hci_send_req+0x104>)
 8008870:	f000 fc84 	bl	800917c <LST_is_empty>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d0b5      	beq.n	80087e6 <hci_send_req+0x56>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800887a:	7ffb      	ldrb	r3, [r7, #31]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d0ad      	beq.n	80087dc <hci_send_req+0x4c>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8008880:	2001      	movs	r0, #1
 8008882:	f000 f85f 	bl	8008944 <NotifyCmdStatus>

  return 0;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3720      	adds	r7, #32
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	200003cc 	.word	0x200003cc
 8008894:	200003c0 	.word	0x200003c0

08008898 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b086      	sub	sp, #24
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80088a0:	480f      	ldr	r0, [pc, #60]	@ (80088e0 <TlInit+0x48>)
 80088a2:	f000 fc5b 	bl	800915c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80088a6:	4a0f      	ldr	r2, [pc, #60]	@ (80088e4 <TlInit+0x4c>)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80088ac:	480e      	ldr	r0, [pc, #56]	@ (80088e8 <TlInit+0x50>)
 80088ae:	f000 fc55 	bl	800915c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80088b2:	4b0e      	ldr	r3, [pc, #56]	@ (80088ec <TlInit+0x54>)
 80088b4:	2201      	movs	r2, #1
 80088b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80088b8:	4b0d      	ldr	r3, [pc, #52]	@ (80088f0 <TlInit+0x58>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00a      	beq.n	80088d6 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80088c4:	4b0b      	ldr	r3, [pc, #44]	@ (80088f4 <TlInit+0x5c>)
 80088c6:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80088c8:	4b09      	ldr	r3, [pc, #36]	@ (80088f0 <TlInit+0x58>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f107 0208 	add.w	r2, r7, #8
 80088d0:	4610      	mov	r0, r2
 80088d2:	4798      	blx	r3
  }

  return;
 80088d4:	bf00      	nop
 80088d6:	bf00      	nop
}
 80088d8:	3718      	adds	r7, #24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	200003c0 	.word	0x200003c0
 80088e4:	20000100 	.word	0x20000100
 80088e8:	200000f8 	.word	0x200000f8
 80088ec:	20000104 	.word	0x20000104
 80088f0:	200003a0 	.word	0x200003a0
 80088f4:	08008985 	.word	0x08008985

080088f8 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	4603      	mov	r3, r0
 8008900:	603a      	str	r2, [r7, #0]
 8008902:	80fb      	strh	r3, [r7, #6]
 8008904:	460b      	mov	r3, r1
 8008906:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8008908:	4b0c      	ldr	r3, [pc, #48]	@ (800893c <SendCmd+0x44>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	88fa      	ldrh	r2, [r7, #6]
 800890e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8008912:	4b0a      	ldr	r3, [pc, #40]	@ (800893c <SendCmd+0x44>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	797a      	ldrb	r2, [r7, #5]
 8008918:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800891a:	4b08      	ldr	r3, [pc, #32]	@ (800893c <SendCmd+0x44>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	330c      	adds	r3, #12
 8008920:	797a      	ldrb	r2, [r7, #5]
 8008922:	6839      	ldr	r1, [r7, #0]
 8008924:	4618      	mov	r0, r3
 8008926:	f002 f99b 	bl	800ac60 <memcpy>

  hciContext.io.Send(0,0);
 800892a:	4b05      	ldr	r3, [pc, #20]	@ (8008940 <SendCmd+0x48>)
 800892c:	691b      	ldr	r3, [r3, #16]
 800892e:	2100      	movs	r1, #0
 8008930:	2000      	movs	r0, #0
 8008932:	4798      	blx	r3

  return;
 8008934:	bf00      	nop
}
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	20000100 	.word	0x20000100
 8008940:	200003a0 	.word	0x200003a0

08008944 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	4603      	mov	r3, r0
 800894c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800894e:	79fb      	ldrb	r3, [r7, #7]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d108      	bne.n	8008966 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008954:	4b0a      	ldr	r3, [pc, #40]	@ (8008980 <NotifyCmdStatus+0x3c>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00d      	beq.n	8008978 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800895c:	4b08      	ldr	r3, [pc, #32]	@ (8008980 <NotifyCmdStatus+0x3c>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2000      	movs	r0, #0
 8008962:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8008964:	e008      	b.n	8008978 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8008966:	4b06      	ldr	r3, [pc, #24]	@ (8008980 <NotifyCmdStatus+0x3c>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d004      	beq.n	8008978 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800896e:	4b04      	ldr	r3, [pc, #16]	@ (8008980 <NotifyCmdStatus+0x3c>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2001      	movs	r0, #1
 8008974:	4798      	blx	r3
  return;
 8008976:	bf00      	nop
 8008978:	bf00      	nop
}
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	200003c8 	.word	0x200003c8

08008984 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	7a5b      	ldrb	r3, [r3, #9]
 8008990:	2b0f      	cmp	r3, #15
 8008992:	d003      	beq.n	800899c <TlEvtReceived+0x18>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	7a5b      	ldrb	r3, [r3, #9]
 8008998:	2b0e      	cmp	r3, #14
 800899a:	d107      	bne.n	80089ac <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800899c:	6879      	ldr	r1, [r7, #4]
 800899e:	4809      	ldr	r0, [pc, #36]	@ (80089c4 <TlEvtReceived+0x40>)
 80089a0:	f000 fc34 	bl	800920c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80089a4:	2000      	movs	r0, #0
 80089a6:	f000 ff6b 	bl	8009880 <hci_cmd_resp_release>
 80089aa:	e006      	b.n	80089ba <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80089ac:	6879      	ldr	r1, [r7, #4]
 80089ae:	4806      	ldr	r0, [pc, #24]	@ (80089c8 <TlEvtReceived+0x44>)
 80089b0:	f000 fc2c 	bl	800920c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80089b4:	4804      	ldr	r0, [pc, #16]	@ (80089c8 <TlEvtReceived+0x44>)
 80089b6:	f000 ff57 	bl	8009868 <hci_notify_asynch_evt>
  }

  return;
 80089ba:	bf00      	nop
}
 80089bc:	3708      	adds	r7, #8
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	200003c0 	.word	0x200003c0
 80089c8:	200000f8 	.word	0x200000f8

080089cc <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a05      	ldr	r2, [pc, #20]	@ (80089ec <hci_register_io_bus+0x20>)
 80089d8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a04      	ldr	r2, [pc, #16]	@ (80089f0 <hci_register_io_bus+0x24>)
 80089de:	611a      	str	r2, [r3, #16]

  return;
 80089e0:	bf00      	nop
}
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr
 80089ec:	08008ce5 	.word	0x08008ce5
 80089f0:	08008d4d 	.word	0x08008d4d

080089f4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	4a08      	ldr	r2, [pc, #32]	@ (8008a24 <shci_init+0x30>)
 8008a04:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8008a06:	4a08      	ldr	r2, [pc, #32]	@ (8008a28 <shci_init+0x34>)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8008a0c:	4806      	ldr	r0, [pc, #24]	@ (8008a28 <shci_init+0x34>)
 8008a0e:	f000 f915 	bl	8008c3c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 f898 	bl	8008b4c <TlInit>

  return;
 8008a1c:	bf00      	nop
}
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	200003f0 	.word	0x200003f0
 8008a28:	200003d0 	.word	0x200003d0

08008a2c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008a32:	4822      	ldr	r0, [pc, #136]	@ (8008abc <shci_user_evt_proc+0x90>)
 8008a34:	f000 fba2 	bl	800917c <LST_is_empty>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d12b      	bne.n	8008a96 <shci_user_evt_proc+0x6a>
 8008a3e:	4b20      	ldr	r3, [pc, #128]	@ (8008ac0 <shci_user_evt_proc+0x94>)
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d027      	beq.n	8008a96 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008a46:	f107 030c 	add.w	r3, r7, #12
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	481b      	ldr	r0, [pc, #108]	@ (8008abc <shci_user_evt_proc+0x90>)
 8008a4e:	f000 fc24 	bl	800929a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8008a52:	4b1c      	ldr	r3, [pc, #112]	@ (8008ac4 <shci_user_evt_proc+0x98>)
 8008a54:	69db      	ldr	r3, [r3, #28]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00c      	beq.n	8008a74 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008a62:	4b18      	ldr	r3, [pc, #96]	@ (8008ac4 <shci_user_evt_proc+0x98>)
 8008a64:	69db      	ldr	r3, [r3, #28]
 8008a66:	1d3a      	adds	r2, r7, #4
 8008a68:	4610      	mov	r0, r2
 8008a6a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8008a6c:	793a      	ldrb	r2, [r7, #4]
 8008a6e:	4b14      	ldr	r3, [pc, #80]	@ (8008ac0 <shci_user_evt_proc+0x94>)
 8008a70:	701a      	strb	r2, [r3, #0]
 8008a72:	e002      	b.n	8008a7a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008a74:	4b12      	ldr	r3, [pc, #72]	@ (8008ac0 <shci_user_evt_proc+0x94>)
 8008a76:	2201      	movs	r2, #1
 8008a78:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8008a7a:	4b11      	ldr	r3, [pc, #68]	@ (8008ac0 <shci_user_evt_proc+0x94>)
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d004      	beq.n	8008a8c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 fa75 	bl	8008f74 <TL_MM_EvtDone>
 8008a8a:	e004      	b.n	8008a96 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	4619      	mov	r1, r3
 8008a90:	480a      	ldr	r0, [pc, #40]	@ (8008abc <shci_user_evt_proc+0x90>)
 8008a92:	f000 fb95 	bl	80091c0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008a96:	4809      	ldr	r0, [pc, #36]	@ (8008abc <shci_user_evt_proc+0x90>)
 8008a98:	f000 fb70 	bl	800917c <LST_is_empty>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d107      	bne.n	8008ab2 <shci_user_evt_proc+0x86>
 8008aa2:	4b07      	ldr	r3, [pc, #28]	@ (8008ac0 <shci_user_evt_proc+0x94>)
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d003      	beq.n	8008ab2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8008aaa:	4804      	ldr	r0, [pc, #16]	@ (8008abc <shci_user_evt_proc+0x90>)
 8008aac:	f7f7 fd7e 	bl	80005ac <shci_notify_asynch_evt>
  }


  return;
 8008ab0:	bf00      	nop
 8008ab2:	bf00      	nop
}
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	20000108 	.word	0x20000108
 8008ac0:	20000118 	.word	0x20000118
 8008ac4:	200003d0 	.word	0x200003d0

08008ac8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60ba      	str	r2, [r7, #8]
 8008ad0:	607b      	str	r3, [r7, #4]
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	81fb      	strh	r3, [r7, #14]
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8008ada:	2000      	movs	r0, #0
 8008adc:	f000 f868 	bl	8008bb0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8008ae0:	4b17      	ldr	r3, [pc, #92]	@ (8008b40 <shci_send+0x78>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	89fa      	ldrh	r2, [r7, #14]
 8008ae6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8008aea:	4b15      	ldr	r3, [pc, #84]	@ (8008b40 <shci_send+0x78>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	7b7a      	ldrb	r2, [r7, #13]
 8008af0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8008af2:	4b13      	ldr	r3, [pc, #76]	@ (8008b40 <shci_send+0x78>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	330c      	adds	r3, #12
 8008af8:	7b7a      	ldrb	r2, [r7, #13]
 8008afa:	68b9      	ldr	r1, [r7, #8]
 8008afc:	4618      	mov	r0, r3
 8008afe:	f002 f8af 	bl	800ac60 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8008b02:	4b10      	ldr	r3, [pc, #64]	@ (8008b44 <shci_send+0x7c>)
 8008b04:	2201      	movs	r2, #1
 8008b06:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8008b08:	4b0f      	ldr	r3, [pc, #60]	@ (8008b48 <shci_send+0x80>)
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	2000      	movs	r0, #0
 8008b10:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8008b12:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8008b16:	f7f7 fd60 	bl	80005da <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f103 0008 	add.w	r0, r3, #8
 8008b20:	4b07      	ldr	r3, [pc, #28]	@ (8008b40 <shci_send+0x78>)
 8008b22:	6819      	ldr	r1, [r3, #0]
 8008b24:	4b06      	ldr	r3, [pc, #24]	@ (8008b40 <shci_send+0x78>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	789b      	ldrb	r3, [r3, #2]
 8008b2a:	3303      	adds	r3, #3
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	f002 f897 	bl	800ac60 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008b32:	2001      	movs	r0, #1
 8008b34:	f000 f83c 	bl	8008bb0 <Cmd_SetStatus>

  return;
 8008b38:	bf00      	nop
}
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	20000114 	.word	0x20000114
 8008b44:	200003f4 	.word	0x200003f4
 8008b48:	200003d0 	.word	0x200003d0

08008b4c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b086      	sub	sp, #24
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8008b54:	4a10      	ldr	r2, [pc, #64]	@ (8008b98 <TlInit+0x4c>)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8008b5a:	4810      	ldr	r0, [pc, #64]	@ (8008b9c <TlInit+0x50>)
 8008b5c:	f000 fafe 	bl	800915c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008b60:	2001      	movs	r0, #1
 8008b62:	f000 f825 	bl	8008bb0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008b66:	4b0e      	ldr	r3, [pc, #56]	@ (8008ba0 <TlInit+0x54>)
 8008b68:	2201      	movs	r2, #1
 8008b6a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8008b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8008ba4 <TlInit+0x58>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00c      	beq.n	8008b8e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8008b78:	4b0b      	ldr	r3, [pc, #44]	@ (8008ba8 <TlInit+0x5c>)
 8008b7a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8008b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8008bac <TlInit+0x60>)
 8008b7e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8008b80:	4b08      	ldr	r3, [pc, #32]	@ (8008ba4 <TlInit+0x58>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f107 020c 	add.w	r2, r7, #12
 8008b88:	4610      	mov	r0, r2
 8008b8a:	4798      	blx	r3
  }

  return;
 8008b8c:	bf00      	nop
 8008b8e:	bf00      	nop
}
 8008b90:	3718      	adds	r7, #24
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	20000114 	.word	0x20000114
 8008b9c:	20000108 	.word	0x20000108
 8008ba0:	20000118 	.word	0x20000118
 8008ba4:	200003d0 	.word	0x200003d0
 8008ba8:	08008c01 	.word	0x08008c01
 8008bac:	08008c19 	.word	0x08008c19

08008bb0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8008bba:	79fb      	ldrb	r3, [r7, #7]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10b      	bne.n	8008bd8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8008bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8008bf8 <Cmd_SetStatus+0x48>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d003      	beq.n	8008bd0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8008bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8008bf8 <Cmd_SetStatus+0x48>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2000      	movs	r0, #0
 8008bce:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8008bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8008bfc <Cmd_SetStatus+0x4c>)
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8008bd6:	e00b      	b.n	8008bf0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8008bd8:	4b08      	ldr	r3, [pc, #32]	@ (8008bfc <Cmd_SetStatus+0x4c>)
 8008bda:	2201      	movs	r2, #1
 8008bdc:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8008bde:	4b06      	ldr	r3, [pc, #24]	@ (8008bf8 <Cmd_SetStatus+0x48>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d004      	beq.n	8008bf0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8008be6:	4b04      	ldr	r3, [pc, #16]	@ (8008bf8 <Cmd_SetStatus+0x48>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2001      	movs	r0, #1
 8008bec:	4798      	blx	r3
  return;
 8008bee:	bf00      	nop
 8008bf0:	bf00      	nop
}
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	200003f0 	.word	0x200003f0
 8008bfc:	20000110 	.word	0x20000110

08008c00 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8008c08:	2000      	movs	r0, #0
 8008c0a:	f7f7 fcdb 	bl	80005c4 <shci_cmd_resp_release>

  return;
 8008c0e:	bf00      	nop
}
 8008c10:	3708      	adds	r7, #8
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
	...

08008c18 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8008c20:	6879      	ldr	r1, [r7, #4]
 8008c22:	4805      	ldr	r0, [pc, #20]	@ (8008c38 <TlUserEvtReceived+0x20>)
 8008c24:	f000 faf2 	bl	800920c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008c28:	4803      	ldr	r0, [pc, #12]	@ (8008c38 <TlUserEvtReceived+0x20>)
 8008c2a:	f7f7 fcbf 	bl	80005ac <shci_notify_asynch_evt>

  return;
 8008c2e:	bf00      	nop
}
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	20000108 	.word	0x20000108

08008c3c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a05      	ldr	r2, [pc, #20]	@ (8008c5c <shci_register_io_bus+0x20>)
 8008c48:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a04      	ldr	r2, [pc, #16]	@ (8008c60 <shci_register_io_bus+0x24>)
 8008c4e:	611a      	str	r2, [r3, #16]

  return;
 8008c50:	bf00      	nop
}
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr
 8008c5c:	08008e01 	.word	0x08008e01
 8008c60:	08008e55 	.word	0x08008e55

08008c64 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8008c68:	f001 fb70 	bl	800a34c <HW_IPCC_Enable>

  return;
 8008c6c:	bf00      	nop
}
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <TL_Init>:


void TL_Init( void )
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8008c74:	4b10      	ldr	r3, [pc, #64]	@ (8008cb8 <TL_Init+0x48>)
 8008c76:	4a11      	ldr	r2, [pc, #68]	@ (8008cbc <TL_Init+0x4c>)
 8008c78:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8008c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8008cb8 <TL_Init+0x48>)
 8008c7c:	4a10      	ldr	r2, [pc, #64]	@ (8008cc0 <TL_Init+0x50>)
 8008c7e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8008c80:	4b0d      	ldr	r3, [pc, #52]	@ (8008cb8 <TL_Init+0x48>)
 8008c82:	4a10      	ldr	r2, [pc, #64]	@ (8008cc4 <TL_Init+0x54>)
 8008c84:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8008c86:	4b0c      	ldr	r3, [pc, #48]	@ (8008cb8 <TL_Init+0x48>)
 8008c88:	4a0f      	ldr	r2, [pc, #60]	@ (8008cc8 <TL_Init+0x58>)
 8008c8a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8008c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008cb8 <TL_Init+0x48>)
 8008c8e:	4a0f      	ldr	r2, [pc, #60]	@ (8008ccc <TL_Init+0x5c>)
 8008c90:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8008c92:	4b09      	ldr	r3, [pc, #36]	@ (8008cb8 <TL_Init+0x48>)
 8008c94:	4a0e      	ldr	r2, [pc, #56]	@ (8008cd0 <TL_Init+0x60>)
 8008c96:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8008c98:	4b07      	ldr	r3, [pc, #28]	@ (8008cb8 <TL_Init+0x48>)
 8008c9a:	4a0e      	ldr	r2, [pc, #56]	@ (8008cd4 <TL_Init+0x64>)
 8008c9c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8008c9e:	4b06      	ldr	r3, [pc, #24]	@ (8008cb8 <TL_Init+0x48>)
 8008ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8008cd8 <TL_Init+0x68>)
 8008ca2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8008ca4:	4b04      	ldr	r3, [pc, #16]	@ (8008cb8 <TL_Init+0x48>)
 8008ca6:	4a0d      	ldr	r2, [pc, #52]	@ (8008cdc <TL_Init+0x6c>)
 8008ca8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8008caa:	4b03      	ldr	r3, [pc, #12]	@ (8008cb8 <TL_Init+0x48>)
 8008cac:	4a0c      	ldr	r2, [pc, #48]	@ (8008ce0 <TL_Init+0x70>)
 8008cae:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8008cb0:	f001 fb60 	bl	800a374 <HW_IPCC_Init>

  return;
 8008cb4:	bf00      	nop
}
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	20030000 	.word	0x20030000
 8008cbc:	20030028 	.word	0x20030028
 8008cc0:	20030048 	.word	0x20030048
 8008cc4:	20030058 	.word	0x20030058
 8008cc8:	20030068 	.word	0x20030068
 8008ccc:	20030070 	.word	0x20030070
 8008cd0:	20030078 	.word	0x20030078
 8008cd4:	20030080 	.word	0x20030080
 8008cd8:	2003009c 	.word	0x2003009c
 8008cdc:	200300a0 	.word	0x200300a0
 8008ce0:	200300ac 	.word	0x200300ac

08008ce4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8008cf0:	4811      	ldr	r0, [pc, #68]	@ (8008d38 <TL_BLE_Init+0x54>)
 8008cf2:	f000 fa33 	bl	800915c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8008cf6:	4b11      	ldr	r3, [pc, #68]	@ (8008d3c <TL_BLE_Init+0x58>)
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	689a      	ldr	r2, [r3, #8]
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	68da      	ldr	r2, [r3, #12]
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8008d40 <TL_BLE_Init+0x5c>)
 8008d10:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	4a08      	ldr	r2, [pc, #32]	@ (8008d38 <TL_BLE_Init+0x54>)
 8008d16:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8008d18:	f001 fb42 	bl	800a3a0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a08      	ldr	r2, [pc, #32]	@ (8008d44 <TL_BLE_Init+0x60>)
 8008d22:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	4a07      	ldr	r2, [pc, #28]	@ (8008d48 <TL_BLE_Init+0x64>)
 8008d2a:	6013      	str	r3, [r2, #0]

  return 0;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	200300c8 	.word	0x200300c8
 8008d3c:	20030000 	.word	0x20030000
 8008d40:	20030a58 	.word	0x20030a58
 8008d44:	20000400 	.word	0x20000400
 8008d48:	20000404 	.word	0x20000404

08008d4c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	460b      	mov	r3, r1
 8008d56:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008d58:	4b09      	ldr	r3, [pc, #36]	@ (8008d80 <TL_BLE_SendCmd+0x34>)
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8008d62:	4b07      	ldr	r3, [pc, #28]	@ (8008d80 <TL_BLE_SendCmd+0x34>)
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4619      	mov	r1, r3
 8008d6a:	2001      	movs	r0, #1
 8008d6c:	f000 f970 	bl	8009050 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8008d70:	f001 fb30 	bl	800a3d4 <HW_IPCC_BLE_SendCmd>

  return 0;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	20030000 	.word	0x20030000

08008d84 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8008d8a:	e01c      	b.n	8008dc6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8008d8c:	1d3b      	adds	r3, r7, #4
 8008d8e:	4619      	mov	r1, r3
 8008d90:	4812      	ldr	r0, [pc, #72]	@ (8008ddc <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008d92:	f000 fa82 	bl	800929a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	7a5b      	ldrb	r3, [r3, #9]
 8008d9a:	2b0f      	cmp	r3, #15
 8008d9c:	d003      	beq.n	8008da6 <HW_IPCC_BLE_RxEvtNot+0x22>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	7a5b      	ldrb	r3, [r3, #9]
 8008da2:	2b0e      	cmp	r3, #14
 8008da4:	d105      	bne.n	8008db2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4619      	mov	r1, r3
 8008daa:	2002      	movs	r0, #2
 8008dac:	f000 f950 	bl	8009050 <OutputDbgTrace>
 8008db0:	e004      	b.n	8008dbc <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4619      	mov	r1, r3
 8008db6:	2005      	movs	r0, #5
 8008db8:	f000 f94a 	bl	8009050 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008dbc:	4b08      	ldr	r3, [pc, #32]	@ (8008de0 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	4610      	mov	r0, r2
 8008dc4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8008dc6:	4805      	ldr	r0, [pc, #20]	@ (8008ddc <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008dc8:	f000 f9d8 	bl	800917c <LST_is_empty>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d0dc      	beq.n	8008d8c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008dd2:	bf00      	nop
}
 8008dd4:	3708      	adds	r7, #8
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	200300c8 	.word	0x200300c8
 8008de0:	20000400 	.word	0x20000400

08008de4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_ACL_DATA_RSP, (uint8_t*)NULL);
 8008de8:	2100      	movs	r1, #0
 8008dea:	2004      	movs	r0, #4
 8008dec:	f000 f930 	bl	8009050 <OutputDbgTrace>
  
  BLE_IoBusAclDataTxAck( );
 8008df0:	4b02      	ldr	r3, [pc, #8]	@ (8008dfc <HW_IPCC_BLE_AclDataAckNot+0x18>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4798      	blx	r3
       
  return;
 8008df6:	bf00      	nop
}
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	20000404 	.word	0x20000404

08008e00 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008e0c:	480d      	ldr	r0, [pc, #52]	@ (8008e44 <TL_SYS_Init+0x44>)
 8008e0e:	f000 f9a5 	bl	800915c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8008e12:	4b0d      	ldr	r3, [pc, #52]	@ (8008e48 <TL_SYS_Init+0x48>)
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	689a      	ldr	r2, [r3, #8]
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	4a08      	ldr	r2, [pc, #32]	@ (8008e44 <TL_SYS_Init+0x44>)
 8008e24:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8008e26:	f001 fb07 	bl	800a438 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a07      	ldr	r2, [pc, #28]	@ (8008e4c <TL_SYS_Init+0x4c>)
 8008e30:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	4a06      	ldr	r2, [pc, #24]	@ (8008e50 <TL_SYS_Init+0x50>)
 8008e38:	6013      	str	r3, [r2, #0]

  return 0;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3710      	adds	r7, #16
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	200300d0 	.word	0x200300d0
 8008e48:	20030000 	.word	0x20030000
 8008e4c:	20000408 	.word	0x20000408
 8008e50:	2000040c 	.word	0x2000040c

08008e54 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008e60:	4b09      	ldr	r3, [pc, #36]	@ (8008e88 <TL_SYS_SendCmd+0x34>)
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2210      	movs	r2, #16
 8008e68:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8008e6a:	4b07      	ldr	r3, [pc, #28]	@ (8008e88 <TL_SYS_SendCmd+0x34>)
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4619      	mov	r1, r3
 8008e72:	2006      	movs	r0, #6
 8008e74:	f000 f8ec 	bl	8009050 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008e78:	f001 faf8 	bl	800a46c <HW_IPCC_SYS_SendCmd>

  return 0;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3708      	adds	r7, #8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	20030000 	.word	0x20030000

08008e8c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008e90:	4b07      	ldr	r3, [pc, #28]	@ (8008eb0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4619      	mov	r1, r3
 8008e98:	2007      	movs	r0, #7
 8008e9a:	f000 f8d9 	bl	8009050 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008e9e:	4b05      	ldr	r3, [pc, #20]	@ (8008eb4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a03      	ldr	r2, [pc, #12]	@ (8008eb0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008ea4:	68d2      	ldr	r2, [r2, #12]
 8008ea6:	6812      	ldr	r2, [r2, #0]
 8008ea8:	4610      	mov	r0, r2
 8008eaa:	4798      	blx	r3

  return;
 8008eac:	bf00      	nop
}
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	20030000 	.word	0x20030000
 8008eb4:	20000408 	.word	0x20000408

08008eb8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008ebe:	e00e      	b.n	8008ede <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8008ec0:	1d3b      	adds	r3, r7, #4
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	480b      	ldr	r0, [pc, #44]	@ (8008ef4 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008ec6:	f000 f9e8 	bl	800929a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4619      	mov	r1, r3
 8008ece:	2008      	movs	r0, #8
 8008ed0:	f000 f8be 	bl	8009050 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008ed4:	4b08      	ldr	r3, [pc, #32]	@ (8008ef8 <HW_IPCC_SYS_EvtNot+0x40>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	4610      	mov	r0, r2
 8008edc:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008ede:	4805      	ldr	r0, [pc, #20]	@ (8008ef4 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008ee0:	f000 f94c 	bl	800917c <LST_is_empty>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d0ea      	beq.n	8008ec0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8008eea:	bf00      	nop
}
 8008eec:	3708      	adds	r7, #8
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	200300d0 	.word	0x200300d0
 8008ef8:	2000040c 	.word	0x2000040c

08008efc <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008f04:	4817      	ldr	r0, [pc, #92]	@ (8008f64 <TL_MM_Init+0x68>)
 8008f06:	f000 f929 	bl	800915c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008f0a:	4817      	ldr	r0, [pc, #92]	@ (8008f68 <TL_MM_Init+0x6c>)
 8008f0c:	f000 f926 	bl	800915c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008f10:	4b16      	ldr	r3, [pc, #88]	@ (8008f6c <TL_MM_Init+0x70>)
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	4a16      	ldr	r2, [pc, #88]	@ (8008f70 <TL_MM_Init+0x74>)
 8008f16:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008f18:	4b15      	ldr	r3, [pc, #84]	@ (8008f70 <TL_MM_Init+0x74>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	6892      	ldr	r2, [r2, #8]
 8008f20:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8008f22:	4b13      	ldr	r3, [pc, #76]	@ (8008f70 <TL_MM_Init+0x74>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	68d2      	ldr	r2, [r2, #12]
 8008f2a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008f2c:	4b10      	ldr	r3, [pc, #64]	@ (8008f70 <TL_MM_Init+0x74>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a0c      	ldr	r2, [pc, #48]	@ (8008f64 <TL_MM_Init+0x68>)
 8008f32:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008f34:	4b0e      	ldr	r3, [pc, #56]	@ (8008f70 <TL_MM_Init+0x74>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	6812      	ldr	r2, [r2, #0]
 8008f3c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8008f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8008f70 <TL_MM_Init+0x74>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	6852      	ldr	r2, [r2, #4]
 8008f46:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8008f48:	4b09      	ldr	r3, [pc, #36]	@ (8008f70 <TL_MM_Init+0x74>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	6912      	ldr	r2, [r2, #16]
 8008f50:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8008f52:	4b07      	ldr	r3, [pc, #28]	@ (8008f70 <TL_MM_Init+0x74>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	6952      	ldr	r2, [r2, #20]
 8008f5a:	619a      	str	r2, [r3, #24]

  return;
 8008f5c:	bf00      	nop
}
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	200300b8 	.word	0x200300b8
 8008f68:	200003f8 	.word	0x200003f8
 8008f6c:	20030000 	.word	0x20030000
 8008f70:	20000410 	.word	0x20000410

08008f74 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008f7c:	6879      	ldr	r1, [r7, #4]
 8008f7e:	4807      	ldr	r0, [pc, #28]	@ (8008f9c <TL_MM_EvtDone+0x28>)
 8008f80:	f000 f944 	bl	800920c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8008f84:	6879      	ldr	r1, [r7, #4]
 8008f86:	2000      	movs	r0, #0
 8008f88:	f000 f862 	bl	8009050 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008f8c:	4804      	ldr	r0, [pc, #16]	@ (8008fa0 <TL_MM_EvtDone+0x2c>)
 8008f8e:	f001 fab3 	bl	800a4f8 <HW_IPCC_MM_SendFreeBuf>

  return;
 8008f92:	bf00      	nop
}
 8008f94:	3708      	adds	r7, #8
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	200003f8 	.word	0x200003f8
 8008fa0:	08008fa5 	.word	0x08008fa5

08008fa4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008faa:	e00c      	b.n	8008fc6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008fac:	1d3b      	adds	r3, r7, #4
 8008fae:	4619      	mov	r1, r3
 8008fb0:	480a      	ldr	r0, [pc, #40]	@ (8008fdc <SendFreeBuf+0x38>)
 8008fb2:	f000 f972 	bl	800929a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8008fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8008fe0 <SendFreeBuf+0x3c>)
 8008fb8:	691b      	ldr	r3, [r3, #16]
 8008fba:	691b      	ldr	r3, [r3, #16]
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f000 f923 	bl	800920c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008fc6:	4805      	ldr	r0, [pc, #20]	@ (8008fdc <SendFreeBuf+0x38>)
 8008fc8:	f000 f8d8 	bl	800917c <LST_is_empty>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d0ec      	beq.n	8008fac <SendFreeBuf+0x8>
  }

  return;
 8008fd2:	bf00      	nop
}
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	200003f8 	.word	0x200003f8
 8008fe0:	20030000 	.word	0x20030000

08008fe4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008fe8:	4805      	ldr	r0, [pc, #20]	@ (8009000 <TL_TRACES_Init+0x1c>)
 8008fea:	f000 f8b7 	bl	800915c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8008fee:	4b05      	ldr	r3, [pc, #20]	@ (8009004 <TL_TRACES_Init+0x20>)
 8008ff0:	695b      	ldr	r3, [r3, #20]
 8008ff2:	4a03      	ldr	r2, [pc, #12]	@ (8009000 <TL_TRACES_Init+0x1c>)
 8008ff4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8008ff6:	f001 fad1 	bl	800a59c <HW_IPCC_TRACES_Init>

  return;
 8008ffa:	bf00      	nop
}
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	200300c0 	.word	0x200300c0
 8009004:	20030000 	.word	0x20030000

08009008 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800900e:	e008      	b.n	8009022 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8009010:	1d3b      	adds	r3, r7, #4
 8009012:	4619      	mov	r1, r3
 8009014:	4808      	ldr	r0, [pc, #32]	@ (8009038 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009016:	f000 f940 	bl	800929a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4618      	mov	r0, r3
 800901e:	f000 f80d 	bl	800903c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009022:	4805      	ldr	r0, [pc, #20]	@ (8009038 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009024:	f000 f8aa 	bl	800917c <LST_is_empty>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d0f0      	beq.n	8009010 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800902e:	bf00      	nop
}
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	200300c0 	.word	0x200300c0

0800903c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8009044:	bf00      	nop
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <OutputDbgTrace>:

/******************************************************************************
* DEBUG INFORMATION
******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8009050:	b480      	push	{r7}
 8009052:	b087      	sub	sp, #28
 8009054:	af00      	add	r7, sp, #0
 8009056:	4603      	mov	r3, r0
 8009058:	6039      	str	r1, [r7, #0]
 800905a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_AclDataPacket_t *p_acldata_packet; 
  TL_EvtSerial_t *p_cmd_rsp_packet;
  
  switch(packet_type)
 800905c:	79fb      	ldrb	r3, [r7, #7]
 800905e:	2b08      	cmp	r3, #8
 8009060:	d84c      	bhi.n	80090fc <OutputDbgTrace+0xac>
 8009062:	a201      	add	r2, pc, #4	@ (adr r2, 8009068 <OutputDbgTrace+0x18>)
 8009064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009068:	0800908d 	.word	0x0800908d
 800906c:	080090b1 	.word	0x080090b1
 8009070:	080090bd 	.word	0x080090bd
 8009074:	080090b7 	.word	0x080090b7
 8009078:	080090fd 	.word	0x080090fd
 800907c:	080090d1 	.word	0x080090d1
 8009080:	080090dd 	.word	0x080090dd
 8009084:	080090e3 	.word	0x080090e3
 8009088:	080090f1 	.word	0x080090f1
  {
  case TL_MB_MM_RELEASE_BUFFER:
    p_evt_packet = (TL_EvtPacket_t*)buffer;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	617b      	str	r3, [r7, #20]
    switch(p_evt_packet->evtserial.evt.evtcode)
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	7a5b      	ldrb	r3, [r3, #9]
 8009094:	2bff      	cmp	r3, #255	@ 0xff
 8009096:	d005      	beq.n	80090a4 <OutputDbgTrace+0x54>
 8009098:	2bff      	cmp	r3, #255	@ 0xff
 800909a:	dc05      	bgt.n	80090a8 <OutputDbgTrace+0x58>
 800909c:	2b0e      	cmp	r3, #14
 800909e:	d005      	beq.n	80090ac <OutputDbgTrace+0x5c>
 80090a0:	2b0f      	cmp	r3, #15
      break;
      
    default:
      TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
      TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
      break;
 80090a2:	e001      	b.n	80090a8 <OutputDbgTrace+0x58>
      break;
 80090a4:	bf00      	nop
 80090a6:	e02a      	b.n	80090fe <OutputDbgTrace+0xae>
      break;
 80090a8:	bf00      	nop
 80090aa:	e028      	b.n	80090fe <OutputDbgTrace+0xae>
      break;
 80090ac:	bf00      	nop
    }
    
    TL_MM_DBG_MSG("\r\n");
    break;
 80090ae:	e026      	b.n	80090fe <OutputDbgTrace+0xae>
    
  case TL_MB_BLE_CMD:
    p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	60fb      	str	r3, [r7, #12]
      TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
    }
    TL_HCI_CMD_DBG_MSG("\r\n");
    
    TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
    break;
 80090b4:	e023      	b.n	80090fe <OutputDbgTrace+0xae>
    
  case TL_MB_ACL_DATA:
    (void)p_acldata_packet;
    p_acldata_packet = (TL_AclDataPacket_t*)buffer;
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	60bb      	str	r3, [r7, #8]
    TL_HCI_CMD_DBG_MSG(" payload:");
    TL_HCI_CMD_DBG_BUF(p_acldata_packet->AclDataSerial.acl_data, p_acldata_packet->AclDataSerial.length, "");
  }*/
    TL_HCI_CMD_DBG_MSG("\r\n");
    /*TL_HCI_CMD_DBG_RAW(&p_acldata_packet->AclDataSerial, p_acldata_packet->AclDataSerial.length+TL_CMD_HDR_SIZE);*/
    break;
 80090ba:	e020      	b.n	80090fe <OutputDbgTrace+0xae>
    TL_HCI_CMD_DBG_MSG(" ACL Data Tx Ack received")
      TL_HCI_CMD_DBG_MSG("\r\n");
    break;
    
  case TL_MB_BLE_CMD_RSP:
    p_evt_packet = (TL_EvtPacket_t*)buffer;
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	617b      	str	r3, [r7, #20]
    switch(p_evt_packet->evtserial.evt.evtcode)
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	7a5b      	ldrb	r3, [r3, #9]
 80090c4:	2b0e      	cmp	r3, #14
 80090c6:	d001      	beq.n	80090cc <OutputDbgTrace+0x7c>
 80090c8:	2b0f      	cmp	r3, #15
      }
      break;
      
    default:
      TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
      break;
 80090ca:	e000      	b.n	80090ce <OutputDbgTrace+0x7e>
      break;
 80090cc:	bf00      	nop
    }
    
    TL_HCI_CMD_DBG_MSG("\r\n");
    
    TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
    break;
 80090ce:	e016      	b.n	80090fe <OutputDbgTrace+0xae>
    
  case TL_MB_BLE_ASYNCH_EVT:
    p_evt_packet = (TL_EvtPacket_t*)buffer;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	617b      	str	r3, [r7, #20]
    if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	7a5b      	ldrb	r3, [r3, #9]
 80090d8:	2bff      	cmp	r3, #255	@ 0xff
    }
    
    TL_HCI_EVT_DBG_MSG("\r\n");
    
    TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
    break;
 80090da:	e010      	b.n	80090fe <OutputDbgTrace+0xae>
    
  case TL_MB_SYS_CMD:
    p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	60fb      	str	r3, [r7, #12]
      TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
    }
    TL_SHCI_CMD_DBG_MSG("\r\n");
    
    TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
    break;
 80090e0:	e00d      	b.n	80090fe <OutputDbgTrace+0xae>
    
  case TL_MB_SYS_CMD_RSP:
    p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	613b      	str	r3, [r7, #16]
    switch(p_cmd_rsp_packet->evt.evtcode)
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	785b      	ldrb	r3, [r3, #1]
 80090ea:	2b0e      	cmp	r3, #14
      }
      break;
      
    default:
      TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
      break;
 80090ec:	bf00      	nop
    }
    
    TL_SHCI_CMD_DBG_MSG("\r\n");
    
    TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
    break;
 80090ee:	e006      	b.n	80090fe <OutputDbgTrace+0xae>
    
  case  TL_MB_SYS_ASYNCH_EVT:
    p_evt_packet = (TL_EvtPacket_t*)buffer;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	617b      	str	r3, [r7, #20]
    if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	7a5b      	ldrb	r3, [r3, #9]
 80090f8:	2bff      	cmp	r3, #255	@ 0xff
    }
    
    TL_SHCI_EVT_DBG_MSG("\r\n");
    
    TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
    break;
 80090fa:	e000      	b.n	80090fe <OutputDbgTrace+0xae>
    
  default:
    break;
 80090fc:	bf00      	nop
  }
  
  return;
 80090fe:	bf00      	nop
}
 8009100:	371c      	adds	r7, #28
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop

0800910c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800910c:	b480      	push	{r7}
 800910e:	b085      	sub	sp, #20
 8009110:	af00      	add	r7, sp, #0
 8009112:	4603      	mov	r3, r0
 8009114:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8009116:	4b0f      	ldr	r3, [pc, #60]	@ (8009154 <OTP_Read+0x48>)
 8009118:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800911a:	e002      	b.n	8009122 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	3b08      	subs	r3, #8
 8009120:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	3307      	adds	r3, #7
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	79fa      	ldrb	r2, [r7, #7]
 800912a:	429a      	cmp	r2, r3
 800912c:	d003      	beq.n	8009136 <OTP_Read+0x2a>
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	4a09      	ldr	r2, [pc, #36]	@ (8009158 <OTP_Read+0x4c>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d1f2      	bne.n	800911c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	3307      	adds	r3, #7
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	79fa      	ldrb	r2, [r7, #7]
 800913e:	429a      	cmp	r2, r3
 8009140:	d001      	beq.n	8009146 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8009142:	2300      	movs	r3, #0
 8009144:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009146:	68fb      	ldr	r3, [r7, #12]
}
 8009148:	4618      	mov	r0, r3
 800914a:	3714      	adds	r7, #20
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr
 8009154:	1fff73f8 	.word	0x1fff73f8
 8009158:	1fff7000 	.word	0x1fff7000

0800915c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	605a      	str	r2, [r3, #4]
}
 8009170:	bf00      	nop
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800917c:	b480      	push	{r7}
 800917e:	b087      	sub	sp, #28
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009184:	f3ef 8310 	mrs	r3, PRIMASK
 8009188:	60fb      	str	r3, [r7, #12]
  return(result);
 800918a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800918c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800918e:	b672      	cpsid	i
}
 8009190:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	429a      	cmp	r2, r3
 800919a:	d102      	bne.n	80091a2 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800919c:	2301      	movs	r3, #1
 800919e:	75fb      	strb	r3, [r7, #23]
 80091a0:	e001      	b.n	80091a6 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80091a2:	2300      	movs	r3, #0
 80091a4:	75fb      	strb	r3, [r7, #23]
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	f383 8810 	msr	PRIMASK, r3
}
 80091b0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80091b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	371c      	adds	r7, #28
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b087      	sub	sp, #28
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091ca:	f3ef 8310 	mrs	r3, PRIMASK
 80091ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80091d0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80091d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80091d4:	b672      	cpsid	i
}
 80091d6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	683a      	ldr	r2, [r7, #0]
 80091ea:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	683a      	ldr	r2, [r7, #0]
 80091f2:	605a      	str	r2, [r3, #4]
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	f383 8810 	msr	PRIMASK, r3
}
 80091fe:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009200:	bf00      	nop
 8009202:	371c      	adds	r7, #28
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800920c:	b480      	push	{r7}
 800920e:	b087      	sub	sp, #28
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009216:	f3ef 8310 	mrs	r3, PRIMASK
 800921a:	60fb      	str	r3, [r7, #12]
  return(result);
 800921c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800921e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009220:	b672      	cpsid	i
}
 8009222:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	685a      	ldr	r2, [r3, #4]
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	683a      	ldr	r2, [r7, #0]
 8009236:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	683a      	ldr	r2, [r7, #0]
 800923e:	601a      	str	r2, [r3, #0]
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	f383 8810 	msr	PRIMASK, r3
}
 800924a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800924c:	bf00      	nop
 800924e:	371c      	adds	r7, #28
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8009258:	b480      	push	{r7}
 800925a:	b087      	sub	sp, #28
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009260:	f3ef 8310 	mrs	r3, PRIMASK
 8009264:	60fb      	str	r3, [r7, #12]
  return(result);
 8009266:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009268:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800926a:	b672      	cpsid	i
}
 800926c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	6812      	ldr	r2, [r2, #0]
 8009276:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	6852      	ldr	r2, [r2, #4]
 8009280:	605a      	str	r2, [r3, #4]
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	f383 8810 	msr	PRIMASK, r3
}
 800928c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800928e:	bf00      	nop
 8009290:	371c      	adds	r7, #28
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr

0800929a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b086      	sub	sp, #24
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092a4:	f3ef 8310 	mrs	r3, PRIMASK
 80092a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80092aa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80092ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80092ae:	b672      	cpsid	i
}
 80092b0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4618      	mov	r0, r3
 80092c0:	f7ff ffca 	bl	8009258 <LST_remove_node>
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	f383 8810 	msr	PRIMASK, r3
}
 80092ce:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80092d0:	bf00      	nop
 80092d2:	3718      	adds	r7, #24
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80092d8:	b480      	push	{r7}
 80092da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80092dc:	4b03      	ldr	r3, [pc, #12]	@ (80092ec <LL_FLASH_GetUDN+0x14>)
 80092de:	681b      	ldr	r3, [r3, #0]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	1fff7580 	.word	0x1fff7580

080092f0 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80092f0:	b480      	push	{r7}
 80092f2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80092f4:	4b03      	ldr	r3, [pc, #12]	@ (8009304 <LL_FLASH_GetDeviceID+0x14>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	b2db      	uxtb	r3, r3
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr
 8009304:	1fff7584 	.word	0x1fff7584

08009308 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8009308:	b480      	push	{r7}
 800930a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800930c:	4b03      	ldr	r3, [pc, #12]	@ (800931c <LL_FLASH_GetSTCompanyID+0x14>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	0a1b      	lsrs	r3, r3, #8
}
 8009312:	4618      	mov	r0, r3
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr
 800931c:	1fff7584 	.word	0x1fff7584

08009320 <APP_BLE_Init>:
extern RTC_HandleTypeDef hrtc;
/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8009320:	b5b0      	push	{r4, r5, r7, lr}
 8009322:	b090      	sub	sp, #64	@ 0x40
 8009324:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009326:	2392      	movs	r3, #146	@ 0x92
 8009328:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_MY_TASK, UTIL_SEQ_RFU, myTask);
 800932c:	4a2b      	ldr	r2, [pc, #172]	@ (80093dc <APP_BLE_Init+0xbc>)
 800932e:	2100      	movs	r1, #0
 8009330:	2004      	movs	r0, #4
 8009332:	f001 fb1d 	bl	800a970 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 8009336:	2100      	movs	r1, #0
 8009338:	2004      	movs	r0, #4
 800933a:	f001 fb3b 	bl	800a9b4 <UTIL_SEQ_SetTask>

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800933e:	4b28      	ldr	r3, [pc, #160]	@ (80093e0 <APP_BLE_Init+0xc0>)
 8009340:	463c      	mov	r4, r7
 8009342:	461d      	mov	r5, r3
 8009344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800934a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800934c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800934e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009350:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009354:	c403      	stmia	r4!, {r0, r1}
 8009356:	8022      	strh	r2, [r4, #0]
 8009358:	3402      	adds	r4, #2
 800935a:	0c13      	lsrs	r3, r2, #16
 800935c:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800935e:	f000 f92b 	bl	80095b8 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8009362:	2101      	movs	r1, #1
 8009364:	2002      	movs	r0, #2
 8009366:	f001 f951 	bl	800a60c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800936a:	4a1e      	ldr	r2, [pc, #120]	@ (80093e4 <APP_BLE_Init+0xc4>)
 800936c:	2100      	movs	r1, #0
 800936e:	2002      	movs	r0, #2
 8009370:	f001 fafe 	bl	800a970 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8009374:	463b      	mov	r3, r7
 8009376:	4618      	mov	r0, r3
 8009378:	f7ff f8ae 	bl	80084d8 <SHCI_C2_BLE_Init>
 800937c:	4603      	mov	r3, r0
 800937e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8009382:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009386:	2b00      	cmp	r3, #0
 8009388:	d001      	beq.n	800938e <APP_BLE_Init+0x6e>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800938a:	f7f8 f9a5 	bl	80016d8 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800938e:	f000 f929 	bl	80095e4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8009392:	f7fe fffb 	bl	800838c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009396:	4b14      	ldr	r3, [pc, #80]	@ (80093e8 <APP_BLE_Init+0xc8>)
 8009398:	2200      	movs	r2, #0
 800939a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800939e:	4b12      	ldr	r3, [pc, #72]	@ (80093e8 <APP_BLE_Init+0xc8>)
 80093a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80093a4:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80093a6:	4a11      	ldr	r2, [pc, #68]	@ (80093ec <APP_BLE_Init+0xcc>)
 80093a8:	2100      	movs	r1, #0
 80093aa:	2001      	movs	r0, #1
 80093ac:	f001 fae0 	bl	800a970 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 80093b0:	2006      	movs	r0, #6
 80093b2:	f7fe fe5f 	bl	8008074 <aci_hal_set_radio_activity_mask>
 80093b6:	4603      	mov	r3, r0
 80093b8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80093bc:	f000 fbec 	bl	8009b98 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80093c0:	4b09      	ldr	r3, [pc, #36]	@ (80093e8 <APP_BLE_Init+0xc8>)
 80093c2:	2200      	movs	r2, #0
 80093c4:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80093c6:	4b08      	ldr	r3, [pc, #32]	@ (80093e8 <APP_BLE_Init+0xc8>)
 80093c8:	2200      	movs	r2, #0
 80093ca:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 80093cc:	2001      	movs	r0, #1
 80093ce:	f000 f9bd 	bl	800974c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 80093d2:	bf00      	nop
}
 80093d4:	3740      	adds	r7, #64	@ 0x40
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bdb0      	pop	{r4, r5, r7, pc}
 80093da:	bf00      	nop
 80093dc:	0800991d 	.word	0x0800991d
 80093e0:	0800ace8 	.word	0x0800ace8
 80093e4:	080086f5 	.word	0x080086f5
 80093e8:	2000041c 	.word	0x2000041c
 80093ec:	08009835 	.word	0x08009835

080093f0 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b08c      	sub	sp, #48	@ 0x30
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 80093f8:	2392      	movs	r3, #146	@ 0x92
 80093fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	3301      	adds	r3, #1
 8009402:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8009404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	2bff      	cmp	r3, #255	@ 0xff
 800940a:	d062      	beq.n	80094d2 <SVCCTL_App_Notification+0xe2>
 800940c:	2bff      	cmp	r3, #255	@ 0xff
 800940e:	f300 80c3 	bgt.w	8009598 <SVCCTL_App_Notification+0x1a8>
 8009412:	2b3e      	cmp	r3, #62	@ 0x3e
 8009414:	d02e      	beq.n	8009474 <SVCCTL_App_Notification+0x84>
 8009416:	2b3e      	cmp	r3, #62	@ 0x3e
 8009418:	f300 80be 	bgt.w	8009598 <SVCCTL_App_Notification+0x1a8>
 800941c:	2b05      	cmp	r3, #5
 800941e:	d002      	beq.n	8009426 <SVCCTL_App_Notification+0x36>
 8009420:	2b10      	cmp	r3, #16
 8009422:	d023      	beq.n	800946c <SVCCTL_App_Notification+0x7c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8009424:	e0b8      	b.n	8009598 <SVCCTL_App_Notification+0x1a8>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8009426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009428:	3302      	adds	r3, #2
 800942a:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009432:	b29a      	uxth	r2, r3
 8009434:	4b5c      	ldr	r3, [pc, #368]	@ (80095a8 <SVCCTL_App_Notification+0x1b8>)
 8009436:	8adb      	ldrh	r3, [r3, #22]
 8009438:	429a      	cmp	r2, r3
 800943a:	d106      	bne.n	800944a <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800943c:	4b5a      	ldr	r3, [pc, #360]	@ (80095a8 <SVCCTL_App_Notification+0x1b8>)
 800943e:	2200      	movs	r2, #0
 8009440:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009442:	4b59      	ldr	r3, [pc, #356]	@ (80095a8 <SVCCTL_App_Notification+0x1b8>)
 8009444:	2200      	movs	r2, #0
 8009446:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800944a:	2001      	movs	r0, #1
 800944c:	f000 f97e 	bl	800974c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8009450:	4b56      	ldr	r3, [pc, #344]	@ (80095ac <SVCCTL_App_Notification+0x1bc>)
 8009452:	2201      	movs	r2, #1
 8009454:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8009456:	4b54      	ldr	r3, [pc, #336]	@ (80095a8 <SVCCTL_App_Notification+0x1b8>)
 8009458:	8ada      	ldrh	r2, [r3, #22]
 800945a:	4b54      	ldr	r3, [pc, #336]	@ (80095ac <SVCCTL_App_Notification+0x1bc>)
 800945c:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800945e:	4853      	ldr	r0, [pc, #332]	@ (80095ac <SVCCTL_App_Notification+0x1bc>)
 8009460:	f000 fb86 	bl	8009b70 <Custom_APP_Notification>
      connection_status = 0;
 8009464:	4b52      	ldr	r3, [pc, #328]	@ (80095b0 <SVCCTL_App_Notification+0x1c0>)
 8009466:	2200      	movs	r2, #0
 8009468:	701a      	strb	r2, [r3, #0]
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800946a:	e098      	b.n	800959e <SVCCTL_App_Notification+0x1ae>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 800946c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800946e:	3302      	adds	r3, #2
 8009470:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 8009472:	e094      	b.n	800959e <SVCCTL_App_Notification+0x1ae>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8009474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009476:	3302      	adds	r3, #2
 8009478:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 800947a:	69bb      	ldr	r3, [r7, #24]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	2b01      	cmp	r3, #1
 8009480:	d001      	beq.n	8009486 <SVCCTL_App_Notification+0x96>
 8009482:	2b03      	cmp	r3, #3
          break;
 8009484:	e024      	b.n	80094d0 <SVCCTL_App_Notification+0xe0>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	3301      	adds	r3, #1
 800948a:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800948c:	4b46      	ldr	r3, [pc, #280]	@ (80095a8 <SVCCTL_App_Notification+0x1b8>)
 800948e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009492:	2b04      	cmp	r3, #4
 8009494:	d104      	bne.n	80094a0 <SVCCTL_App_Notification+0xb0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8009496:	4b44      	ldr	r3, [pc, #272]	@ (80095a8 <SVCCTL_App_Notification+0x1b8>)
 8009498:	2206      	movs	r2, #6
 800949a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800949e:	e003      	b.n	80094a8 <SVCCTL_App_Notification+0xb8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80094a0:	4b41      	ldr	r3, [pc, #260]	@ (80095a8 <SVCCTL_App_Notification+0x1b8>)
 80094a2:	2205      	movs	r2, #5
 80094a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	4b3d      	ldr	r3, [pc, #244]	@ (80095a8 <SVCCTL_App_Notification+0x1b8>)
 80094b2:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80094b4:	4b3d      	ldr	r3, [pc, #244]	@ (80095ac <SVCCTL_App_Notification+0x1bc>)
 80094b6:	2200      	movs	r2, #0
 80094b8:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80094ba:	4b3b      	ldr	r3, [pc, #236]	@ (80095a8 <SVCCTL_App_Notification+0x1b8>)
 80094bc:	8ada      	ldrh	r2, [r3, #22]
 80094be:	4b3b      	ldr	r3, [pc, #236]	@ (80095ac <SVCCTL_App_Notification+0x1bc>)
 80094c0:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 80094c2:	483a      	ldr	r0, [pc, #232]	@ (80095ac <SVCCTL_App_Notification+0x1bc>)
 80094c4:	f000 fb54 	bl	8009b70 <Custom_APP_Notification>
          connection_status = 1;
 80094c8:	4b39      	ldr	r3, [pc, #228]	@ (80095b0 <SVCCTL_App_Notification+0x1c0>)
 80094ca:	2201      	movs	r2, #1
 80094cc:	701a      	strb	r2, [r3, #0]
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80094ce:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80094d0:	e065      	b.n	800959e <SVCCTL_App_Notification+0x1ae>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80094d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d4:	3302      	adds	r3, #2
 80094d6:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 80094d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094da:	881b      	ldrh	r3, [r3, #0]
 80094dc:	b29b      	uxth	r3, r3
 80094de:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d048      	beq.n	8009578 <SVCCTL_App_Notification+0x188>
 80094e6:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80094ea:	4293      	cmp	r3, r2
 80094ec:	dc56      	bgt.n	800959c <SVCCTL_App_Notification+0x1ac>
 80094ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094f2:	d04b      	beq.n	800958c <SVCCTL_App_Notification+0x19c>
 80094f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094f8:	dc50      	bgt.n	800959c <SVCCTL_App_Notification+0x1ac>
 80094fa:	f240 420a 	movw	r2, #1034	@ 0x40a
 80094fe:	4293      	cmp	r3, r2
 8009500:	dc4c      	bgt.n	800959c <SVCCTL_App_Notification+0x1ac>
 8009502:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009506:	dc04      	bgt.n	8009512 <SVCCTL_App_Notification+0x122>
 8009508:	2b04      	cmp	r3, #4
 800950a:	d041      	beq.n	8009590 <SVCCTL_App_Notification+0x1a0>
 800950c:	2b06      	cmp	r3, #6
 800950e:	d039      	beq.n	8009584 <SVCCTL_App_Notification+0x194>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009510:	e044      	b.n	800959c <SVCCTL_App_Notification+0x1ac>
      switch (p_blecore_evt->ecode)
 8009512:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8009516:	2b09      	cmp	r3, #9
 8009518:	d840      	bhi.n	800959c <SVCCTL_App_Notification+0x1ac>
 800951a:	a201      	add	r2, pc, #4	@ (adr r2, 8009520 <SVCCTL_App_Notification+0x130>)
 800951c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009520:	08009571 	.word	0x08009571
 8009524:	08009549 	.word	0x08009549
 8009528:	0800959d 	.word	0x0800959d
 800952c:	0800959d 	.word	0x0800959d
 8009530:	0800959d 	.word	0x0800959d
 8009534:	0800959d 	.word	0x0800959d
 8009538:	08009595 	.word	0x08009595
 800953c:	0800959d 	.word	0x0800959d
 8009540:	0800955d 	.word	0x0800955d
 8009544:	08009595 	.word	0x08009595
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8009548:	4b17      	ldr	r3, [pc, #92]	@ (80095a8 <SVCCTL_App_Notification+0x1b8>)
 800954a:	8adb      	ldrh	r3, [r3, #22]
 800954c:	4919      	ldr	r1, [pc, #100]	@ (80095b4 <SVCCTL_App_Notification+0x1c4>)
 800954e:	4618      	mov	r0, r3
 8009550:	f7fd ff92 	bl	8007478 <aci_gap_pass_key_resp>
 8009554:	4603      	mov	r3, r0
 8009556:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 800955a:	e01c      	b.n	8009596 <SVCCTL_App_Notification+0x1a6>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800955c:	4b12      	ldr	r3, [pc, #72]	@ (80095a8 <SVCCTL_App_Notification+0x1b8>)
 800955e:	8adb      	ldrh	r3, [r3, #22]
 8009560:	2101      	movs	r1, #1
 8009562:	4618      	mov	r0, r3
 8009564:	f7fe f932 	bl	80077cc <aci_gap_numeric_comparison_value_confirm_yesno>
 8009568:	4603      	mov	r3, r0
 800956a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 800956e:	e012      	b.n	8009596 <SVCCTL_App_Notification+0x1a6>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8009570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009572:	3302      	adds	r3, #2
 8009574:	623b      	str	r3, [r7, #32]
          break;
 8009576:	e00e      	b.n	8009596 <SVCCTL_App_Notification+0x1a6>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8009578:	4b0b      	ldr	r3, [pc, #44]	@ (80095a8 <SVCCTL_App_Notification+0x1b8>)
 800957a:	8adb      	ldrh	r3, [r3, #22]
 800957c:	4618      	mov	r0, r3
 800957e:	f7fe fc38 	bl	8007df2 <aci_gatt_confirm_indication>
        break;
 8009582:	e008      	b.n	8009596 <SVCCTL_App_Notification+0x1a6>
	      p_warning_event = (aci_hal_warning_event_rp0 *)p_blecore_evt->data;
 8009584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009586:	3302      	adds	r3, #2
 8009588:	61fb      	str	r3, [r7, #28]
          break;
 800958a:	e004      	b.n	8009596 <SVCCTL_App_Notification+0x1a6>
          break;
 800958c:	bf00      	nop
 800958e:	e005      	b.n	800959c <SVCCTL_App_Notification+0x1ac>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8009590:	bf00      	nop
 8009592:	e003      	b.n	800959c <SVCCTL_App_Notification+0x1ac>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8009594:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009596:	e001      	b.n	800959c <SVCCTL_App_Notification+0x1ac>
      break;
 8009598:	bf00      	nop
 800959a:	e000      	b.n	800959e <SVCCTL_App_Notification+0x1ae>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800959c:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800959e:	2301      	movs	r3, #1
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3730      	adds	r7, #48	@ 0x30
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	2000041c 	.word	0x2000041c
 80095ac:	200004a0 	.word	0x200004a0
 80095b0:	200004a4 	.word	0x200004a4
 80095b4:	0001b207 	.word	0x0001b207

080095b8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80095be:	4b06      	ldr	r3, [pc, #24]	@ (80095d8 <Ble_Tl_Init+0x20>)
 80095c0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80095c2:	4b06      	ldr	r3, [pc, #24]	@ (80095dc <Ble_Tl_Init+0x24>)
 80095c4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80095c6:	463b      	mov	r3, r7
 80095c8:	4619      	mov	r1, r3
 80095ca:	4805      	ldr	r0, [pc, #20]	@ (80095e0 <Ble_Tl_Init+0x28>)
 80095cc:	f7ff f876 	bl	80086bc <hci_init>

  return;
 80095d0:	bf00      	nop
}
 80095d2:	3708      	adds	r7, #8
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	200300d8 	.word	0x200300d8
 80095dc:	080098e5 	.word	0x080098e5
 80095e0:	080098ad 	.word	0x080098ad

080095e4 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80095e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095e6:	b08d      	sub	sp, #52	@ 0x34
 80095e8:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80095ea:	2300      	movs	r3, #0
 80095ec:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80095ee:	2392      	movs	r3, #146	@ 0x92
 80095f0:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80095f2:	f7fe fd93 	bl	800811c <hci_reset>
 80095f6:	4603      	mov	r3, r0
 80095f8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 80095fa:	f000 f8d7 	bl	80097ac <BleGetBdAddress>
 80095fe:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, CONFIG_DATA_PUBLIC_ADDRESS_LEN, (uint8_t*) p_bd_addr);
 8009600:	693a      	ldr	r2, [r7, #16]
 8009602:	2106      	movs	r1, #6
 8009604:	2000      	movs	r0, #0
 8009606:	f7fe fc49 	bl	8007e9c <aci_hal_write_config_data>
 800960a:	4603      	mov	r3, r0
 800960c:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800960e:	4a4a      	ldr	r2, [pc, #296]	@ (8009738 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8009610:	2110      	movs	r1, #16
 8009612:	2018      	movs	r0, #24
 8009614:	f7fe fc42 	bl	8007e9c <aci_hal_write_config_data>
 8009618:	4603      	mov	r3, r0
 800961a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800961c:	4a47      	ldr	r2, [pc, #284]	@ (800973c <Ble_Hci_Gap_Gatt_Init+0x158>)
 800961e:	2110      	movs	r1, #16
 8009620:	2008      	movs	r0, #8
 8009622:	f7fe fc3b 	bl	8007e9c <aci_hal_write_config_data>
 8009626:	4603      	mov	r3, r0
 8009628:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800962a:	2118      	movs	r1, #24
 800962c:	2001      	movs	r0, #1
 800962e:	f7fe fcba 	bl	8007fa6 <aci_hal_set_tx_power_level>
 8009632:	4603      	mov	r3, r0
 8009634:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8009636:	f7fe f930 	bl	800789a <aci_gatt_init>
 800963a:	4603      	mov	r3, r0
 800963c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800963e:	2300      	movs	r3, #0
 8009640:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8009642:	7bfb      	ldrb	r3, [r7, #15]
 8009644:	f043 0301 	orr.w	r3, r3, #1
 8009648:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800964a:	7bfb      	ldrb	r3, [r7, #15]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d01f      	beq.n	8009690 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8009650:	4b3b      	ldr	r3, [pc, #236]	@ (8009740 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8009652:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8009654:	1dba      	adds	r2, r7, #6
 8009656:	7bf8      	ldrb	r0, [r7, #15]
 8009658:	1cbb      	adds	r3, r7, #2
 800965a:	9301      	str	r3, [sp, #4]
 800965c:	1d3b      	adds	r3, r7, #4
 800965e:	9300      	str	r3, [sp, #0]
 8009660:	4613      	mov	r3, r2
 8009662:	2208      	movs	r2, #8
 8009664:	2100      	movs	r1, #0
 8009666:	f7fd ff6e 	bl	8007546 <aci_gap_init>
 800966a:	4603      	mov	r3, r0
 800966c:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800966e:	88fc      	ldrh	r4, [r7, #6]
 8009670:	88bd      	ldrh	r5, [r7, #4]
 8009672:	68b8      	ldr	r0, [r7, #8]
 8009674:	f7f6 fd84 	bl	8000180 <strlen>
 8009678:	4603      	mov	r3, r0
 800967a:	b2da      	uxtb	r2, r3
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	4613      	mov	r3, r2
 8009682:	2200      	movs	r2, #0
 8009684:	4629      	mov	r1, r5
 8009686:	4620      	mov	r0, r4
 8009688:	f7fe fb0a 	bl	8007ca0 <aci_gatt_update_char_value>
 800968c:	4603      	mov	r3, r0
 800968e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8009690:	88f8      	ldrh	r0, [r7, #6]
 8009692:	8879      	ldrh	r1, [r7, #2]
 8009694:	463b      	mov	r3, r7
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	2302      	movs	r3, #2
 800969a:	2200      	movs	r2, #0
 800969c:	f7fe fb00 	bl	8007ca0 <aci_gatt_update_char_value>
 80096a0:	4603      	mov	r3, r0
 80096a2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80096a4:	2202      	movs	r2, #2
 80096a6:	2102      	movs	r1, #2
 80096a8:	2000      	movs	r0, #0
 80096aa:	f7fe fd5b 	bl	8008164 <hci_le_set_default_phy>
 80096ae:	4603      	mov	r3, r0
 80096b0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80096b2:	4b24      	ldr	r3, [pc, #144]	@ (8009744 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80096b4:	2201      	movs	r2, #1
 80096b6:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80096b8:	4b22      	ldr	r3, [pc, #136]	@ (8009744 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	4618      	mov	r0, r3
 80096be:	f7fd fdc3 	bl	8007248 <aci_gap_set_io_capability>
 80096c2:	4603      	mov	r3, r0
 80096c4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80096c6:	4b1f      	ldr	r3, [pc, #124]	@ (8009744 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80096c8:	2201      	movs	r2, #1
 80096ca:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80096cc:	4b1d      	ldr	r3, [pc, #116]	@ (8009744 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80096ce:	2208      	movs	r2, #8
 80096d0:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80096d2:	4b1c      	ldr	r3, [pc, #112]	@ (8009744 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80096d4:	2210      	movs	r2, #16
 80096d6:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80096d8:	4b1a      	ldr	r3, [pc, #104]	@ (8009744 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80096da:	2200      	movs	r2, #0
 80096dc:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80096de:	4b19      	ldr	r3, [pc, #100]	@ (8009744 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80096e0:	4a19      	ldr	r2, [pc, #100]	@ (8009748 <Ble_Hci_Gap_Gatt_Init+0x164>)
 80096e2:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80096e4:	4b17      	ldr	r3, [pc, #92]	@ (8009744 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80096e6:	2200      	movs	r2, #0
 80096e8:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80096ea:	4b16      	ldr	r3, [pc, #88]	@ (8009744 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80096ec:	789c      	ldrb	r4, [r3, #2]
 80096ee:	4b15      	ldr	r3, [pc, #84]	@ (8009744 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80096f0:	785d      	ldrb	r5, [r3, #1]
 80096f2:	4b14      	ldr	r3, [pc, #80]	@ (8009744 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80096f4:	791b      	ldrb	r3, [r3, #4]
 80096f6:	4a13      	ldr	r2, [pc, #76]	@ (8009744 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80096f8:	7952      	ldrb	r2, [r2, #5]
 80096fa:	4912      	ldr	r1, [pc, #72]	@ (8009744 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80096fc:	78c9      	ldrb	r1, [r1, #3]
 80096fe:	4811      	ldr	r0, [pc, #68]	@ (8009744 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009700:	6880      	ldr	r0, [r0, #8]
 8009702:	2600      	movs	r6, #0
 8009704:	9604      	str	r6, [sp, #16]
 8009706:	9003      	str	r0, [sp, #12]
 8009708:	9102      	str	r1, [sp, #8]
 800970a:	9201      	str	r2, [sp, #4]
 800970c:	9300      	str	r3, [sp, #0]
 800970e:	2300      	movs	r3, #0
 8009710:	2201      	movs	r2, #1
 8009712:	4629      	mov	r1, r5
 8009714:	4620      	mov	r0, r4
 8009716:	f7fd fdeb 	bl	80072f0 <aci_gap_set_authentication_requirement>
 800971a:	4603      	mov	r3, r0
 800971c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800971e:	4b09      	ldr	r3, [pc, #36]	@ (8009744 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009720:	789b      	ldrb	r3, [r3, #2]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d003      	beq.n	800972e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8009726:	f7fe f82d 	bl	8007784 <aci_gap_configure_filter_accept_list>
 800972a:	4603      	mov	r3, r0
 800972c:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800972e:	bf00      	nop
 8009730:	371c      	adds	r7, #28
 8009732:	46bd      	mov	sp, r7
 8009734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009736:	bf00      	nop
 8009738:	0800aee8 	.word	0x0800aee8
 800973c:	0800aef8 	.word	0x0800aef8
 8009740:	0800ad24 	.word	0x0800ad24
 8009744:	2000041c 	.word	0x2000041c
 8009748:	0001b207 	.word	0x0001b207

0800974c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b08c      	sub	sp, #48	@ 0x30
 8009750:	af08      	add	r7, sp, #32
 8009752:	4603      	mov	r3, r0
 8009754:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009756:	2392      	movs	r3, #146	@ 0x92
 8009758:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800975a:	4a12      	ldr	r2, [pc, #72]	@ (80097a4 <Adv_Request+0x58>)
 800975c:	79fb      	ldrb	r3, [r7, #7]
 800975e:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8009762:	2300      	movs	r3, #0
 8009764:	9306      	str	r3, [sp, #24]
 8009766:	2300      	movs	r3, #0
 8009768:	9305      	str	r3, [sp, #20]
 800976a:	2300      	movs	r3, #0
 800976c:	9304      	str	r3, [sp, #16]
 800976e:	2300      	movs	r3, #0
 8009770:	9303      	str	r3, [sp, #12]
 8009772:	2300      	movs	r3, #0
 8009774:	9302      	str	r3, [sp, #8]
 8009776:	2300      	movs	r3, #0
 8009778:	9301      	str	r3, [sp, #4]
 800977a:	2300      	movs	r3, #0
 800977c:	9300      	str	r3, [sp, #0]
 800977e:	2300      	movs	r3, #0
 8009780:	22a0      	movs	r2, #160	@ 0xa0
 8009782:	2180      	movs	r1, #128	@ 0x80
 8009784:	2000      	movs	r0, #0
 8009786:	f7fd fc65 	bl	8007054 <aci_gap_set_discoverable>
 800978a:	4603      	mov	r3, r0
 800978c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Adv_Request_1*/
/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800978e:	4906      	ldr	r1, [pc, #24]	@ (80097a8 <Adv_Request+0x5c>)
 8009790:	2012      	movs	r0, #18
 8009792:	f7fd ff85 	bl	80076a0 <aci_gap_update_adv_data>
 8009796:	4603      	mov	r3, r0
 8009798:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800979a:	bf00      	nop
}
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	2000041c 	.word	0x2000041c
 80097a8:	20000034 	.word	0x20000034

080097ac <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b086      	sub	sp, #24
 80097b0:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80097b2:	f7ff fd91 	bl	80092d8 <LL_FLASH_GetUDN>
 80097b6:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097be:	d023      	beq.n	8009808 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80097c0:	f7ff fda2 	bl	8009308 <LL_FLASH_GetSTCompanyID>
 80097c4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80097c6:	f7ff fd93 	bl	80092f0 <LL_FLASH_GetDeviceID>
 80097ca:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	b2da      	uxtb	r2, r3
 80097d0:	4b16      	ldr	r3, [pc, #88]	@ (800982c <BleGetBdAddress+0x80>)
 80097d2:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	0a1b      	lsrs	r3, r3, #8
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	4b14      	ldr	r3, [pc, #80]	@ (800982c <BleGetBdAddress+0x80>)
 80097dc:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	b2da      	uxtb	r2, r3
 80097e2:	4b12      	ldr	r3, [pc, #72]	@ (800982c <BleGetBdAddress+0x80>)
 80097e4:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	b2da      	uxtb	r2, r3
 80097ea:	4b10      	ldr	r3, [pc, #64]	@ (800982c <BleGetBdAddress+0x80>)
 80097ec:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	0a1b      	lsrs	r3, r3, #8
 80097f2:	b2da      	uxtb	r2, r3
 80097f4:	4b0d      	ldr	r3, [pc, #52]	@ (800982c <BleGetBdAddress+0x80>)
 80097f6:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	0c1b      	lsrs	r3, r3, #16
 80097fc:	b2da      	uxtb	r2, r3
 80097fe:	4b0b      	ldr	r3, [pc, #44]	@ (800982c <BleGetBdAddress+0x80>)
 8009800:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8009802:	4b0a      	ldr	r3, [pc, #40]	@ (800982c <BleGetBdAddress+0x80>)
 8009804:	617b      	str	r3, [r7, #20]
 8009806:	e00b      	b.n	8009820 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8009808:	2000      	movs	r0, #0
 800980a:	f7ff fc7f 	bl	800910c <OTP_Read>
 800980e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d002      	beq.n	800981c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	617b      	str	r3, [r7, #20]
 800981a:	e001      	b.n	8009820 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800981c:	4b04      	ldr	r3, [pc, #16]	@ (8009830 <BleGetBdAddress+0x84>)
 800981e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8009820:	697b      	ldr	r3, [r7, #20]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3718      	adds	r7, #24
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	20000414 	.word	0x20000414
 8009830:	0800aee0 	.word	0x0800aee0

08009834 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800983a:	4b0a      	ldr	r3, [pc, #40]	@ (8009864 <Adv_Cancel+0x30>)
 800983c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009840:	2b05      	cmp	r3, #5
 8009842:	d00a      	beq.n	800985a <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009844:	2392      	movs	r3, #146	@ 0x92
 8009846:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8009848:	f7fd fbe0 	bl	800700c <aci_gap_set_non_discoverable>
 800984c:	4603      	mov	r3, r0
 800984e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009850:	4b04      	ldr	r3, [pc, #16]	@ (8009864 <Adv_Cancel+0x30>)
 8009852:	2200      	movs	r2, #0
 8009854:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8009858:	bf00      	nop
 800985a:	bf00      	nop
}
 800985c:	3708      	adds	r7, #8
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	2000041c 	.word	0x2000041c

08009868 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8009870:	2100      	movs	r1, #0
 8009872:	2002      	movs	r0, #2
 8009874:	f001 f89e 	bl	800a9b4 <UTIL_SEQ_SetTask>

  return;
 8009878:	bf00      	nop
}
 800987a:	3708      	adds	r7, #8
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8009888:	2001      	movs	r0, #1
 800988a:	f001 f8ff 	bl	800aa8c <UTIL_SEQ_SetEvt>

  return;
 800988e:	bf00      	nop
}
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b082      	sub	sp, #8
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800989e:	2001      	movs	r0, #1
 80098a0:	f001 f914 	bl	800aacc <UTIL_SEQ_WaitEvt>

  return;
 80098a4:	bf00      	nop
}
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	3308      	adds	r3, #8
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fe fdb6 	bl	8008430 <SVCCTL_UserEvtRx>
 80098c4:	4603      	mov	r3, r0
 80098c6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80098c8:	7afb      	ldrb	r3, [r7, #11]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d003      	beq.n	80098d6 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2201      	movs	r2, #1
 80098d2:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80098d4:	e003      	b.n	80098de <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2200      	movs	r2, #0
 80098da:	701a      	strb	r2, [r3, #0]
  return;
 80098dc:	bf00      	nop
}
 80098de:	3710      	adds	r7, #16
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	4603      	mov	r3, r0
 80098ec:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80098ee:	79fb      	ldrb	r3, [r7, #7]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d002      	beq.n	80098fa <BLE_StatusNot+0x16>
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d006      	beq.n	8009906 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80098f8:	e00b      	b.n	8009912 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80098fa:	231f      	movs	r3, #31
 80098fc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f001 f884 	bl	800aa0c <UTIL_SEQ_PauseTask>
      break;
 8009904:	e005      	b.n	8009912 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8009906:	231f      	movs	r3, #31
 8009908:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f001 f89e 	bl	800aa4c <UTIL_SEQ_ResumeTask>
      break;
 8009910:	bf00      	nop
  }

  return;
 8009912:	bf00      	nop
}
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
	...

0800991c <myTask>:
    return 0; // Success
}


void myTask(void)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0

	get_voltage();
 8009922:	f7f7 fbc9 	bl	80010b8 <get_voltage>
	  	  UpdateCharData[0] = cell_mv[0]>>8;
 8009926:	4b70      	ldr	r3, [pc, #448]	@ (8009ae8 <myTask+0x1cc>)
 8009928:	881b      	ldrh	r3, [r3, #0]
 800992a:	0a1b      	lsrs	r3, r3, #8
 800992c:	b29b      	uxth	r3, r3
 800992e:	b2da      	uxtb	r2, r3
 8009930:	4b6e      	ldr	r3, [pc, #440]	@ (8009aec <myTask+0x1d0>)
 8009932:	701a      	strb	r2, [r3, #0]
		  UpdateCharData[1] = cell_mv[0];
 8009934:	4b6c      	ldr	r3, [pc, #432]	@ (8009ae8 <myTask+0x1cc>)
 8009936:	881b      	ldrh	r3, [r3, #0]
 8009938:	b2da      	uxtb	r2, r3
 800993a:	4b6c      	ldr	r3, [pc, #432]	@ (8009aec <myTask+0x1d0>)
 800993c:	705a      	strb	r2, [r3, #1]
		  UpdateCharData[2] = cell_mv[1]>>8;
 800993e:	4b6a      	ldr	r3, [pc, #424]	@ (8009ae8 <myTask+0x1cc>)
 8009940:	885b      	ldrh	r3, [r3, #2]
 8009942:	0a1b      	lsrs	r3, r3, #8
 8009944:	b29b      	uxth	r3, r3
 8009946:	b2da      	uxtb	r2, r3
 8009948:	4b68      	ldr	r3, [pc, #416]	@ (8009aec <myTask+0x1d0>)
 800994a:	709a      	strb	r2, [r3, #2]
		  UpdateCharData[3] = cell_mv[1];
 800994c:	4b66      	ldr	r3, [pc, #408]	@ (8009ae8 <myTask+0x1cc>)
 800994e:	885b      	ldrh	r3, [r3, #2]
 8009950:	b2da      	uxtb	r2, r3
 8009952:	4b66      	ldr	r3, [pc, #408]	@ (8009aec <myTask+0x1d0>)
 8009954:	70da      	strb	r2, [r3, #3]
		  UpdateCharData[4] = cell_mv[2]>>8;
 8009956:	4b64      	ldr	r3, [pc, #400]	@ (8009ae8 <myTask+0x1cc>)
 8009958:	889b      	ldrh	r3, [r3, #4]
 800995a:	0a1b      	lsrs	r3, r3, #8
 800995c:	b29b      	uxth	r3, r3
 800995e:	b2da      	uxtb	r2, r3
 8009960:	4b62      	ldr	r3, [pc, #392]	@ (8009aec <myTask+0x1d0>)
 8009962:	711a      	strb	r2, [r3, #4]
		  UpdateCharData[5] = cell_mv[2];
 8009964:	4b60      	ldr	r3, [pc, #384]	@ (8009ae8 <myTask+0x1cc>)
 8009966:	889b      	ldrh	r3, [r3, #4]
 8009968:	b2da      	uxtb	r2, r3
 800996a:	4b60      	ldr	r3, [pc, #384]	@ (8009aec <myTask+0x1d0>)
 800996c:	715a      	strb	r2, [r3, #5]
		  UpdateCharData[6] = cell_mv[3]>>8;
 800996e:	4b5e      	ldr	r3, [pc, #376]	@ (8009ae8 <myTask+0x1cc>)
 8009970:	88db      	ldrh	r3, [r3, #6]
 8009972:	0a1b      	lsrs	r3, r3, #8
 8009974:	b29b      	uxth	r3, r3
 8009976:	b2da      	uxtb	r2, r3
 8009978:	4b5c      	ldr	r3, [pc, #368]	@ (8009aec <myTask+0x1d0>)
 800997a:	719a      	strb	r2, [r3, #6]
		  UpdateCharData[7] = cell_mv[3];
 800997c:	4b5a      	ldr	r3, [pc, #360]	@ (8009ae8 <myTask+0x1cc>)
 800997e:	88db      	ldrh	r3, [r3, #6]
 8009980:	b2da      	uxtb	r2, r3
 8009982:	4b5a      	ldr	r3, [pc, #360]	@ (8009aec <myTask+0x1d0>)
 8009984:	71da      	strb	r2, [r3, #7]
		  UpdateCharData[8] = cell_mv[4]>>8;
 8009986:	4b58      	ldr	r3, [pc, #352]	@ (8009ae8 <myTask+0x1cc>)
 8009988:	891b      	ldrh	r3, [r3, #8]
 800998a:	0a1b      	lsrs	r3, r3, #8
 800998c:	b29b      	uxth	r3, r3
 800998e:	b2da      	uxtb	r2, r3
 8009990:	4b56      	ldr	r3, [pc, #344]	@ (8009aec <myTask+0x1d0>)
 8009992:	721a      	strb	r2, [r3, #8]
		  UpdateCharData[9] = cell_mv[4];
 8009994:	4b54      	ldr	r3, [pc, #336]	@ (8009ae8 <myTask+0x1cc>)
 8009996:	891b      	ldrh	r3, [r3, #8]
 8009998:	b2da      	uxtb	r2, r3
 800999a:	4b54      	ldr	r3, [pc, #336]	@ (8009aec <myTask+0x1d0>)
 800999c:	725a      	strb	r2, [r3, #9]
		  UpdateCharData[10] = cell_mv[5]>>8;
 800999e:	4b52      	ldr	r3, [pc, #328]	@ (8009ae8 <myTask+0x1cc>)
 80099a0:	895b      	ldrh	r3, [r3, #10]
 80099a2:	0a1b      	lsrs	r3, r3, #8
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	b2da      	uxtb	r2, r3
 80099a8:	4b50      	ldr	r3, [pc, #320]	@ (8009aec <myTask+0x1d0>)
 80099aa:	729a      	strb	r2, [r3, #10]
		  UpdateCharData[11] = cell_mv[5];
 80099ac:	4b4e      	ldr	r3, [pc, #312]	@ (8009ae8 <myTask+0x1cc>)
 80099ae:	895b      	ldrh	r3, [r3, #10]
 80099b0:	b2da      	uxtb	r2, r3
 80099b2:	4b4e      	ldr	r3, [pc, #312]	@ (8009aec <myTask+0x1d0>)
 80099b4:	72da      	strb	r2, [r3, #11]

		  uint32_t uid_word0 = HAL_GetUIDw2();
 80099b6:	f7f8 f9e7 	bl	8001d88 <HAL_GetUIDw2>
 80099ba:	6078      	str	r0, [r7, #4]

		  UpdateCharData[12] = uid_word0 >> 24;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	0e1b      	lsrs	r3, r3, #24
 80099c0:	b2da      	uxtb	r2, r3
 80099c2:	4b4a      	ldr	r3, [pc, #296]	@ (8009aec <myTask+0x1d0>)
 80099c4:	731a      	strb	r2, [r3, #12]
		  UpdateCharData[13] = uid_word0 >> 16;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	0c1b      	lsrs	r3, r3, #16
 80099ca:	b2da      	uxtb	r2, r3
 80099cc:	4b47      	ldr	r3, [pc, #284]	@ (8009aec <myTask+0x1d0>)
 80099ce:	735a      	strb	r2, [r3, #13]
		  UpdateCharData[14] = update_state();
 80099d0:	f7f7 fd0e 	bl	80013f0 <update_state>
 80099d4:	4603      	mov	r3, r0
 80099d6:	b2da      	uxtb	r2, r3
 80099d8:	4b44      	ldr	r3, [pc, #272]	@ (8009aec <myTask+0x1d0>)
 80099da:	739a      	strb	r2, [r3, #14]

		  capacity = read_from_flash(capacity_addr);
 80099dc:	4b44      	ldr	r3, [pc, #272]	@ (8009af0 <myTask+0x1d4>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7f7 fb37 	bl	8001054 <read_from_flash>
 80099e6:	4603      	mov	r3, r0
 80099e8:	b29a      	uxth	r2, r3
 80099ea:	4b42      	ldr	r3, [pc, #264]	@ (8009af4 <myTask+0x1d8>)
 80099ec:	801a      	strh	r2, [r3, #0]
		  UpdateCharData[15] = capacity>>8;
 80099ee:	4b41      	ldr	r3, [pc, #260]	@ (8009af4 <myTask+0x1d8>)
 80099f0:	881b      	ldrh	r3, [r3, #0]
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	0a1b      	lsrs	r3, r3, #8
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	b2da      	uxtb	r2, r3
 80099fa:	4b3c      	ldr	r3, [pc, #240]	@ (8009aec <myTask+0x1d0>)
 80099fc:	73da      	strb	r2, [r3, #15]
		  UpdateCharData[16] = capacity;
 80099fe:	4b3d      	ldr	r3, [pc, #244]	@ (8009af4 <myTask+0x1d8>)
 8009a00:	881b      	ldrh	r3, [r3, #0]
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	b2da      	uxtb	r2, r3
 8009a06:	4b39      	ldr	r3, [pc, #228]	@ (8009aec <myTask+0x1d0>)
 8009a08:	741a      	strb	r2, [r3, #16]

		  cell_nominal_mv = read_from_flash(nominal_cell_mv_addr);
 8009a0a:	4b3b      	ldr	r3, [pc, #236]	@ (8009af8 <myTask+0x1dc>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7f7 fb20 	bl	8001054 <read_from_flash>
 8009a14:	4603      	mov	r3, r0
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	4b38      	ldr	r3, [pc, #224]	@ (8009afc <myTask+0x1e0>)
 8009a1a:	801a      	strh	r2, [r3, #0]
		  cell_charged_mv = read_from_flash(charged_cell_mv_addr);
 8009a1c:	4b38      	ldr	r3, [pc, #224]	@ (8009b00 <myTask+0x1e4>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7f7 fb17 	bl	8001054 <read_from_flash>
 8009a26:	4603      	mov	r3, r0
 8009a28:	b29a      	uxth	r2, r3
 8009a2a:	4b36      	ldr	r3, [pc, #216]	@ (8009b04 <myTask+0x1e8>)
 8009a2c:	801a      	strh	r2, [r3, #0]
		  cell_discharged_mv = read_from_flash(discharged_cell_mv_addr);
 8009a2e:	4b36      	ldr	r3, [pc, #216]	@ (8009b08 <myTask+0x1ec>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7f7 fb0e 	bl	8001054 <read_from_flash>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	4b33      	ldr	r3, [pc, #204]	@ (8009b0c <myTask+0x1f0>)
 8009a3e:	801a      	strh	r2, [r3, #0]

		  UpdateCharData[17] = cell_nominal_mv>>8;
 8009a40:	4b2e      	ldr	r3, [pc, #184]	@ (8009afc <myTask+0x1e0>)
 8009a42:	881b      	ldrh	r3, [r3, #0]
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	0a1b      	lsrs	r3, r3, #8
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	b2da      	uxtb	r2, r3
 8009a4c:	4b27      	ldr	r3, [pc, #156]	@ (8009aec <myTask+0x1d0>)
 8009a4e:	745a      	strb	r2, [r3, #17]
		  UpdateCharData[18] = cell_nominal_mv;
 8009a50:	4b2a      	ldr	r3, [pc, #168]	@ (8009afc <myTask+0x1e0>)
 8009a52:	881b      	ldrh	r3, [r3, #0]
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	b2da      	uxtb	r2, r3
 8009a58:	4b24      	ldr	r3, [pc, #144]	@ (8009aec <myTask+0x1d0>)
 8009a5a:	749a      	strb	r2, [r3, #18]
		  UpdateCharData[19] = cell_charged_mv>>8;
 8009a5c:	4b29      	ldr	r3, [pc, #164]	@ (8009b04 <myTask+0x1e8>)
 8009a5e:	881b      	ldrh	r3, [r3, #0]
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	0a1b      	lsrs	r3, r3, #8
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	b2da      	uxtb	r2, r3
 8009a68:	4b20      	ldr	r3, [pc, #128]	@ (8009aec <myTask+0x1d0>)
 8009a6a:	74da      	strb	r2, [r3, #19]
		  UpdateCharData[20] = cell_charged_mv;
 8009a6c:	4b25      	ldr	r3, [pc, #148]	@ (8009b04 <myTask+0x1e8>)
 8009a6e:	881b      	ldrh	r3, [r3, #0]
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	b2da      	uxtb	r2, r3
 8009a74:	4b1d      	ldr	r3, [pc, #116]	@ (8009aec <myTask+0x1d0>)
 8009a76:	751a      	strb	r2, [r3, #20]
		  UpdateCharData[21] = cell_discharged_mv>>8;
 8009a78:	4b24      	ldr	r3, [pc, #144]	@ (8009b0c <myTask+0x1f0>)
 8009a7a:	881b      	ldrh	r3, [r3, #0]
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	0a1b      	lsrs	r3, r3, #8
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	b2da      	uxtb	r2, r3
 8009a84:	4b19      	ldr	r3, [pc, #100]	@ (8009aec <myTask+0x1d0>)
 8009a86:	755a      	strb	r2, [r3, #21]
		  UpdateCharData[22] = cell_discharged_mv;
 8009a88:	4b20      	ldr	r3, [pc, #128]	@ (8009b0c <myTask+0x1f0>)
 8009a8a:	881b      	ldrh	r3, [r3, #0]
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	b2da      	uxtb	r2, r3
 8009a90:	4b16      	ldr	r3, [pc, #88]	@ (8009aec <myTask+0x1d0>)
 8009a92:	759a      	strb	r2, [r3, #22]

		  type = (uint8_t)read_from_flash(type_addr);
 8009a94:	4b1e      	ldr	r3, [pc, #120]	@ (8009b10 <myTask+0x1f4>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7f7 fadb 	bl	8001054 <read_from_flash>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	b2da      	uxtb	r2, r3
 8009aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8009b14 <myTask+0x1f8>)
 8009aa4:	701a      	strb	r2, [r3, #0]
		  C_rating = (uint8_t)read_from_flash(C_rating_addr);
 8009aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8009b18 <myTask+0x1fc>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7f7 fad2 	bl	8001054 <read_from_flash>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	b2da      	uxtb	r2, r3
 8009ab4:	4b19      	ldr	r3, [pc, #100]	@ (8009b1c <myTask+0x200>)
 8009ab6:	701a      	strb	r2, [r3, #0]

		  UpdateCharData[23] = type;
 8009ab8:	4b16      	ldr	r3, [pc, #88]	@ (8009b14 <myTask+0x1f8>)
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	b2da      	uxtb	r2, r3
 8009abe:	4b0b      	ldr	r3, [pc, #44]	@ (8009aec <myTask+0x1d0>)
 8009ac0:	75da      	strb	r2, [r3, #23]
		  UpdateCharData[24] = C_rating;
 8009ac2:	4b16      	ldr	r3, [pc, #88]	@ (8009b1c <myTask+0x200>)
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	b2da      	uxtb	r2, r3
 8009ac8:	4b08      	ldr	r3, [pc, #32]	@ (8009aec <myTask+0x1d0>)
 8009aca:	761a      	strb	r2, [r3, #24]

		  Custom_Mycharnotify_Update_Char();
 8009acc:	f000 f86c 	bl	8009ba8 <Custom_Mycharnotify_Update_Char>
if(sleep_flag == 1){
 8009ad0:	4b13      	ldr	r3, [pc, #76]	@ (8009b20 <myTask+0x204>)
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d003      	beq.n	8009ae0 <myTask+0x1c4>
	      }
else
	      {UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);}
 8009ad8:	2100      	movs	r1, #0
 8009ada:	2004      	movs	r0, #4
 8009adc:	f000 ff6a 	bl	800a9b4 <UTIL_SEQ_SetTask>
}
 8009ae0:	bf00      	nop
 8009ae2:	3708      	adds	r7, #8
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	20000344 	.word	0x20000344
 8009aec:	200004a8 	.word	0x200004a8
 8009af0:	20000018 	.word	0x20000018
 8009af4:	2000036e 	.word	0x2000036e
 8009af8:	2000000c 	.word	0x2000000c
 8009afc:	2000034e 	.word	0x2000034e
 8009b00:	20000010 	.word	0x20000010
 8009b04:	20000350 	.word	0x20000350
 8009b08:	20000014 	.word	0x20000014
 8009b0c:	20000352 	.word	0x20000352
 8009b10:	20000020 	.word	0x20000020
 8009b14:	20000371 	.word	0x20000371
 8009b18:	2000001c 	.word	0x2000001c
 8009b1c:	20000370 	.word	0x20000370
 8009b20:	20000340 	.word	0x20000340

08009b24 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	2b03      	cmp	r3, #3
 8009b32:	d813      	bhi.n	8009b5c <Custom_STM_App_Notification+0x38>
 8009b34:	a201      	add	r2, pc, #4	@ (adr r2, 8009b3c <Custom_STM_App_Notification+0x18>)
 8009b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3a:	bf00      	nop
 8009b3c:	08009b5d 	.word	0x08009b5d
 8009b40:	08009b4d 	.word	0x08009b4d
 8009b44:	08009b55 	.word	0x08009b55
 8009b48:	08009b5d 	.word	0x08009b5d
      /* USER CODE END CUSTOM_STM_MYCHARWRITE_WRITE_EVT */
      break;

    case CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT */
    	notifyflag = 1;
 8009b4c:	4b07      	ldr	r3, [pc, #28]	@ (8009b6c <Custom_STM_App_Notification+0x48>)
 8009b4e:	2201      	movs	r2, #1
 8009b50:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT */
      break;
 8009b52:	e004      	b.n	8009b5e <Custom_STM_App_Notification+0x3a>

    case CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT */
    	notifyflag = 0;
 8009b54:	4b05      	ldr	r3, [pc, #20]	@ (8009b6c <Custom_STM_App_Notification+0x48>)
 8009b56:	2200      	movs	r2, #0
 8009b58:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT */
      break;
 8009b5a:	e000      	b.n	8009b5e <Custom_STM_App_Notification+0x3a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8009b5c:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8009b5e:	bf00      	nop
}
 8009b60:	370c      	adds	r7, #12
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop
 8009b6c:	200006a8 	.word	0x200006a8

08009b70 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d002      	beq.n	8009b86 <Custom_APP_Notification+0x16>
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d002      	beq.n	8009b8a <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8009b84:	e002      	b.n	8009b8c <Custom_APP_Notification+0x1c>
      break;
 8009b86:	bf00      	nop
 8009b88:	e000      	b.n	8009b8c <Custom_APP_Notification+0x1c>
      break;
 8009b8a:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8009b8c:	bf00      	nop
}
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8009b9c:	bf00      	nop
}
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr
	...

08009ba8 <Custom_Mycharnotify_Update_Char>:
 *
 *************************************************************/

/* mySvc */
__USED void Custom_Mycharnotify_Update_Char(void) /* Property Read */
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Mycharnotify_UC_1*/
  updateflag = notifyflag;
 8009bb2:	4b07      	ldr	r3, [pc, #28]	@ (8009bd0 <Custom_Mycharnotify_Update_Char+0x28>)
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END Mycharnotify_UC_1*/

  if (updateflag != 0)
 8009bb8:	79fb      	ldrb	r3, [r7, #7]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d004      	beq.n	8009bc8 <Custom_Mycharnotify_Update_Char+0x20>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_MYCHARNOTIFY, (uint8_t *)UpdateCharData);
 8009bbe:	4905      	ldr	r1, [pc, #20]	@ (8009bd4 <Custom_Mycharnotify_Update_Char+0x2c>)
 8009bc0:	2001      	movs	r0, #1
 8009bc2:	f000 fa13 	bl	8009fec <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Mycharnotify_UC_Last*/

  /* USER CODE END Mycharnotify_UC_Last*/
  return;
 8009bc6:	bf00      	nop
 8009bc8:	bf00      	nop
}
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	200006a8 	.word	0x200006a8
 8009bd4:	200004a8 	.word	0x200004a8

08009bd8 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b08e      	sub	sp, #56	@ 0x38
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8009be0:	2300      	movs	r3, #0
 8009be2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	3301      	adds	r3, #1
 8009bea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  switch (event_pckt->evt)
 8009bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	2bff      	cmp	r3, #255	@ 0xff
 8009bf2:	f040 8123 	bne.w	8009e3c <Custom_STM_Event_Handler+0x264>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8009bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf8:	3302      	adds	r3, #2
 8009bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
      switch (blecore_evt->ecode)
 8009bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bfe:	881b      	ldrh	r3, [r3, #0]
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 8009c06:	2b1a      	cmp	r3, #26
 8009c08:	f200 8114 	bhi.w	8009e34 <Custom_STM_Event_Handler+0x25c>
 8009c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c14 <Custom_STM_Event_Handler+0x3c>)
 8009c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c12:	bf00      	nop
 8009c14:	08009c81 	.word	0x08009c81
 8009c18:	08009e35 	.word	0x08009e35
 8009c1c:	08009e35 	.word	0x08009e35
 8009c20:	08009e35 	.word	0x08009e35
 8009c24:	08009e35 	.word	0x08009e35
 8009c28:	08009e35 	.word	0x08009e35
 8009c2c:	08009e35 	.word	0x08009e35
 8009c30:	08009e35 	.word	0x08009e35
 8009c34:	08009e35 	.word	0x08009e35
 8009c38:	08009e35 	.word	0x08009e35
 8009c3c:	08009e35 	.word	0x08009e35
 8009c40:	08009e35 	.word	0x08009e35
 8009c44:	08009e35 	.word	0x08009e35
 8009c48:	08009e35 	.word	0x08009e35
 8009c4c:	08009e35 	.word	0x08009e35
 8009c50:	08009e35 	.word	0x08009e35
 8009c54:	08009e35 	.word	0x08009e35
 8009c58:	08009e35 	.word	0x08009e35
 8009c5c:	08009e35 	.word	0x08009e35
 8009c60:	08009e35 	.word	0x08009e35
 8009c64:	08009e35 	.word	0x08009e35
 8009c68:	08009e35 	.word	0x08009e35
 8009c6c:	08009e35 	.word	0x08009e35
 8009c70:	08009e35 	.word	0x08009e35
 8009c74:	08009e35 	.word	0x08009e35
 8009c78:	08009e35 	.word	0x08009e35
 8009c7c:	08009e17 	.word	0x08009e17
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8009c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c82:	3302      	adds	r3, #2
 8009c84:	623b      	str	r3, [r7, #32]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8009c86:	6a3b      	ldr	r3, [r7, #32]
 8009c88:	885b      	ldrh	r3, [r3, #2]
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	4b6f      	ldr	r3, [pc, #444]	@ (8009e4c <Custom_STM_Event_Handler+0x274>)
 8009c90:	889b      	ldrh	r3, [r3, #4]
 8009c92:	3302      	adds	r3, #2
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d119      	bne.n	8009ccc <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 8009c9e:	6a3b      	ldr	r3, [r7, #32]
 8009ca0:	7a1b      	ldrb	r3, [r3, #8]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d002      	beq.n	8009cac <Custom_STM_Event_Handler+0xd4>
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d008      	beq.n	8009cbc <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 8009caa:	e0b3      	b.n	8009e14 <Custom_STM_Event_Handler+0x23c>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT;
 8009cac:	2302      	movs	r3, #2
 8009cae:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8009cb0:	f107 030c 	add.w	r3, r7, #12
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7ff ff35 	bl	8009b24 <Custom_STM_App_Notification>
                break;
 8009cba:	e0ab      	b.n	8009e14 <Custom_STM_Event_Handler+0x23c>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8009cc0:	f107 030c 	add.w	r3, r7, #12
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7ff ff2d 	bl	8009b24 <Custom_STM_App_Notification>
                break;
 8009cca:	e0a3      	b.n	8009e14 <Custom_STM_Event_Handler+0x23c>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8009ccc:	6a3b      	ldr	r3, [r7, #32]
 8009cce:	885b      	ldrh	r3, [r3, #2]
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	4b5d      	ldr	r3, [pc, #372]	@ (8009e4c <Custom_STM_Event_Handler+0x274>)
 8009cd6:	885b      	ldrh	r3, [r3, #2]
 8009cd8:	3301      	adds	r3, #1
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	f040 80ac 	bne.w	8009e38 <Custom_STM_Event_Handler+0x260>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
        if(attribute_modified->Attr_Data[0] == 'X' && configurable != 0){
 8009ce6:	6a3b      	ldr	r3, [r7, #32]
 8009ce8:	7a1b      	ldrb	r3, [r3, #8]
 8009cea:	2b58      	cmp	r3, #88	@ 0x58
 8009cec:	f040 80a4 	bne.w	8009e38 <Custom_STM_Event_Handler+0x260>
 8009cf0:	4b57      	ldr	r3, [pc, #348]	@ (8009e50 <Custom_STM_Event_Handler+0x278>)
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	b2db      	uxtb	r3, r3
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	f000 809e 	beq.w	8009e38 <Custom_STM_Event_Handler+0x260>

        	//HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_5);

        	capacity = (uint16_t)attribute_modified->Attr_Data[1]<<8 | attribute_modified->Attr_Data[2];
 8009cfc:	6a3b      	ldr	r3, [r7, #32]
 8009cfe:	7a5b      	ldrb	r3, [r3, #9]
 8009d00:	b21b      	sxth	r3, r3
 8009d02:	021b      	lsls	r3, r3, #8
 8009d04:	b21a      	sxth	r2, r3
 8009d06:	6a3b      	ldr	r3, [r7, #32]
 8009d08:	7a9b      	ldrb	r3, [r3, #10]
 8009d0a:	b21b      	sxth	r3, r3
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	b21b      	sxth	r3, r3
 8009d10:	b29a      	uxth	r2, r3
 8009d12:	4b50      	ldr	r3, [pc, #320]	@ (8009e54 <Custom_STM_Event_Handler+0x27c>)
 8009d14:	801a      	strh	r2, [r3, #0]
        	C_rating = attribute_modified->Attr_Data[3];
 8009d16:	6a3b      	ldr	r3, [r7, #32]
 8009d18:	7ada      	ldrb	r2, [r3, #11]
 8009d1a:	4b4f      	ldr	r3, [pc, #316]	@ (8009e58 <Custom_STM_Event_Handler+0x280>)
 8009d1c:	701a      	strb	r2, [r3, #0]
        	type = attribute_modified->Attr_Data[4];
 8009d1e:	6a3b      	ldr	r3, [r7, #32]
 8009d20:	7b1a      	ldrb	r2, [r3, #12]
 8009d22:	4b4e      	ldr	r3, [pc, #312]	@ (8009e5c <Custom_STM_Event_Handler+0x284>)
 8009d24:	701a      	strb	r2, [r3, #0]
        	cell_nominal_mv = attribute_modified->Attr_Data[5] <<8 | attribute_modified->Attr_Data[6];
 8009d26:	6a3b      	ldr	r3, [r7, #32]
 8009d28:	7b5b      	ldrb	r3, [r3, #13]
 8009d2a:	b21b      	sxth	r3, r3
 8009d2c:	021b      	lsls	r3, r3, #8
 8009d2e:	b21a      	sxth	r2, r3
 8009d30:	6a3b      	ldr	r3, [r7, #32]
 8009d32:	7b9b      	ldrb	r3, [r3, #14]
 8009d34:	b21b      	sxth	r3, r3
 8009d36:	4313      	orrs	r3, r2
 8009d38:	b21b      	sxth	r3, r3
 8009d3a:	b29a      	uxth	r2, r3
 8009d3c:	4b48      	ldr	r3, [pc, #288]	@ (8009e60 <Custom_STM_Event_Handler+0x288>)
 8009d3e:	801a      	strh	r2, [r3, #0]
        	cell_charged_mv = attribute_modified->Attr_Data[7] <<8 | attribute_modified->Attr_Data[8];
 8009d40:	6a3b      	ldr	r3, [r7, #32]
 8009d42:	7bdb      	ldrb	r3, [r3, #15]
 8009d44:	b21b      	sxth	r3, r3
 8009d46:	021b      	lsls	r3, r3, #8
 8009d48:	b21a      	sxth	r2, r3
 8009d4a:	6a3b      	ldr	r3, [r7, #32]
 8009d4c:	7c1b      	ldrb	r3, [r3, #16]
 8009d4e:	b21b      	sxth	r3, r3
 8009d50:	4313      	orrs	r3, r2
 8009d52:	b21b      	sxth	r3, r3
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	4b43      	ldr	r3, [pc, #268]	@ (8009e64 <Custom_STM_Event_Handler+0x28c>)
 8009d58:	801a      	strh	r2, [r3, #0]
        	cell_discharged_mv = attribute_modified->Attr_Data[9] <<8 | attribute_modified->Attr_Data[10];
 8009d5a:	6a3b      	ldr	r3, [r7, #32]
 8009d5c:	7c5b      	ldrb	r3, [r3, #17]
 8009d5e:	b21b      	sxth	r3, r3
 8009d60:	021b      	lsls	r3, r3, #8
 8009d62:	b21a      	sxth	r2, r3
 8009d64:	6a3b      	ldr	r3, [r7, #32]
 8009d66:	7c9b      	ldrb	r3, [r3, #18]
 8009d68:	b21b      	sxth	r3, r3
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	b21b      	sxth	r3, r3
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	4b3d      	ldr	r3, [pc, #244]	@ (8009e68 <Custom_STM_Event_Handler+0x290>)
 8009d72:	801a      	strh	r2, [r3, #0]
        	write_to_flash(nominal_cell_mv_addr, cell_nominal_mv);
 8009d74:	4b3d      	ldr	r3, [pc, #244]	@ (8009e6c <Custom_STM_Event_Handler+0x294>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a39      	ldr	r2, [pc, #228]	@ (8009e60 <Custom_STM_Event_Handler+0x288>)
 8009d7a:	8812      	ldrh	r2, [r2, #0]
 8009d7c:	b292      	uxth	r2, r2
 8009d7e:	4611      	mov	r1, r2
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7f7 f8e7 	bl	8000f54 <write_to_flash>
        	write_to_flash(charged_cell_mv_addr, cell_charged_mv);
 8009d86:	4b3a      	ldr	r3, [pc, #232]	@ (8009e70 <Custom_STM_Event_Handler+0x298>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a36      	ldr	r2, [pc, #216]	@ (8009e64 <Custom_STM_Event_Handler+0x28c>)
 8009d8c:	8812      	ldrh	r2, [r2, #0]
 8009d8e:	b292      	uxth	r2, r2
 8009d90:	4611      	mov	r1, r2
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7f7 f8de 	bl	8000f54 <write_to_flash>
        	write_to_flash(discharged_cell_mv_addr, cell_discharged_mv);
 8009d98:	4b36      	ldr	r3, [pc, #216]	@ (8009e74 <Custom_STM_Event_Handler+0x29c>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a32      	ldr	r2, [pc, #200]	@ (8009e68 <Custom_STM_Event_Handler+0x290>)
 8009d9e:	8812      	ldrh	r2, [r2, #0]
 8009da0:	b292      	uxth	r2, r2
 8009da2:	4611      	mov	r1, r2
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7f7 f8d5 	bl	8000f54 <write_to_flash>
        	write_to_flash(C_rating_addr,C_rating);
 8009daa:	4b33      	ldr	r3, [pc, #204]	@ (8009e78 <Custom_STM_Event_Handler+0x2a0>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a2a      	ldr	r2, [pc, #168]	@ (8009e58 <Custom_STM_Event_Handler+0x280>)
 8009db0:	7812      	ldrb	r2, [r2, #0]
 8009db2:	b2d2      	uxtb	r2, r2
 8009db4:	4611      	mov	r1, r2
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7f7 f8cc 	bl	8000f54 <write_to_flash>
        	write_to_flash(capacity_addr,capacity);
 8009dbc:	4b2f      	ldr	r3, [pc, #188]	@ (8009e7c <Custom_STM_Event_Handler+0x2a4>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a24      	ldr	r2, [pc, #144]	@ (8009e54 <Custom_STM_Event_Handler+0x27c>)
 8009dc2:	8812      	ldrh	r2, [r2, #0]
 8009dc4:	b292      	uxth	r2, r2
 8009dc6:	4611      	mov	r1, r2
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7f7 f8c3 	bl	8000f54 <write_to_flash>
        	write_to_flash(type_addr,type);
 8009dce:	4b2c      	ldr	r3, [pc, #176]	@ (8009e80 <Custom_STM_Event_Handler+0x2a8>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a22      	ldr	r2, [pc, #136]	@ (8009e5c <Custom_STM_Event_Handler+0x284>)
 8009dd4:	7812      	ldrb	r2, [r2, #0]
 8009dd6:	b2d2      	uxtb	r2, r2
 8009dd8:	4611      	mov	r1, r2
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7f7 f8ba 	bl	8000f54 <write_to_flash>
        	for(int i =0 ; i<= 15; i++)
 8009de0:	2300      	movs	r3, #0
 8009de2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009de4:	e00c      	b.n	8009e00 <Custom_STM_Event_Handler+0x228>
        	{
        		nickname[i] = attribute_modified->Attr_Data[10+i];
 8009de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de8:	330a      	adds	r3, #10
 8009dea:	6a3a      	ldr	r2, [r7, #32]
 8009dec:	4413      	add	r3, r2
 8009dee:	7a19      	ldrb	r1, [r3, #8]
 8009df0:	4a24      	ldr	r2, [pc, #144]	@ (8009e84 <Custom_STM_Event_Handler+0x2ac>)
 8009df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df4:	4413      	add	r3, r2
 8009df6:	460a      	mov	r2, r1
 8009df8:	701a      	strb	r2, [r3, #0]
        	for(int i =0 ; i<= 15; i++)
 8009dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e02:	2b0f      	cmp	r3, #15
 8009e04:	ddef      	ble.n	8009de6 <Custom_STM_Event_Handler+0x20e>
        	}
        	Flash_WriteString(nickname_addr,nickname);
 8009e06:	4b20      	ldr	r3, [pc, #128]	@ (8009e88 <Custom_STM_Event_Handler+0x2b0>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	491e      	ldr	r1, [pc, #120]	@ (8009e84 <Custom_STM_Event_Handler+0x2ac>)
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7f7 fb65 	bl	80014dc <Flash_WriteString>
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 8009e12:	e011      	b.n	8009e38 <Custom_STM_Event_Handler+0x260>
 8009e14:	e010      	b.n	8009e38 <Custom_STM_Event_Handler+0x260>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8009e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e18:	3302      	adds	r3, #2
 8009e1a:	627b      	str	r3, [r7, #36]	@ 0x24
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8009e1c:	2303      	movs	r3, #3
 8009e1e:	733b      	strb	r3, [r7, #12]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8009e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e22:	881b      	ldrh	r3, [r3, #0]
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	83bb      	strh	r3, [r7, #28]
          Custom_STM_App_Notification(&Notification);
 8009e28:	f107 030c 	add.w	r3, r7, #12
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7ff fe79 	bl	8009b24 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8009e32:	e002      	b.n	8009e3a <Custom_STM_Event_Handler+0x262>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8009e34:	bf00      	nop
 8009e36:	e002      	b.n	8009e3e <Custom_STM_Event_Handler+0x266>
          break;
 8009e38:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009e3a:	e000      	b.n	8009e3e <Custom_STM_Event_Handler+0x266>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8009e3c:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8009e3e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}/* end Custom_STM_Event_Handler */
 8009e42:	4618      	mov	r0, r3
 8009e44:	3738      	adds	r7, #56	@ 0x38
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	200006ac 	.word	0x200006ac
 8009e50:	2000004a 	.word	0x2000004a
 8009e54:	2000036e 	.word	0x2000036e
 8009e58:	20000370 	.word	0x20000370
 8009e5c:	20000371 	.word	0x20000371
 8009e60:	2000034e 	.word	0x2000034e
 8009e64:	20000350 	.word	0x20000350
 8009e68:	20000352 	.word	0x20000352
 8009e6c:	2000000c 	.word	0x2000000c
 8009e70:	20000010 	.word	0x20000010
 8009e74:	20000014 	.word	0x20000014
 8009e78:	2000001c 	.word	0x2000001c
 8009e7c:	20000018 	.word	0x20000018
 8009e80:	20000020 	.word	0x20000020
 8009e84:	20000374 	.word	0x20000374
 8009e88:	20000024 	.word	0x20000024

08009e8c <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b08c      	sub	sp, #48	@ 0x30
 8009e90:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009e92:	2392      	movs	r3, #146	@ 0x92
 8009e94:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8009e96:	484f      	ldr	r0, [pc, #316]	@ (8009fd4 <SVCCTL_InitCustomSvc+0x148>)
 8009e98:	f7fe fab0 	bl	80083fc <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 8009e9c:	2306      	movs	r3, #6
 8009e9e:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService1 */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService1 */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 8009ea0:	238f      	movs	r3, #143	@ 0x8f
 8009ea2:	713b      	strb	r3, [r7, #4]
 8009ea4:	23e5      	movs	r3, #229	@ 0xe5
 8009ea6:	717b      	strb	r3, [r7, #5]
 8009ea8:	23b3      	movs	r3, #179	@ 0xb3
 8009eaa:	71bb      	strb	r3, [r7, #6]
 8009eac:	23d5      	movs	r3, #213	@ 0xd5
 8009eae:	71fb      	strb	r3, [r7, #7]
 8009eb0:	232e      	movs	r3, #46	@ 0x2e
 8009eb2:	723b      	strb	r3, [r7, #8]
 8009eb4:	237f      	movs	r3, #127	@ 0x7f
 8009eb6:	727b      	strb	r3, [r7, #9]
 8009eb8:	234a      	movs	r3, #74	@ 0x4a
 8009eba:	72bb      	strb	r3, [r7, #10]
 8009ebc:	2398      	movs	r3, #152	@ 0x98
 8009ebe:	72fb      	strb	r3, [r7, #11]
 8009ec0:	232a      	movs	r3, #42	@ 0x2a
 8009ec2:	733b      	strb	r3, [r7, #12]
 8009ec4:	2348      	movs	r3, #72	@ 0x48
 8009ec6:	737b      	strb	r3, [r7, #13]
 8009ec8:	237a      	movs	r3, #122	@ 0x7a
 8009eca:	73bb      	strb	r3, [r7, #14]
 8009ecc:	23cc      	movs	r3, #204	@ 0xcc
 8009ece:	73fb      	strb	r3, [r7, #15]
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	743b      	strb	r3, [r7, #16]
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	747b      	strb	r3, [r7, #17]
 8009ed8:	2300      	movs	r3, #0
 8009eda:	74bb      	strb	r3, [r7, #18]
 8009edc:	2300      	movs	r3, #0
 8009ede:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8009ee0:	7dbb      	ldrb	r3, [r7, #22]
 8009ee2:	1d39      	adds	r1, r7, #4
 8009ee4:	4a3c      	ldr	r2, [pc, #240]	@ (8009fd8 <SVCCTL_InitCustomSvc+0x14c>)
 8009ee6:	9200      	str	r2, [sp, #0]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	2002      	movs	r0, #2
 8009eec:	f7fd fcfa 	bl	80078e4 <aci_gatt_add_service>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 8009ef4:	2319      	movs	r3, #25
 8009ef6:	713b      	strb	r3, [r7, #4]
 8009ef8:	23ed      	movs	r3, #237	@ 0xed
 8009efa:	717b      	strb	r3, [r7, #5]
 8009efc:	2382      	movs	r3, #130	@ 0x82
 8009efe:	71bb      	strb	r3, [r7, #6]
 8009f00:	23ae      	movs	r3, #174	@ 0xae
 8009f02:	71fb      	strb	r3, [r7, #7]
 8009f04:	23ed      	movs	r3, #237	@ 0xed
 8009f06:	723b      	strb	r3, [r7, #8]
 8009f08:	2321      	movs	r3, #33	@ 0x21
 8009f0a:	727b      	strb	r3, [r7, #9]
 8009f0c:	234c      	movs	r3, #76	@ 0x4c
 8009f0e:	72bb      	strb	r3, [r7, #10]
 8009f10:	239d      	movs	r3, #157	@ 0x9d
 8009f12:	72fb      	strb	r3, [r7, #11]
 8009f14:	2341      	movs	r3, #65	@ 0x41
 8009f16:	733b      	strb	r3, [r7, #12]
 8009f18:	2345      	movs	r3, #69	@ 0x45
 8009f1a:	737b      	strb	r3, [r7, #13]
 8009f1c:	2322      	movs	r3, #34	@ 0x22
 8009f1e:	73bb      	strb	r3, [r7, #14]
 8009f20:	238e      	movs	r3, #142	@ 0x8e
 8009f22:	73fb      	strb	r3, [r7, #15]
 8009f24:	2300      	movs	r3, #0
 8009f26:	743b      	strb	r3, [r7, #16]
 8009f28:	2300      	movs	r3, #0
 8009f2a:	747b      	strb	r3, [r7, #17]
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	74bb      	strb	r3, [r7, #18]
 8009f30:	2300      	movs	r3, #0
 8009f32:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 8009f34:	4b28      	ldr	r3, [pc, #160]	@ (8009fd8 <SVCCTL_InitCustomSvc+0x14c>)
 8009f36:	8818      	ldrh	r0, [r3, #0]
 8009f38:	4b28      	ldr	r3, [pc, #160]	@ (8009fdc <SVCCTL_InitCustomSvc+0x150>)
 8009f3a:	881b      	ldrh	r3, [r3, #0]
 8009f3c:	1d3a      	adds	r2, r7, #4
 8009f3e:	4928      	ldr	r1, [pc, #160]	@ (8009fe0 <SVCCTL_InitCustomSvc+0x154>)
 8009f40:	9105      	str	r1, [sp, #20]
 8009f42:	2101      	movs	r1, #1
 8009f44:	9104      	str	r1, [sp, #16]
 8009f46:	2110      	movs	r1, #16
 8009f48:	9103      	str	r1, [sp, #12]
 8009f4a:	2101      	movs	r1, #1
 8009f4c:	9102      	str	r1, [sp, #8]
 8009f4e:	2100      	movs	r1, #0
 8009f50:	9101      	str	r1, [sp, #4]
 8009f52:	2108      	movs	r1, #8
 8009f54:	9100      	str	r1, [sp, #0]
 8009f56:	2102      	movs	r1, #2
 8009f58:	f7fd fd9a 	bl	8007a90 <aci_gatt_add_char>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  myCharNotify
   */
  COPY_MYCHARNOTIFY_UUID(uuid.Char_UUID_128);
 8009f60:	2319      	movs	r3, #25
 8009f62:	713b      	strb	r3, [r7, #4]
 8009f64:	23ed      	movs	r3, #237	@ 0xed
 8009f66:	717b      	strb	r3, [r7, #5]
 8009f68:	2382      	movs	r3, #130	@ 0x82
 8009f6a:	71bb      	strb	r3, [r7, #6]
 8009f6c:	23ae      	movs	r3, #174	@ 0xae
 8009f6e:	71fb      	strb	r3, [r7, #7]
 8009f70:	23ed      	movs	r3, #237	@ 0xed
 8009f72:	723b      	strb	r3, [r7, #8]
 8009f74:	2321      	movs	r3, #33	@ 0x21
 8009f76:	727b      	strb	r3, [r7, #9]
 8009f78:	234c      	movs	r3, #76	@ 0x4c
 8009f7a:	72bb      	strb	r3, [r7, #10]
 8009f7c:	239d      	movs	r3, #157	@ 0x9d
 8009f7e:	72fb      	strb	r3, [r7, #11]
 8009f80:	2341      	movs	r3, #65	@ 0x41
 8009f82:	733b      	strb	r3, [r7, #12]
 8009f84:	2345      	movs	r3, #69	@ 0x45
 8009f86:	737b      	strb	r3, [r7, #13]
 8009f88:	2322      	movs	r3, #34	@ 0x22
 8009f8a:	73bb      	strb	r3, [r7, #14]
 8009f8c:	238e      	movs	r3, #142	@ 0x8e
 8009f8e:	73fb      	strb	r3, [r7, #15]
 8009f90:	2301      	movs	r3, #1
 8009f92:	743b      	strb	r3, [r7, #16]
 8009f94:	2300      	movs	r3, #0
 8009f96:	747b      	strb	r3, [r7, #17]
 8009f98:	2300      	movs	r3, #0
 8009f9a:	74bb      	strb	r3, [r7, #18]
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 8009fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8009fd8 <SVCCTL_InitCustomSvc+0x14c>)
 8009fa2:	8818      	ldrh	r0, [r3, #0]
 8009fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8009fe4 <SVCCTL_InitCustomSvc+0x158>)
 8009fa6:	881b      	ldrh	r3, [r3, #0]
 8009fa8:	1d3a      	adds	r2, r7, #4
 8009faa:	490f      	ldr	r1, [pc, #60]	@ (8009fe8 <SVCCTL_InitCustomSvc+0x15c>)
 8009fac:	9105      	str	r1, [sp, #20]
 8009fae:	2100      	movs	r1, #0
 8009fb0:	9104      	str	r1, [sp, #16]
 8009fb2:	2110      	movs	r1, #16
 8009fb4:	9103      	str	r1, [sp, #12]
 8009fb6:	2101      	movs	r1, #1
 8009fb8:	9102      	str	r1, [sp, #8]
 8009fba:	2100      	movs	r1, #0
 8009fbc:	9101      	str	r1, [sp, #4]
 8009fbe:	2110      	movs	r1, #16
 8009fc0:	9100      	str	r1, [sp, #0]
 8009fc2:	2102      	movs	r1, #2
 8009fc4:	f7fd fd64 	bl	8007a90 <aci_gatt_add_char>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8009fcc:	bf00      	nop
}
 8009fce:	3718      	adds	r7, #24
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	08009bd9 	.word	0x08009bd9
 8009fd8:	200006ac 	.word	0x200006ac
 8009fdc:	20000046 	.word	0x20000046
 8009fe0:	200006ae 	.word	0x200006ae
 8009fe4:	20000048 	.word	0x20000048
 8009fe8:	200006b0 	.word	0x200006b0

08009fec <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b086      	sub	sp, #24
 8009ff0:	af02      	add	r7, sp, #8
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	6039      	str	r1, [r7, #0]
 8009ff6:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009ff8:	2392      	movs	r3, #146	@ 0x92
 8009ffa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8009ffc:	79fb      	ldrb	r3, [r7, #7]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d002      	beq.n	800a008 <Custom_STM_App_Update_Char+0x1c>
 800a002:	2b01      	cmp	r3, #1
 800a004:	d010      	beq.n	800a028 <Custom_STM_App_Update_Char+0x3c>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 800a006:	e01f      	b.n	800a048 <Custom_STM_App_Update_Char+0x5c>
      ret = aci_gatt_update_char_value(CustomContext.CustomMysvcHdle,
 800a008:	4b12      	ldr	r3, [pc, #72]	@ (800a054 <Custom_STM_App_Update_Char+0x68>)
 800a00a:	8818      	ldrh	r0, [r3, #0]
 800a00c:	4b11      	ldr	r3, [pc, #68]	@ (800a054 <Custom_STM_App_Update_Char+0x68>)
 800a00e:	8859      	ldrh	r1, [r3, #2]
 800a010:	4b11      	ldr	r3, [pc, #68]	@ (800a058 <Custom_STM_App_Update_Char+0x6c>)
 800a012:	881b      	ldrh	r3, [r3, #0]
 800a014:	b2da      	uxtb	r2, r3
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	9300      	str	r3, [sp, #0]
 800a01a:	4613      	mov	r3, r2
 800a01c:	2200      	movs	r2, #0
 800a01e:	f7fd fe3f 	bl	8007ca0 <aci_gatt_update_char_value>
 800a022:	4603      	mov	r3, r0
 800a024:	73fb      	strb	r3, [r7, #15]
      break;
 800a026:	e00f      	b.n	800a048 <Custom_STM_App_Update_Char+0x5c>
      ret = aci_gatt_update_char_value(CustomContext.CustomMysvcHdle,
 800a028:	4b0a      	ldr	r3, [pc, #40]	@ (800a054 <Custom_STM_App_Update_Char+0x68>)
 800a02a:	8818      	ldrh	r0, [r3, #0]
 800a02c:	4b09      	ldr	r3, [pc, #36]	@ (800a054 <Custom_STM_App_Update_Char+0x68>)
 800a02e:	8899      	ldrh	r1, [r3, #4]
 800a030:	4b0a      	ldr	r3, [pc, #40]	@ (800a05c <Custom_STM_App_Update_Char+0x70>)
 800a032:	881b      	ldrh	r3, [r3, #0]
 800a034:	b2da      	uxtb	r2, r3
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	9300      	str	r3, [sp, #0]
 800a03a:	4613      	mov	r3, r2
 800a03c:	2200      	movs	r2, #0
 800a03e:	f7fd fe2f 	bl	8007ca0 <aci_gatt_update_char_value>
 800a042:	4603      	mov	r3, r0
 800a044:	73fb      	strb	r3, [r7, #15]
      break;
 800a046:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800a048:	7bfb      	ldrb	r3, [r7, #15]
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	200006ac 	.word	0x200006ac
 800a058:	20000046 	.word	0x20000046
 800a05c:	20000048 	.word	0x20000048

0800a060 <LL_PWR_EnableBootC2>:
{
 800a060:	b480      	push	{r7}
 800a062:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800a064:	4b05      	ldr	r3, [pc, #20]	@ (800a07c <LL_PWR_EnableBootC2+0x1c>)
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	4a04      	ldr	r2, [pc, #16]	@ (800a07c <LL_PWR_EnableBootC2+0x1c>)
 800a06a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a06e:	60d3      	str	r3, [r2, #12]
}
 800a070:	bf00      	nop
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr
 800a07a:	bf00      	nop
 800a07c:	58000400 	.word	0x58000400

0800a080 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800a088:	4b06      	ldr	r3, [pc, #24]	@ (800a0a4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800a08a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800a08e:	4905      	ldr	r1, [pc, #20]	@ (800a0a4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4313      	orrs	r3, r2
 800a094:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800a098:	bf00      	nop
 800a09a:	370c      	adds	r7, #12
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr
 800a0a4:	58000800 	.word	0x58000800

0800a0a8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b083      	sub	sp, #12
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800a0b0:	4b05      	ldr	r3, [pc, #20]	@ (800a0c8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a0b2:	6a1a      	ldr	r2, [r3, #32]
 800a0b4:	4904      	ldr	r1, [pc, #16]	@ (800a0c8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	620b      	str	r3, [r1, #32]
}
 800a0bc:	bf00      	nop
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr
 800a0c8:	58000800 	.word	0x58000800

0800a0cc <LL_AHB3_GRP1_EnableClock>:
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800a0d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a0d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a0da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800a0e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a0e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4013      	ands	r3, r2
 800a0ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
}
 800a0f2:	bf00      	nop
 800a0f4:	3714      	adds	r7, #20
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr

0800a0fe <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800a0fe:	b480      	push	{r7}
 800a100:	b085      	sub	sp, #20
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800a106:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a10a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800a10e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4313      	orrs	r3, r2
 800a116:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800a11a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a11e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4013      	ands	r3, r2
 800a126:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a128:	68fb      	ldr	r3, [r7, #12]
}
 800a12a:	bf00      	nop
 800a12c:	3714      	adds	r7, #20
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr

0800a136 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800a136:	b480      	push	{r7}
 800a138:	b083      	sub	sp, #12
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	601a      	str	r2, [r3, #0]
}
 800a14a:	bf00      	nop
 800a14c:	370c      	adds	r7, #12
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr

0800a156 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800a156:	b480      	push	{r7}
 800a158:	b083      	sub	sp, #12
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f043 0201 	orr.w	r2, r3, #1
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	601a      	str	r2, [r3, #0]
}
 800a16a:	bf00      	nop
 800a16c:	370c      	adds	r7, #12
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr

0800a176 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800a176:	b480      	push	{r7}
 800a178:	b083      	sub	sp, #12
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
 800a17e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	685a      	ldr	r2, [r3, #4]
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	041b      	lsls	r3, r3, #16
 800a188:	43db      	mvns	r3, r3
 800a18a:	401a      	ands	r2, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	605a      	str	r2, [r3, #4]
}
 800a190:	bf00      	nop
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	685a      	ldr	r2, [r3, #4]
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	041b      	lsls	r3, r3, #16
 800a1ae:	431a      	orrs	r2, r3
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	605a      	str	r2, [r3, #4]
}
 800a1b4:	bf00      	nop
 800a1b6:	370c      	adds	r7, #12
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	685a      	ldr	r2, [r3, #4]
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	43db      	mvns	r3, r3
 800a1d2:	401a      	ands	r2, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	605a      	str	r2, [r3, #4]
}
 800a1d8:	bf00      	nop
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	683a      	ldr	r2, [r7, #0]
 800a1f2:	609a      	str	r2, [r3, #8]
}
 800a1f4:	bf00      	nop
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	041a      	lsls	r2, r3, #16
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	609a      	str	r2, [r3, #8]
}
 800a212:	bf00      	nop
 800a214:	370c      	adds	r7, #12
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr

0800a21e <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800a21e:	b480      	push	{r7}
 800a220:	b083      	sub	sp, #12
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
 800a226:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	68da      	ldr	r2, [r3, #12]
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	4013      	ands	r3, r2
 800a230:	683a      	ldr	r2, [r7, #0]
 800a232:	429a      	cmp	r2, r3
 800a234:	d101      	bne.n	800a23a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800a236:	2301      	movs	r3, #1
 800a238:	e000      	b.n	800a23c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800a23a:	2300      	movs	r3, #0
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	69da      	ldr	r2, [r3, #28]
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	4013      	ands	r3, r2
 800a25a:	683a      	ldr	r2, [r7, #0]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d101      	bne.n	800a264 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800a260:	2301      	movs	r3, #1
 800a262:	e000      	b.n	800a266 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800a264:	2300      	movs	r3, #0
}
 800a266:	4618      	mov	r0, r3
 800a268:	370c      	adds	r7, #12
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr
	...

0800a274 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800a274:	b580      	push	{r7, lr}
 800a276:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800a278:	2102      	movs	r1, #2
 800a27a:	4818      	ldr	r0, [pc, #96]	@ (800a2dc <HW_IPCC_Rx_Handler+0x68>)
 800a27c:	f7ff ffe4 	bl	800a248 <LL_C2_IPCC_IsActiveFlag_CHx>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d008      	beq.n	800a298 <HW_IPCC_Rx_Handler+0x24>
 800a286:	4b15      	ldr	r3, [pc, #84]	@ (800a2dc <HW_IPCC_Rx_Handler+0x68>)
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	f003 0302 	and.w	r3, r3, #2
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d102      	bne.n	800a298 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800a292:	f000 f925 	bl	800a4e0 <HW_IPCC_SYS_EvtHandler>
 800a296:	e01e      	b.n	800a2d6 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800a298:	2101      	movs	r1, #1
 800a29a:	4810      	ldr	r0, [pc, #64]	@ (800a2dc <HW_IPCC_Rx_Handler+0x68>)
 800a29c:	f7ff ffd4 	bl	800a248 <LL_C2_IPCC_IsActiveFlag_CHx>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d008      	beq.n	800a2b8 <HW_IPCC_Rx_Handler+0x44>
 800a2a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a2dc <HW_IPCC_Rx_Handler+0x68>)
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	f003 0301 	and.w	r3, r3, #1
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d102      	bne.n	800a2b8 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800a2b2:	f000 f899 	bl	800a3e8 <HW_IPCC_BLE_EvtHandler>
 800a2b6:	e00e      	b.n	800a2d6 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800a2b8:	2108      	movs	r1, #8
 800a2ba:	4808      	ldr	r0, [pc, #32]	@ (800a2dc <HW_IPCC_Rx_Handler+0x68>)
 800a2bc:	f7ff ffc4 	bl	800a248 <LL_C2_IPCC_IsActiveFlag_CHx>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d008      	beq.n	800a2d8 <HW_IPCC_Rx_Handler+0x64>
 800a2c6:	4b05      	ldr	r3, [pc, #20]	@ (800a2dc <HW_IPCC_Rx_Handler+0x68>)
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	f003 0308 	and.w	r3, r3, #8
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d102      	bne.n	800a2d8 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800a2d2:	f000 f97d 	bl	800a5d0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800a2d6:	bf00      	nop
 800a2d8:	bf00      	nop
}
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	58000c00 	.word	0x58000c00

0800a2e0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800a2e4:	2102      	movs	r1, #2
 800a2e6:	4818      	ldr	r0, [pc, #96]	@ (800a348 <HW_IPCC_Tx_Handler+0x68>)
 800a2e8:	f7ff ff99 	bl	800a21e <LL_C1_IPCC_IsActiveFlag_CHx>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d108      	bne.n	800a304 <HW_IPCC_Tx_Handler+0x24>
 800a2f2:	4b15      	ldr	r3, [pc, #84]	@ (800a348 <HW_IPCC_Tx_Handler+0x68>)
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d102      	bne.n	800a304 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800a2fe:	f000 f8d3 	bl	800a4a8 <HW_IPCC_SYS_CmdEvtHandler>
 800a302:	e01e      	b.n	800a342 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800a304:	2108      	movs	r1, #8
 800a306:	4810      	ldr	r0, [pc, #64]	@ (800a348 <HW_IPCC_Tx_Handler+0x68>)
 800a308:	f7ff ff89 	bl	800a21e <LL_C1_IPCC_IsActiveFlag_CHx>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d108      	bne.n	800a324 <HW_IPCC_Tx_Handler+0x44>
 800a312:	4b0d      	ldr	r3, [pc, #52]	@ (800a348 <HW_IPCC_Tx_Handler+0x68>)
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d102      	bne.n	800a324 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800a31e:	f000 f919 	bl	800a554 <HW_IPCC_MM_FreeBufHandler>
 800a322:	e00e      	b.n	800a342 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800a324:	2120      	movs	r1, #32
 800a326:	4808      	ldr	r0, [pc, #32]	@ (800a348 <HW_IPCC_Tx_Handler+0x68>)
 800a328:	f7ff ff79 	bl	800a21e <LL_C1_IPCC_IsActiveFlag_CHx>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d108      	bne.n	800a344 <HW_IPCC_Tx_Handler+0x64>
 800a332:	4b05      	ldr	r3, [pc, #20]	@ (800a348 <HW_IPCC_Tx_Handler+0x68>)
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d102      	bne.n	800a344 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800a33e:	f000 f85f 	bl	800a400 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800a342:	bf00      	nop
 800a344:	bf00      	nop
}
 800a346:	bd80      	pop	{r7, pc}
 800a348:	58000c00 	.word	0x58000c00

0800a34c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800a350:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a354:	f7ff fed3 	bl	800a0fe <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800a358:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a35c:	f7ff fea4 	bl	800a0a8 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800a360:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a364:	f7ff fe8c 	bl	800a080 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800a368:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800a36a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800a36c:	f7ff fe78 	bl	800a060 <LL_PWR_EnableBootC2>

  return;
 800a370:	bf00      	nop
}
 800a372:	bd80      	pop	{r7, pc}

0800a374 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800a374:	b580      	push	{r7, lr}
 800a376:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800a378:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a37c:	f7ff fea6 	bl	800a0cc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800a380:	4806      	ldr	r0, [pc, #24]	@ (800a39c <HW_IPCC_Init+0x28>)
 800a382:	f7ff fee8 	bl	800a156 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800a386:	4805      	ldr	r0, [pc, #20]	@ (800a39c <HW_IPCC_Init+0x28>)
 800a388:	f7ff fed5 	bl	800a136 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800a38c:	202c      	movs	r0, #44	@ 0x2c
 800a38e:	f7f9 f8ca 	bl	8003526 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800a392:	202d      	movs	r0, #45	@ 0x2d
 800a394:	f7f9 f8c7 	bl	8003526 <HAL_NVIC_EnableIRQ>

  return;
 800a398:	bf00      	nop
}
 800a39a:	bd80      	pop	{r7, pc}
 800a39c:	58000c00 	.word	0x58000c00

0800a3a0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3a6:	f3ef 8310 	mrs	r3, PRIMASK
 800a3aa:	607b      	str	r3, [r7, #4]
  return(result);
 800a3ac:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a3ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a3b0:	b672      	cpsid	i
}
 800a3b2:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800a3b4:	2101      	movs	r1, #1
 800a3b6:	4806      	ldr	r0, [pc, #24]	@ (800a3d0 <HW_IPCC_BLE_Init+0x30>)
 800a3b8:	f7ff ff02 	bl	800a1c0 <LL_C1_IPCC_EnableReceiveChannel>
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	f383 8810 	msr	PRIMASK, r3
}
 800a3c6:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800a3c8:	bf00      	nop
}
 800a3ca:	3710      	adds	r7, #16
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	58000c00 	.word	0x58000c00

0800a3d4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800a3d8:	2101      	movs	r1, #1
 800a3da:	4802      	ldr	r0, [pc, #8]	@ (800a3e4 <HW_IPCC_BLE_SendCmd+0x10>)
 800a3dc:	f7ff ff10 	bl	800a200 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800a3e0:	bf00      	nop
}
 800a3e2:	bd80      	pop	{r7, pc}
 800a3e4:	58000c00 	.word	0x58000c00

0800a3e8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800a3ec:	f7fe fcca 	bl	8008d84 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800a3f0:	2101      	movs	r1, #1
 800a3f2:	4802      	ldr	r0, [pc, #8]	@ (800a3fc <HW_IPCC_BLE_EvtHandler+0x14>)
 800a3f4:	f7ff fef6 	bl	800a1e4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a3f8:	bf00      	nop
}
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	58000c00 	.word	0x58000c00

0800a400 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a406:	f3ef 8310 	mrs	r3, PRIMASK
 800a40a:	607b      	str	r3, [r7, #4]
  return(result);
 800a40c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a40e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a410:	b672      	cpsid	i
}
 800a412:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800a414:	2120      	movs	r1, #32
 800a416:	4807      	ldr	r0, [pc, #28]	@ (800a434 <HW_IPCC_BLE_AclDataEvtHandler+0x34>)
 800a418:	f7ff fec0 	bl	800a19c <LL_C1_IPCC_DisableTransmitChannel>
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	f383 8810 	msr	PRIMASK, r3
}
 800a426:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_BLE_AclDataAckNot();
 800a428:	f7fe fcdc 	bl	8008de4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800a42c:	bf00      	nop
}
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	58000c00 	.word	0x58000c00

0800a438 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a43e:	f3ef 8310 	mrs	r3, PRIMASK
 800a442:	607b      	str	r3, [r7, #4]
  return(result);
 800a444:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a446:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a448:	b672      	cpsid	i
}
 800a44a:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a44c:	2102      	movs	r1, #2
 800a44e:	4806      	ldr	r0, [pc, #24]	@ (800a468 <HW_IPCC_SYS_Init+0x30>)
 800a450:	f7ff feb6 	bl	800a1c0 <LL_C1_IPCC_EnableReceiveChannel>
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	f383 8810 	msr	PRIMASK, r3
}
 800a45e:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800a460:	bf00      	nop
}
 800a462:	3710      	adds	r7, #16
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	58000c00 	.word	0x58000c00

0800a46c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a472:	2102      	movs	r1, #2
 800a474:	480b      	ldr	r0, [pc, #44]	@ (800a4a4 <HW_IPCC_SYS_SendCmd+0x38>)
 800a476:	f7ff fec3 	bl	800a200 <LL_C1_IPCC_SetFlag_CHx>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a47a:	f3ef 8310 	mrs	r3, PRIMASK
 800a47e:	607b      	str	r3, [r7, #4]
  return(result);
 800a480:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a482:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a484:	b672      	cpsid	i
}
 800a486:	bf00      	nop
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a488:	2102      	movs	r1, #2
 800a48a:	4806      	ldr	r0, [pc, #24]	@ (800a4a4 <HW_IPCC_SYS_SendCmd+0x38>)
 800a48c:	f7ff fe73 	bl	800a176 <LL_C1_IPCC_EnableTransmitChannel>
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	f383 8810 	msr	PRIMASK, r3
}
 800a49a:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800a49c:	bf00      	nop
}
 800a49e:	3710      	adds	r7, #16
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	58000c00 	.word	0x58000c00

0800a4a8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4ae:	f3ef 8310 	mrs	r3, PRIMASK
 800a4b2:	607b      	str	r3, [r7, #4]
  return(result);
 800a4b4:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a4b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a4b8:	b672      	cpsid	i
}
 800a4ba:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a4bc:	2102      	movs	r1, #2
 800a4be:	4807      	ldr	r0, [pc, #28]	@ (800a4dc <HW_IPCC_SYS_CmdEvtHandler+0x34>)
 800a4c0:	f7ff fe6c 	bl	800a19c <LL_C1_IPCC_DisableTransmitChannel>
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	f383 8810 	msr	PRIMASK, r3
}
 800a4ce:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_SYS_CmdEvtNot();
 800a4d0:	f7fe fcdc 	bl	8008e8c <HW_IPCC_SYS_CmdEvtNot>

  return;
 800a4d4:	bf00      	nop
}
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	58000c00 	.word	0x58000c00

0800a4e0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800a4e4:	f7fe fce8 	bl	8008eb8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a4e8:	2102      	movs	r1, #2
 800a4ea:	4802      	ldr	r0, [pc, #8]	@ (800a4f4 <HW_IPCC_SYS_EvtHandler+0x14>)
 800a4ec:	f7ff fe7a 	bl	800a1e4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a4f0:	bf00      	nop
}
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	58000c00 	.word	0x58000c00

0800a4f8 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b086      	sub	sp, #24
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800a500:	2108      	movs	r1, #8
 800a502:	4812      	ldr	r0, [pc, #72]	@ (800a54c <HW_IPCC_MM_SendFreeBuf+0x54>)
 800a504:	f7ff fe8b 	bl	800a21e <LL_C1_IPCC_IsActiveFlag_CHx>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d013      	beq.n	800a536 <HW_IPCC_MM_SendFreeBuf+0x3e>
  {
    FreeBufCb = cb;
 800a50e:	4a10      	ldr	r2, [pc, #64]	@ (800a550 <HW_IPCC_MM_SendFreeBuf+0x58>)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a514:	f3ef 8310 	mrs	r3, PRIMASK
 800a518:	60fb      	str	r3, [r7, #12]
  return(result);
 800a51a:	68fb      	ldr	r3, [r7, #12]
    UTILS_ENTER_CRITICAL_SECTION();
 800a51c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a51e:	b672      	cpsid	i
}
 800a520:	bf00      	nop
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a522:	2108      	movs	r1, #8
 800a524:	4809      	ldr	r0, [pc, #36]	@ (800a54c <HW_IPCC_MM_SendFreeBuf+0x54>)
 800a526:	f7ff fe26 	bl	800a176 <LL_C1_IPCC_EnableTransmitChannel>
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	f383 8810 	msr	PRIMASK, r3
}
 800a534:	e005      	b.n	800a542 <HW_IPCC_MM_SendFreeBuf+0x4a>
    UTILS_EXIT_CRITICAL_SECTION();
  }
  else
  {
    cb();
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4798      	blx	r3

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a53a:	2108      	movs	r1, #8
 800a53c:	4803      	ldr	r0, [pc, #12]	@ (800a54c <HW_IPCC_MM_SendFreeBuf+0x54>)
 800a53e:	f7ff fe5f 	bl	800a200 <LL_C1_IPCC_SetFlag_CHx>
  }

  return;
 800a542:	bf00      	nop
}
 800a544:	3718      	adds	r7, #24
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	58000c00 	.word	0x58000c00
 800a550:	200006b4 	.word	0x200006b4

0800a554 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a55a:	f3ef 8310 	mrs	r3, PRIMASK
 800a55e:	607b      	str	r3, [r7, #4]
  return(result);
 800a560:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a562:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a564:	b672      	cpsid	i
}
 800a566:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a568:	2108      	movs	r1, #8
 800a56a:	480a      	ldr	r0, [pc, #40]	@ (800a594 <HW_IPCC_MM_FreeBufHandler+0x40>)
 800a56c:	f7ff fe16 	bl	800a19c <LL_C1_IPCC_DisableTransmitChannel>
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	f383 8810 	msr	PRIMASK, r3
}
 800a57a:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  FreeBufCb();
 800a57c:	4b06      	ldr	r3, [pc, #24]	@ (800a598 <HW_IPCC_MM_FreeBufHandler+0x44>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a582:	2108      	movs	r1, #8
 800a584:	4803      	ldr	r0, [pc, #12]	@ (800a594 <HW_IPCC_MM_FreeBufHandler+0x40>)
 800a586:	f7ff fe3b 	bl	800a200 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800a58a:	bf00      	nop
}
 800a58c:	3710      	adds	r7, #16
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	58000c00 	.word	0x58000c00
 800a598:	200006b4 	.word	0x200006b4

0800a59c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5a2:	f3ef 8310 	mrs	r3, PRIMASK
 800a5a6:	607b      	str	r3, [r7, #4]
  return(result);
 800a5a8:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800a5aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5ac:	b672      	cpsid	i
}
 800a5ae:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a5b0:	2108      	movs	r1, #8
 800a5b2:	4806      	ldr	r0, [pc, #24]	@ (800a5cc <HW_IPCC_TRACES_Init+0x30>)
 800a5b4:	f7ff fe04 	bl	800a1c0 <LL_C1_IPCC_EnableReceiveChannel>
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	f383 8810 	msr	PRIMASK, r3
}
 800a5c2:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800a5c4:	bf00      	nop
}
 800a5c6:	3710      	adds	r7, #16
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}
 800a5cc:	58000c00 	.word	0x58000c00

0800a5d0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800a5d4:	f7fe fd18 	bl	8009008 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a5d8:	2108      	movs	r1, #8
 800a5da:	4802      	ldr	r0, [pc, #8]	@ (800a5e4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800a5dc:	f7ff fe02 	bl	800a1e4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a5e0:	bf00      	nop
}
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	58000c00 	.word	0x58000c00

0800a5e8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a5ec:	4b05      	ldr	r3, [pc, #20]	@ (800a604 <UTIL_LPM_Init+0x1c>)
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a5f2:	4b05      	ldr	r3, [pc, #20]	@ (800a608 <UTIL_LPM_Init+0x20>)
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a5f8:	bf00      	nop
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a600:	4770      	bx	lr
 800a602:	bf00      	nop
 800a604:	200006b8 	.word	0x200006b8
 800a608:	200006bc 	.word	0x200006bc

0800a60c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a60c:	b480      	push	{r7}
 800a60e:	b087      	sub	sp, #28
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	460b      	mov	r3, r1
 800a616:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a618:	f3ef 8310 	mrs	r3, PRIMASK
 800a61c:	613b      	str	r3, [r7, #16]
  return(result);
 800a61e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a620:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a622:	b672      	cpsid	i
}
 800a624:	bf00      	nop
  
  switch(state)
 800a626:	78fb      	ldrb	r3, [r7, #3]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d008      	beq.n	800a63e <UTIL_LPM_SetOffMode+0x32>
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d10e      	bne.n	800a64e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a630:	4b0d      	ldr	r3, [pc, #52]	@ (800a668 <UTIL_LPM_SetOffMode+0x5c>)
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	4313      	orrs	r3, r2
 800a638:	4a0b      	ldr	r2, [pc, #44]	@ (800a668 <UTIL_LPM_SetOffMode+0x5c>)
 800a63a:	6013      	str	r3, [r2, #0]
      break;
 800a63c:	e008      	b.n	800a650 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	43da      	mvns	r2, r3
 800a642:	4b09      	ldr	r3, [pc, #36]	@ (800a668 <UTIL_LPM_SetOffMode+0x5c>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4013      	ands	r3, r2
 800a648:	4a07      	ldr	r2, [pc, #28]	@ (800a668 <UTIL_LPM_SetOffMode+0x5c>)
 800a64a:	6013      	str	r3, [r2, #0]
      break;
 800a64c:	e000      	b.n	800a650 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800a64e:	bf00      	nop
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f383 8810 	msr	PRIMASK, r3
}
 800a65a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a65c:	bf00      	nop
 800a65e:	371c      	adds	r7, #28
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr
 800a668:	200006bc 	.word	0x200006bc

0800a66c <UTIL_SEQ_Run>:
  * That is the reason why many variables that are used only in that function are declared static.
  * Note: These variables could have been declared static in the function.
  *
  */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b094      	sub	sp, #80	@ 0x50
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
    /*
     * When this function is nested, the mask to be applied cannot be larger than the first call
     * The mask is always getting smaller and smaller
     * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
     */
    super_mask_backup = SuperMask;
 800a674:	4b89      	ldr	r3, [pc, #548]	@ (800a89c <UTIL_SEQ_Run+0x230>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	62fb      	str	r3, [r7, #44]	@ 0x2c
    SuperMask &= Mask_bm;
 800a67a:	4b88      	ldr	r3, [pc, #544]	@ (800a89c <UTIL_SEQ_Run+0x230>)
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	4013      	ands	r3, r2
 800a682:	4a86      	ldr	r2, [pc, #536]	@ (800a89c <UTIL_SEQ_Run+0x230>)
 800a684:	6013      	str	r3, [r2, #0]
     * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
     * SuperMask that comes from UTIL_SEQ_Run
     * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
     * waiting task
     */
    local_taskset = TaskSet;
 800a686:	4b86      	ldr	r3, [pc, #536]	@ (800a8a0 <UTIL_SEQ_Run+0x234>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	647b      	str	r3, [r7, #68]	@ 0x44
    local_evtset = EvtSet;
 800a68c:	4b85      	ldr	r3, [pc, #532]	@ (800a8a4 <UTIL_SEQ_Run+0x238>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	643b      	str	r3, [r7, #64]	@ 0x40
    local_taskmask = TaskMask;
 800a692:	4b85      	ldr	r3, [pc, #532]	@ (800a8a8 <UTIL_SEQ_Run+0x23c>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	63fb      	str	r3, [r7, #60]	@ 0x3c
    local_evtwaited =  EvtWaited;
 800a698:	4b84      	ldr	r3, [pc, #528]	@ (800a8ac <UTIL_SEQ_Run+0x240>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	63bb      	str	r3, [r7, #56]	@ 0x38
    while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a69e:	e112      	b.n	800a8c6 <UTIL_SEQ_Run+0x25a>
    {
        counter = 0U;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        /*
         * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
         * on the priority parameter given from UTIL_SEQ_SetTask()
         * The while loop is looking for a flag set from the highest priority maskr to the lower
         */
        while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a6a4:	e002      	b.n	800a6ac <UTIL_SEQ_Run+0x40>
        {
            counter++;
 800a6a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
        while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a6ac:	4a80      	ldr	r2, [pc, #512]	@ (800a8b0 <UTIL_SEQ_Run+0x244>)
 800a6ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6b0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a6b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6b6:	401a      	ands	r2, r3
 800a6b8:	4b78      	ldr	r3, [pc, #480]	@ (800a89c <UTIL_SEQ_Run+0x230>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4013      	ands	r3, r2
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d0f1      	beq.n	800a6a6 <UTIL_SEQ_Run+0x3a>
        }

        current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800a6c2:	4a7b      	ldr	r2, [pc, #492]	@ (800a8b0 <UTIL_SEQ_Run+0x244>)
 800a6c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6c6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a6ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6cc:	401a      	ands	r2, r3
 800a6ce:	4b73      	ldr	r3, [pc, #460]	@ (800a89c <UTIL_SEQ_Run+0x230>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4013      	ands	r3, r2
 800a6d4:	64bb      	str	r3, [r7, #72]	@ 0x48
         * the round_robin mask
         *
         * In the check below, the round_robin mask is reinitialize in case all pending
         * tasks haven been executed at least once
         */
        if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a6d6:	4a76      	ldr	r2, [pc, #472]	@ (800a8b0 <UTIL_SEQ_Run+0x244>)
 800a6d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6da:	00db      	lsls	r3, r3, #3
 800a6dc:	4413      	add	r3, r2
 800a6de:	685a      	ldr	r2, [r3, #4]
 800a6e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6e2:	4013      	ands	r3, r2
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d106      	bne.n	800a6f6 <UTIL_SEQ_Run+0x8a>
        {
            TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a6e8:	4a71      	ldr	r2, [pc, #452]	@ (800a8b0 <UTIL_SEQ_Run+0x244>)
 800a6ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6ec:	00db      	lsls	r3, r3, #3
 800a6ee:	4413      	add	r3, r2
 800a6f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6f4:	605a      	str	r2, [r3, #4]

        /*
         * Compute the Stack Startving List
         * This is the list of the task that have been set at least once minus the one that have been cleared ar least once
         */
        task_starving_list = TaskSet;
 800a6f6:	4b6a      	ldr	r3, [pc, #424]	@ (800a8a0 <UTIL_SEQ_Run+0x234>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	62bb      	str	r3, [r7, #40]	@ 0x28
         * Such situation shall not happen when evaluating task_starving_list
         * At any time, there should not be any bit reset in TaskPrio[counter].round_robin and reset in TaskClearList
         * It is correct with regard to the Sequencer Architecture to set in TaskClearList all tasks that are said to be executed from TaskPrio[counter].round_robin
         * This synchronizes both information before calculating the CurrentTaskIdx
         */
        TaskClearList |= (~TaskPrio[counter].round_robin);
 800a6fc:	4a6c      	ldr	r2, [pc, #432]	@ (800a8b0 <UTIL_SEQ_Run+0x244>)
 800a6fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a700:	00db      	lsls	r3, r3, #3
 800a702:	4413      	add	r3, r2
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	43da      	mvns	r2, r3
 800a708:	4b6a      	ldr	r3, [pc, #424]	@ (800a8b4 <UTIL_SEQ_Run+0x248>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4313      	orrs	r3, r2
 800a70e:	4a69      	ldr	r2, [pc, #420]	@ (800a8b4 <UTIL_SEQ_Run+0x248>)
 800a710:	6013      	str	r3, [r2, #0]

        task_starving_list &= (~TaskClearList);
 800a712:	4b68      	ldr	r3, [pc, #416]	@ (800a8b4 <UTIL_SEQ_Run+0x248>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	43db      	mvns	r3, r3
 800a718:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a71a:	4013      	ands	r3, r2
 800a71c:	62bb      	str	r3, [r7, #40]	@ 0x28

        /*
         * Consider first the starving list and update current_task_set accordingly
         */
        if ((task_starving_list & current_task_set) != 0U)
 800a71e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a720:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a722:	4013      	ands	r3, r2
 800a724:	2b00      	cmp	r3, #0
 800a726:	d003      	beq.n	800a730 <UTIL_SEQ_Run+0xc4>
        {
          current_task_set = (task_starving_list & current_task_set);
 800a728:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a72a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a72c:	4013      	ands	r3, r2
 800a72e:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /*
         * Reinitialize the Starving List if required
         */
        if(task_starving_list == 0)
 800a730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a732:	2b00      	cmp	r3, #0
 800a734:	d102      	bne.n	800a73c <UTIL_SEQ_Run+0xd0>
        {
          TaskClearList = 0;
 800a736:	4b5f      	ldr	r3, [pc, #380]	@ (800a8b4 <UTIL_SEQ_Run+0x248>)
 800a738:	2200      	movs	r2, #0
 800a73a:	601a      	str	r2, [r3, #0]
        /*
         * Read the flag index of the task to be executed
         * Once the index is read, the associated task will be executed even though a higher priority stack is requested
         * before task execution.
         */
        CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a73c:	4a5c      	ldr	r2, [pc, #368]	@ (800a8b0 <UTIL_SEQ_Run+0x244>)
 800a73e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a740:	00db      	lsls	r3, r3, #3
 800a742:	4413      	add	r3, r2
 800a744:	685a      	ldr	r2, [r3, #4]
 800a746:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a748:	4013      	ands	r3, r2
 800a74a:	4618      	mov	r0, r3
 800a74c:	f000 fa43 	bl	800abd6 <SEQ_BitPosition>
 800a750:	4603      	mov	r3, r0
 800a752:	461a      	mov	r2, r3
 800a754:	4b58      	ldr	r3, [pc, #352]	@ (800a8b8 <UTIL_SEQ_Run+0x24c>)
 800a756:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a758:	f3ef 8310 	mrs	r3, PRIMASK
 800a75c:	61fb      	str	r3, [r7, #28]
  return(result);
 800a75e:	69fb      	ldr	r3, [r7, #28]

        UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a760:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800a762:	b672      	cpsid	i
}
 800a764:	bf00      	nop
        /* remove from the list or pending task the one that has been selected to be executed */
        TaskSet &= ~(1U << CurrentTaskIdx);
 800a766:	4b54      	ldr	r3, [pc, #336]	@ (800a8b8 <UTIL_SEQ_Run+0x24c>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	2201      	movs	r2, #1
 800a76c:	fa02 f303 	lsl.w	r3, r2, r3
 800a770:	43da      	mvns	r2, r3
 800a772:	4b4b      	ldr	r3, [pc, #300]	@ (800a8a0 <UTIL_SEQ_Run+0x234>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4013      	ands	r3, r2
 800a778:	4a49      	ldr	r2, [pc, #292]	@ (800a8a0 <UTIL_SEQ_Run+0x234>)
 800a77a:	6013      	str	r3, [r2, #0]

        /*
         * remove from all priority mask the task that has been selected to be executed
         */
        for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a77c:	2301      	movs	r3, #1
 800a77e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a780:	e013      	b.n	800a7aa <UTIL_SEQ_Run+0x13e>
        {
          TaskPrio[counter - 1u].priority    &= ~(1U << CurrentTaskIdx);
 800a782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a784:	3b01      	subs	r3, #1
 800a786:	4a4a      	ldr	r2, [pc, #296]	@ (800a8b0 <UTIL_SEQ_Run+0x244>)
 800a788:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a78c:	4b4a      	ldr	r3, [pc, #296]	@ (800a8b8 <UTIL_SEQ_Run+0x24c>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2201      	movs	r2, #1
 800a792:	fa02 f303 	lsl.w	r3, r2, r3
 800a796:	43da      	mvns	r2, r3
 800a798:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a79a:	3b01      	subs	r3, #1
 800a79c:	400a      	ands	r2, r1
 800a79e:	4944      	ldr	r1, [pc, #272]	@ (800a8b0 <UTIL_SEQ_Run+0x244>)
 800a7a0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a7a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7a6:	3b01      	subs	r3, #1
 800a7a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d1e8      	bne.n	800a782 <UTIL_SEQ_Run+0x116>
 800a7b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7b4:	69bb      	ldr	r3, [r7, #24]
 800a7b6:	f383 8810 	msr	PRIMASK, r3
}
 800a7ba:	bf00      	nop
        }
        UTIL_SEQ_EXIT_CRITICAL_SECTION( );

        UTIL_SEQ_PreTask(CurrentTaskIdx);
 800a7bc:	4b3e      	ldr	r3, [pc, #248]	@ (800a8b8 <UTIL_SEQ_Run+0x24c>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f000 f9e9 	bl	800ab98 <UTIL_SEQ_PreTask>

        /*
         * Check that function exists before calling it
         */
        if ((CurrentTaskIdx < UTIL_SEQ_CONF_TASK_NBR) && (TaskCb[CurrentTaskIdx] != NULL))
 800a7c6:	4b3c      	ldr	r3, [pc, #240]	@ (800a8b8 <UTIL_SEQ_Run+0x24c>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	2b1f      	cmp	r3, #31
 800a7cc:	d878      	bhi.n	800a8c0 <UTIL_SEQ_Run+0x254>
 800a7ce:	4b3a      	ldr	r3, [pc, #232]	@ (800a8b8 <UTIL_SEQ_Run+0x24c>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a3a      	ldr	r2, [pc, #232]	@ (800a8bc <UTIL_SEQ_Run+0x250>)
 800a7d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d071      	beq.n	800a8c0 <UTIL_SEQ_Run+0x254>
        {
          /*
           * save the round-robin value to take into account the operation done in UTIL_SEQ_WaitEvt
           */
          for (uint32_t index = 0; index < UTIL_SEQ_CONF_PRIO_NBR; index++)
 800a7dc:	2300      	movs	r3, #0
 800a7de:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7e0:	e01e      	b.n	800a820 <UTIL_SEQ_Run+0x1b4>
          {
            TaskPrio[index].round_robin &= ~(1U << CurrentTaskIdx);
 800a7e2:	4a33      	ldr	r2, [pc, #204]	@ (800a8b0 <UTIL_SEQ_Run+0x244>)
 800a7e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7e6:	00db      	lsls	r3, r3, #3
 800a7e8:	4413      	add	r3, r2
 800a7ea:	685a      	ldr	r2, [r3, #4]
 800a7ec:	4b32      	ldr	r3, [pc, #200]	@ (800a8b8 <UTIL_SEQ_Run+0x24c>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	2101      	movs	r1, #1
 800a7f2:	fa01 f303 	lsl.w	r3, r1, r3
 800a7f6:	43db      	mvns	r3, r3
 800a7f8:	401a      	ands	r2, r3
 800a7fa:	492d      	ldr	r1, [pc, #180]	@ (800a8b0 <UTIL_SEQ_Run+0x244>)
 800a7fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7fe:	00db      	lsls	r3, r3, #3
 800a800:	440b      	add	r3, r1
 800a802:	605a      	str	r2, [r3, #4]
            round_robin[index] = TaskPrio[index].round_robin;
 800a804:	4a2a      	ldr	r2, [pc, #168]	@ (800a8b0 <UTIL_SEQ_Run+0x244>)
 800a806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a808:	00db      	lsls	r3, r3, #3
 800a80a:	4413      	add	r3, r2
 800a80c:	685a      	ldr	r2, [r3, #4]
 800a80e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	3350      	adds	r3, #80	@ 0x50
 800a814:	443b      	add	r3, r7
 800a816:	f843 2c44 	str.w	r2, [r3, #-68]
          for (uint32_t index = 0; index < UTIL_SEQ_CONF_PRIO_NBR; index++)
 800a81a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a81c:	3301      	adds	r3, #1
 800a81e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a822:	2b00      	cmp	r3, #0
 800a824:	d0dd      	beq.n	800a7e2 <UTIL_SEQ_Run+0x176>
          }

          /* Execute the task */
          TaskCb[CurrentTaskIdx]( );
 800a826:	4b24      	ldr	r3, [pc, #144]	@ (800a8b8 <UTIL_SEQ_Run+0x24c>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a24      	ldr	r2, [pc, #144]	@ (800a8bc <UTIL_SEQ_Run+0x250>)
 800a82c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a830:	4798      	blx	r3

          /*
           * restore the round-robin context
           */
          for (uint32_t index = 0; index < UTIL_SEQ_CONF_PRIO_NBR; index++)
 800a832:	2300      	movs	r3, #0
 800a834:	633b      	str	r3, [r7, #48]	@ 0x30
 800a836:	e013      	b.n	800a860 <UTIL_SEQ_Run+0x1f4>
          {
            TaskPrio[index].round_robin &= round_robin[index];
 800a838:	4a1d      	ldr	r2, [pc, #116]	@ (800a8b0 <UTIL_SEQ_Run+0x244>)
 800a83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a83c:	00db      	lsls	r3, r3, #3
 800a83e:	4413      	add	r3, r2
 800a840:	685a      	ldr	r2, [r3, #4]
 800a842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a844:	009b      	lsls	r3, r3, #2
 800a846:	3350      	adds	r3, #80	@ 0x50
 800a848:	443b      	add	r3, r7
 800a84a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a84e:	401a      	ands	r2, r3
 800a850:	4917      	ldr	r1, [pc, #92]	@ (800a8b0 <UTIL_SEQ_Run+0x244>)
 800a852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a854:	00db      	lsls	r3, r3, #3
 800a856:	440b      	add	r3, r1
 800a858:	605a      	str	r2, [r3, #4]
          for (uint32_t index = 0; index < UTIL_SEQ_CONF_PRIO_NBR; index++)
 800a85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a85c:	3301      	adds	r3, #1
 800a85e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a862:	2b00      	cmp	r3, #0
 800a864:	d0e8      	beq.n	800a838 <UTIL_SEQ_Run+0x1cc>
          }

          UTIL_SEQ_PostTask(CurrentTaskIdx);
 800a866:	4b14      	ldr	r3, [pc, #80]	@ (800a8b8 <UTIL_SEQ_Run+0x24c>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4618      	mov	r0, r3
 800a86c:	f000 f99e 	bl	800abac <UTIL_SEQ_PostTask>

          local_taskset = TaskSet;
 800a870:	4b0b      	ldr	r3, [pc, #44]	@ (800a8a0 <UTIL_SEQ_Run+0x234>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	647b      	str	r3, [r7, #68]	@ 0x44
          local_evtset = EvtSet;
 800a876:	4b0b      	ldr	r3, [pc, #44]	@ (800a8a4 <UTIL_SEQ_Run+0x238>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	643b      	str	r3, [r7, #64]	@ 0x40
          local_taskmask = TaskMask;
 800a87c:	4b0a      	ldr	r3, [pc, #40]	@ (800a8a8 <UTIL_SEQ_Run+0x23c>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	63fb      	str	r3, [r7, #60]	@ 0x3c
          local_evtwaited = EvtWaited;
 800a882:	4b0a      	ldr	r3, [pc, #40]	@ (800a8ac <UTIL_SEQ_Run+0x240>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	63bb      	str	r3, [r7, #56]	@ 0x38

          /*
           * Update the two list for next round
           */
          TaskClearList |= (1U << CurrentTaskIdx);
 800a888:	4b0b      	ldr	r3, [pc, #44]	@ (800a8b8 <UTIL_SEQ_Run+0x24c>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	2201      	movs	r2, #1
 800a88e:	409a      	lsls	r2, r3
 800a890:	4b08      	ldr	r3, [pc, #32]	@ (800a8b4 <UTIL_SEQ_Run+0x248>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4313      	orrs	r3, r2
 800a896:	4a07      	ldr	r2, [pc, #28]	@ (800a8b4 <UTIL_SEQ_Run+0x248>)
 800a898:	6013      	str	r3, [r2, #0]
 800a89a:	e014      	b.n	800a8c6 <UTIL_SEQ_Run+0x25a>
 800a89c:	20000050 	.word	0x20000050
 800a8a0:	200006c0 	.word	0x200006c0
 800a8a4:	200006c4 	.word	0x200006c4
 800a8a8:	2000004c 	.word	0x2000004c
 800a8ac:	200006c8 	.word	0x200006c8
 800a8b0:	20000750 	.word	0x20000750
 800a8b4:	20000758 	.word	0x20000758
 800a8b8:	200006cc 	.word	0x200006cc
 800a8bc:	200006d0 	.word	0x200006d0
        else
        {
          /*
           * must never occurs, it means there is a warning in the system
           */
          UTIL_SEQ_CatchWarning(UTIL_SEQ_WARNING_INVALIDTASKID);
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	f000 f97d 	bl	800abc0 <UTIL_SEQ_CatchWarning>
    while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a8c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a8c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8ca:	401a      	ands	r2, r3
 800a8cc:	4b22      	ldr	r3, [pc, #136]	@ (800a958 <UTIL_SEQ_Run+0x2ec>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4013      	ands	r3, r2
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d005      	beq.n	800a8e2 <UTIL_SEQ_Run+0x276>
 800a8d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8da:	4013      	ands	r3, r2
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	f43f aedf 	beq.w	800a6a0 <UTIL_SEQ_Run+0x34>
        }
    }

    /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
    CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a8e2:	4b1e      	ldr	r3, [pc, #120]	@ (800a95c <UTIL_SEQ_Run+0x2f0>)
 800a8e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8e8:	601a      	str	r2, [r3, #0]
    /* if a waited event is present, ignore the IDLE sequence */
    if ((local_evtset & EvtWaited)== 0U)
 800a8ea:	4b1d      	ldr	r3, [pc, #116]	@ (800a960 <UTIL_SEQ_Run+0x2f4>)
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8f0:	4013      	ands	r3, r2
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d129      	bne.n	800a94a <UTIL_SEQ_Run+0x2de>
    {
        UTIL_SEQ_PreIdle( );
 800a8f6:	f000 f941 	bl	800ab7c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8fa:	f3ef 8310 	mrs	r3, PRIMASK
 800a8fe:	617b      	str	r3, [r7, #20]
  return(result);
 800a900:	697b      	ldr	r3, [r7, #20]

        UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a902:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800a904:	b672      	cpsid	i
}
 800a906:	bf00      	nop
        local_taskset = TaskSet;
 800a908:	4b16      	ldr	r3, [pc, #88]	@ (800a964 <UTIL_SEQ_Run+0x2f8>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	647b      	str	r3, [r7, #68]	@ 0x44
        local_evtset = EvtSet;
 800a90e:	4b16      	ldr	r3, [pc, #88]	@ (800a968 <UTIL_SEQ_Run+0x2fc>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	643b      	str	r3, [r7, #64]	@ 0x40
        local_taskmask = TaskMask;
 800a914:	4b15      	ldr	r3, [pc, #84]	@ (800a96c <UTIL_SEQ_Run+0x300>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800a91a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a91c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a91e:	401a      	ands	r2, r3
 800a920:	4b0d      	ldr	r3, [pc, #52]	@ (800a958 <UTIL_SEQ_Run+0x2ec>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4013      	ands	r3, r2
 800a926:	2b00      	cmp	r3, #0
 800a928:	d107      	bne.n	800a93a <UTIL_SEQ_Run+0x2ce>
        {
            if ((local_evtset & EvtWaited)== 0U)
 800a92a:	4b0d      	ldr	r3, [pc, #52]	@ (800a960 <UTIL_SEQ_Run+0x2f4>)
 800a92c:	681a      	ldr	r2, [r3, #0]
 800a92e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a930:	4013      	ands	r3, r2
 800a932:	2b00      	cmp	r3, #0
 800a934:	d101      	bne.n	800a93a <UTIL_SEQ_Run+0x2ce>
            {
                UTIL_SEQ_Idle( );
 800a936:	f7f5 fe32 	bl	800059e <UTIL_SEQ_Idle>
 800a93a:	6a3b      	ldr	r3, [r7, #32]
 800a93c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	f383 8810 	msr	PRIMASK, r3
}
 800a944:	bf00      	nop
            }
        }
        UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

        UTIL_SEQ_PostIdle( );
 800a946:	f000 f920 	bl	800ab8a <UTIL_SEQ_PostIdle>
    }

    /* restore the mask from UTIL_SEQ_Run() */
    SuperMask = super_mask_backup;
 800a94a:	4a03      	ldr	r2, [pc, #12]	@ (800a958 <UTIL_SEQ_Run+0x2ec>)
 800a94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a94e:	6013      	str	r3, [r2, #0]

    return;
 800a950:	bf00      	nop
}
 800a952:	3750      	adds	r7, #80	@ 0x50
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	20000050 	.word	0x20000050
 800a95c:	200006cc 	.word	0x200006cc
 800a960:	200006c8 	.word	0x200006c8
 800a964:	200006c0 	.word	0x200006c0
 800a968:	200006c4 	.word	0x200006c4
 800a96c:	2000004c 	.word	0x2000004c

0800a970 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b088      	sub	sp, #32
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a97c:	f3ef 8310 	mrs	r3, PRIMASK
 800a980:	617b      	str	r3, [r7, #20]
  return(result);
 800a982:	697b      	ldr	r3, [r7, #20]
    (void)Flags;
    UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a984:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a986:	b672      	cpsid	i
}
 800a988:	bf00      	nop

    TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a98a:	68f8      	ldr	r0, [r7, #12]
 800a98c:	f000 f923 	bl	800abd6 <SEQ_BitPosition>
 800a990:	4603      	mov	r3, r0
 800a992:	4619      	mov	r1, r3
 800a994:	4a06      	ldr	r2, [pc, #24]	@ (800a9b0 <UTIL_SEQ_RegTask+0x40>)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	f383 8810 	msr	PRIMASK, r3
}
 800a9a6:	bf00      	nop

    UTIL_SEQ_EXIT_CRITICAL_SECTION();

    return;
 800a9a8:	bf00      	nop
}
 800a9aa:	3720      	adds	r7, #32
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	200006d0 	.word	0x200006d0

0800a9b4 <UTIL_SEQ_SetTask>:
    UTIL_SEQ_EXIT_CRITICAL_SECTION();
    return _status;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm, uint32_t Task_Prio )
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b087      	sub	sp, #28
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9be:	f3ef 8310 	mrs	r3, PRIMASK
 800a9c2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a9c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a9c8:	b672      	cpsid	i
}
 800a9ca:	bf00      	nop

    TaskSet |= TaskId_bm;
 800a9cc:	4b0d      	ldr	r3, [pc, #52]	@ (800aa04 <UTIL_SEQ_SetTask+0x50>)
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	4a0b      	ldr	r2, [pc, #44]	@ (800aa04 <UTIL_SEQ_SetTask+0x50>)
 800a9d6:	6013      	str	r3, [r2, #0]
    TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a9d8:	4a0b      	ldr	r2, [pc, #44]	@ (800aa08 <UTIL_SEQ_SetTask+0x54>)
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	431a      	orrs	r2, r3
 800a9e4:	4908      	ldr	r1, [pc, #32]	@ (800aa08 <UTIL_SEQ_SetTask+0x54>)
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	f383 8810 	msr	PRIMASK, r3
}
 800a9f6:	bf00      	nop

    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    return;
 800a9f8:	bf00      	nop
}
 800a9fa:	371c      	adds	r7, #28
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr
 800aa04:	200006c0 	.word	0x200006c0
 800aa08:	20000750 	.word	0x20000750

0800aa0c <UTIL_SEQ_PauseTask>:
    UTIL_SEQ_EXIT_CRITICAL_SECTION();
    return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b087      	sub	sp, #28
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa14:	f3ef 8310 	mrs	r3, PRIMASK
 800aa18:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800aa1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa1e:	b672      	cpsid	i
}
 800aa20:	bf00      	nop

    TaskMask &= (~TaskId_bm);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	43da      	mvns	r2, r3
 800aa26:	4b08      	ldr	r3, [pc, #32]	@ (800aa48 <UTIL_SEQ_PauseTask+0x3c>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4013      	ands	r3, r2
 800aa2c:	4a06      	ldr	r2, [pc, #24]	@ (800aa48 <UTIL_SEQ_PauseTask+0x3c>)
 800aa2e:	6013      	str	r3, [r2, #0]
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	f383 8810 	msr	PRIMASK, r3
}
 800aa3a:	bf00      	nop

    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    return;
 800aa3c:	bf00      	nop
}
 800aa3e:	371c      	adds	r7, #28
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr
 800aa48:	2000004c 	.word	0x2000004c

0800aa4c <UTIL_SEQ_ResumeTask>:
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b087      	sub	sp, #28
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa54:	f3ef 8310 	mrs	r3, PRIMASK
 800aa58:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa5a:	68fb      	ldr	r3, [r7, #12]
    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800aa5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa5e:	b672      	cpsid	i
}
 800aa60:	bf00      	nop

    TaskMask |= TaskId_bm;
 800aa62:	4b09      	ldr	r3, [pc, #36]	@ (800aa88 <UTIL_SEQ_ResumeTask+0x3c>)
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	4a07      	ldr	r2, [pc, #28]	@ (800aa88 <UTIL_SEQ_ResumeTask+0x3c>)
 800aa6c:	6013      	str	r3, [r2, #0]
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	f383 8810 	msr	PRIMASK, r3
}
 800aa78:	bf00      	nop

    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    return;
 800aa7a:	bf00      	nop
}
 800aa7c:	371c      	adds	r7, #28
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr
 800aa86:	bf00      	nop
 800aa88:	2000004c 	.word	0x2000004c

0800aa8c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b087      	sub	sp, #28
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa94:	f3ef 8310 	mrs	r3, PRIMASK
 800aa98:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa9a:	68fb      	ldr	r3, [r7, #12]
    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800aa9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa9e:	b672      	cpsid	i
}
 800aaa0:	bf00      	nop

    EvtSet |= EvtId_bm;
 800aaa2:	4b09      	ldr	r3, [pc, #36]	@ (800aac8 <UTIL_SEQ_SetEvt+0x3c>)
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	4a07      	ldr	r2, [pc, #28]	@ (800aac8 <UTIL_SEQ_SetEvt+0x3c>)
 800aaac:	6013      	str	r3, [r2, #0]
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	f383 8810 	msr	PRIMASK, r3
}
 800aab8:	bf00      	nop

    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    return;
 800aaba:	bf00      	nop
}
 800aabc:	371c      	adds	r7, #28
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr
 800aac6:	bf00      	nop
 800aac8:	200006c4 	.word	0x200006c4

0800aacc <UTIL_SEQ_WaitEvt>:

    return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b088      	sub	sp, #32
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
    UTIL_SEQ_bm_t wait_task_idx;
    /*
     * store in local the current_task_id_bm as the global variable CurrentTaskIdx
     * may be overwritten in case there are nested call of UTIL_SEQ_Run()
     */
    current_task_idx = CurrentTaskIdx;
 800aad4:	4b1f      	ldr	r3, [pc, #124]	@ (800ab54 <UTIL_SEQ_WaitEvt+0x88>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	61bb      	str	r3, [r7, #24]
    if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800aada:	4b1e      	ldr	r3, [pc, #120]	@ (800ab54 <UTIL_SEQ_WaitEvt+0x88>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aae2:	d102      	bne.n	800aaea <UTIL_SEQ_WaitEvt+0x1e>
    {
        wait_task_idx = 0u;
 800aae4:	2300      	movs	r3, #0
 800aae6:	61fb      	str	r3, [r7, #28]
 800aae8:	e005      	b.n	800aaf6 <UTIL_SEQ_WaitEvt+0x2a>
    }
    else
    {
        wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800aaea:	4b1a      	ldr	r3, [pc, #104]	@ (800ab54 <UTIL_SEQ_WaitEvt+0x88>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	fa02 f303 	lsl.w	r3, r2, r3
 800aaf4:	61fb      	str	r3, [r7, #28]
    }

    /* backup the event id that was currently waited */
    event_waited_id_backup = EvtWaited;
 800aaf6:	4b18      	ldr	r3, [pc, #96]	@ (800ab58 <UTIL_SEQ_WaitEvt+0x8c>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	617b      	str	r3, [r7, #20]
    EvtWaited = EvtId_bm;
 800aafc:	4a16      	ldr	r2, [pc, #88]	@ (800ab58 <UTIL_SEQ_WaitEvt+0x8c>)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6013      	str	r3, [r2, #0]
     * The system is waiting only for the last waited event.
     * When it will go out, it will wait again from the previous one.
     * It case it occurs while waiting for the second one, the while loop will exit immediately
     */

    while ((EvtSet & EvtId_bm) == 0U)
 800ab02:	e003      	b.n	800ab0c <UTIL_SEQ_WaitEvt+0x40>
    {
        UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800ab04:	6879      	ldr	r1, [r7, #4]
 800ab06:	69f8      	ldr	r0, [r7, #28]
 800ab08:	f000 f82a 	bl	800ab60 <UTIL_SEQ_EvtIdle>
    while ((EvtSet & EvtId_bm) == 0U)
 800ab0c:	4b13      	ldr	r3, [pc, #76]	@ (800ab5c <UTIL_SEQ_WaitEvt+0x90>)
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4013      	ands	r3, r2
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d0f5      	beq.n	800ab04 <UTIL_SEQ_WaitEvt+0x38>
    /*
     * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run()
     * from UTIL_SEQ_EvtIdle(). This is required so that a second call of UTIL_SEQ_WaitEvt()
     * in the same process pass the correct current_task_id_bm in the call of UTIL_SEQ_EvtIdle()
     */
    CurrentTaskIdx = current_task_idx;
 800ab18:	4a0e      	ldr	r2, [pc, #56]	@ (800ab54 <UTIL_SEQ_WaitEvt+0x88>)
 800ab1a:	69bb      	ldr	r3, [r7, #24]
 800ab1c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab1e:	f3ef 8310 	mrs	r3, PRIMASK
 800ab22:	60bb      	str	r3, [r7, #8]
  return(result);
 800ab24:	68bb      	ldr	r3, [r7, #8]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ab26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab28:	b672      	cpsid	i
}
 800ab2a:	bf00      	nop

    EvtSet &= (~EvtId_bm);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	43da      	mvns	r2, r3
 800ab30:	4b0a      	ldr	r3, [pc, #40]	@ (800ab5c <UTIL_SEQ_WaitEvt+0x90>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4013      	ands	r3, r2
 800ab36:	4a09      	ldr	r2, [pc, #36]	@ (800ab5c <UTIL_SEQ_WaitEvt+0x90>)
 800ab38:	6013      	str	r3, [r2, #0]
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f383 8810 	msr	PRIMASK, r3
}
 800ab44:	bf00      	nop

    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    EvtWaited = event_waited_id_backup;
 800ab46:	4a04      	ldr	r2, [pc, #16]	@ (800ab58 <UTIL_SEQ_WaitEvt+0x8c>)
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	6013      	str	r3, [r2, #0]
    return;
 800ab4c:	bf00      	nop
}
 800ab4e:	3720      	adds	r7, #32
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}
 800ab54:	200006cc 	.word	0x200006cc
 800ab58:	200006c8 	.word	0x200006c8
 800ab5c:	200006c4 	.word	0x200006c4

0800ab60 <UTIL_SEQ_EvtIdle>:
    UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
    return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
    (void)EvtWaited_bm;
    UTIL_SEQ_Run(~TaskId_bm);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	43db      	mvns	r3, r3
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7ff fd7c 	bl	800a66c <UTIL_SEQ_Run>
    return;
 800ab74:	bf00      	nop
}
 800ab76:	3708      	adds	r7, #8
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <UTIL_SEQ_PreIdle>:
{
    return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	af00      	add	r7, sp, #0
    /*
     * Unless specified by the application, there is nothing to be done
     */
    return;
 800ab80:	bf00      	nop
}
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr

0800ab8a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800ab8a:	b480      	push	{r7}
 800ab8c:	af00      	add	r7, sp, #0
    /*
     * Unless specified by the application, there is nothing to be done
     */
    return;
 800ab8e:	bf00      	nop
}
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <UTIL_SEQ_PreTask>:

__WEAK void UTIL_SEQ_PreTask( uint32_t TaskId )
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
    (void)TaskId;
    return;
 800aba0:	bf00      	nop
}
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <UTIL_SEQ_PostTask>:

__WEAK void UTIL_SEQ_PostTask( uint32_t TaskId )
{
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
    (void)TaskId;
    return;
 800abb4:	bf00      	nop
}
 800abb6:	370c      	adds	r7, #12
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr

0800abc0 <UTIL_SEQ_CatchWarning>:

__WEAK void UTIL_SEQ_CatchWarning(UTIL_SEQ_WARNING WarningId)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	4603      	mov	r3, r0
 800abc8:	71fb      	strb	r3, [r7, #7]
    (void)WarningId;
    return;
 800abca:	bf00      	nop
}
 800abcc:	370c      	adds	r7, #12
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr

0800abd6 <SEQ_BitPosition>:
  * @brief return the position of the first bit set to 1
  * @param Value 32 bit value
  * @retval bit position
  */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800abd6:	b480      	push	{r7}
 800abd8:	b085      	sub	sp, #20
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d101      	bne.n	800abec <SEQ_BitPosition+0x16>
    return 32U;
 800abe8:	2320      	movs	r3, #32
 800abea:	e003      	b.n	800abf4 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	fab3 f383 	clz	r3, r3
 800abf2:	b2db      	uxtb	r3, r3
    return (uint8_t)(31 -__CLZ( Value ));
 800abf4:	f1c3 031f 	rsb	r3, r3, #31
 800abf8:	b2db      	uxtb	r3, r3
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3714      	adds	r7, #20
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr

0800ac06 <memset>:
 800ac06:	4402      	add	r2, r0
 800ac08:	4603      	mov	r3, r0
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d100      	bne.n	800ac10 <memset+0xa>
 800ac0e:	4770      	bx	lr
 800ac10:	f803 1b01 	strb.w	r1, [r3], #1
 800ac14:	e7f9      	b.n	800ac0a <memset+0x4>
	...

0800ac18 <__libc_init_array>:
 800ac18:	b570      	push	{r4, r5, r6, lr}
 800ac1a:	4d0d      	ldr	r5, [pc, #52]	@ (800ac50 <__libc_init_array+0x38>)
 800ac1c:	4c0d      	ldr	r4, [pc, #52]	@ (800ac54 <__libc_init_array+0x3c>)
 800ac1e:	1b64      	subs	r4, r4, r5
 800ac20:	10a4      	asrs	r4, r4, #2
 800ac22:	2600      	movs	r6, #0
 800ac24:	42a6      	cmp	r6, r4
 800ac26:	d109      	bne.n	800ac3c <__libc_init_array+0x24>
 800ac28:	4d0b      	ldr	r5, [pc, #44]	@ (800ac58 <__libc_init_array+0x40>)
 800ac2a:	4c0c      	ldr	r4, [pc, #48]	@ (800ac5c <__libc_init_array+0x44>)
 800ac2c:	f000 f826 	bl	800ac7c <_init>
 800ac30:	1b64      	subs	r4, r4, r5
 800ac32:	10a4      	asrs	r4, r4, #2
 800ac34:	2600      	movs	r6, #0
 800ac36:	42a6      	cmp	r6, r4
 800ac38:	d105      	bne.n	800ac46 <__libc_init_array+0x2e>
 800ac3a:	bd70      	pop	{r4, r5, r6, pc}
 800ac3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac40:	4798      	blx	r3
 800ac42:	3601      	adds	r6, #1
 800ac44:	e7ee      	b.n	800ac24 <__libc_init_array+0xc>
 800ac46:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac4a:	4798      	blx	r3
 800ac4c:	3601      	adds	r6, #1
 800ac4e:	e7f2      	b.n	800ac36 <__libc_init_array+0x1e>
 800ac50:	0800af10 	.word	0x0800af10
 800ac54:	0800af10 	.word	0x0800af10
 800ac58:	0800af10 	.word	0x0800af10
 800ac5c:	0800af14 	.word	0x0800af14

0800ac60 <memcpy>:
 800ac60:	440a      	add	r2, r1
 800ac62:	4291      	cmp	r1, r2
 800ac64:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac68:	d100      	bne.n	800ac6c <memcpy+0xc>
 800ac6a:	4770      	bx	lr
 800ac6c:	b510      	push	{r4, lr}
 800ac6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac76:	4291      	cmp	r1, r2
 800ac78:	d1f9      	bne.n	800ac6e <memcpy+0xe>
 800ac7a:	bd10      	pop	{r4, pc}

0800ac7c <_init>:
 800ac7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac7e:	bf00      	nop
 800ac80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac82:	bc08      	pop	{r3}
 800ac84:	469e      	mov	lr, r3
 800ac86:	4770      	bx	lr

0800ac88 <_fini>:
 800ac88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac8a:	bf00      	nop
 800ac8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac8e:	bc08      	pop	{r3}
 800ac90:	469e      	mov	lr, r3
 800ac92:	4770      	bx	lr
 800ac94:	0000      	movs	r0, r0
	...

0800ac98 <__FLASH_Program_Fast_veneer>:
 800ac98:	f85f f000 	ldr.w	pc, [pc]	@ 800ac9c <__FLASH_Program_Fast_veneer+0x4>
 800ac9c:	20000055 	.word	0x20000055

Disassembly of section .data:

20000008 <last_voltages_base_addr>:
20000008:	08040000                                ....

2000000c <nominal_cell_mv_addr>:
2000000c:	08041000                                ....

20000010 <charged_cell_mv_addr>:
20000010:	08042000                                . ..

20000014 <discharged_cell_mv_addr>:
20000014:	08043000                                .0..

20000018 <capacity_addr>:
20000018:	08044000                                .@..

2000001c <C_rating_addr>:
2000001c:	08045000                                .P..

20000020 <type_addr>:
20000020:	08046000                                .`..

20000024 <nickname_addr>:
20000024:	08047000                                .p..

20000028 <SystemCoreClock>:
20000028:	003d0900                                ..=.

2000002c <uwTickPrio>:
2000002c:	00000010                                ....

20000030 <uwTickFreq>:
20000030:	00000001                                ....

20000034 <a_AdvData>:
20000034:	6f500911 5f726577 5f676154 5f454c42     ..Power_Tag_BLE_
20000044:	                                         V1

20000046 <SizeMycharwrite>:
20000046:	                                         ..

20000048 <SizeMycharnotify>:
20000048:	                                         ..

2000004a <configurable>:
2000004a:	                                         ..

2000004c <TaskMask>:
2000004c:	ffffffff                                ....

20000050 <SuperMask>:
20000050:	ffffffff                                ....

20000054 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000054:	b480      	push	{r7}
20000056:	b089      	sub	sp, #36	@ 0x24
20000058:	af00      	add	r7, sp, #0
2000005a:	6078      	str	r0, [r7, #4]
2000005c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
2000005e:	2380      	movs	r3, #128	@ 0x80
20000060:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
20000062:	687b      	ldr	r3, [r7, #4]
20000064:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
20000066:	683b      	ldr	r3, [r7, #0]
20000068:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000006a:	4b18      	ldr	r3, [pc, #96]	@ (200000cc <FLASH_Program_Fast+0x78>)
2000006c:	695b      	ldr	r3, [r3, #20]
2000006e:	4a17      	ldr	r2, [pc, #92]	@ (200000cc <FLASH_Program_Fast+0x78>)
20000070:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
20000074:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000076:	f3ef 8310 	mrs	r3, PRIMASK
2000007a:	60fb      	str	r3, [r7, #12]
  return(result);
2000007c:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
2000007e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000080:	b672      	cpsid	i
}
20000082:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
20000084:	697b      	ldr	r3, [r7, #20]
20000086:	681a      	ldr	r2, [r3, #0]
20000088:	69bb      	ldr	r3, [r7, #24]
2000008a:	601a      	str	r2, [r3, #0]
    dest_addr++;
2000008c:	69bb      	ldr	r3, [r7, #24]
2000008e:	3304      	adds	r3, #4
20000090:	61bb      	str	r3, [r7, #24]
    src_addr++;
20000092:	697b      	ldr	r3, [r7, #20]
20000094:	3304      	adds	r3, #4
20000096:	617b      	str	r3, [r7, #20]
    row_index--;
20000098:	7ffb      	ldrb	r3, [r7, #31]
2000009a:	3b01      	subs	r3, #1
2000009c:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
2000009e:	7ffb      	ldrb	r3, [r7, #31]
200000a0:	2b00      	cmp	r3, #0
200000a2:	d1ef      	bne.n	20000084 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
200000a4:	bf00      	nop
200000a6:	4b09      	ldr	r3, [pc, #36]	@ (200000cc <FLASH_Program_Fast+0x78>)
200000a8:	691b      	ldr	r3, [r3, #16]
200000aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
200000ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
200000b2:	d0f8      	beq.n	200000a6 <FLASH_Program_Fast+0x52>
200000b4:	693b      	ldr	r3, [r7, #16]
200000b6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200000b8:	68bb      	ldr	r3, [r7, #8]
200000ba:	f383 8810 	msr	PRIMASK, r3
}
200000be:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200000c0:	bf00      	nop
200000c2:	3724      	adds	r7, #36	@ 0x24
200000c4:	46bd      	mov	sp, r7
200000c6:	f85d 7b04 	ldr.w	r7, [sp], #4
200000ca:	4770      	bx	lr
200000cc:	58004000 	.word	0x58004000
